/**
 * 在試算表打開時創建所有自定義菜單（整合版）
 */
function onOpen() {
  const ui = SpreadsheetApp.getUi();
  
  // 主功能選單群組
  ui.createMenu('👤 個別諮商')
    .addItem('🆕 初次預約', 'showFirstAppointmentDialog')
    .addItem('🔄 個案續約', 'showClientRenewalDialog')
    .addItem('⏱️ 調整預約時間', 'showRescheduleDialog')
    .addItem('🚪 調整諮商空間', 'showChangeRoomDialog')
    .addItem('❌ 取消預約', 'showCancelDialog')
    .addItem('💰 繳交保證金', 'showDepositPaymentDialog')
    .addToUi();
  
  ui.createMenu('👥 團體諮商')
    .addItem('📅 預約團體', 'showGroupReservationDialog')
    .addItem('📅 預約講座', 'showWorkshopReservationDialog')
    .addItem('❌ 取消團體', 'showCancelGroupDialog')
    .addToUi();

  ui.createMenu('✏️ 個案管理')
    .addItem('👩‍👦 個案待辦事項', 'viewClientTodos')
    .addItem('💰 保證金檢核', 'showDepositCheck')
    .addItem('📈 查看系統日誌', 'showSystemLogDialog')
    .addToUi();

  ui.createMenu('⚙️ 系統設定')
    .addItem('💲 保證金條件設定', 'showDepositConditionsDialog')
    .addItem('📝 增加個案服務次數', 'showAddClientServiceRecord')
    .addItem('📋 訊息歷史記錄', 'showMessageHistory')
    .addToUi();
  // 備份系統（最後添加）
  ui.createMenu('🔧 備份系統')
    .addItem('立即備份', 'manualBackup')
    .addItem('備份設定', 'showBackupSettingsDialog')
    .addItem('備份狀態', 'showBackupStatusDialog')
    .addSeparator()
    .addItem('安裝備份觸發器', 'installBackupTriggers')
    .addItem('移除備份觸發器', 'deleteAllBackupTriggers')
    .addToUi();
}

/**
 * 顯示團體預約對話框
 */
function showGroupReservationDialog() {
  // 獲取各項下拉選單的選項
  const counselors = getCounselorList();
  const rooms = getRoomList();
  
  const counselorOptions = counselors.map(counselor => 
    `<option value="${counselor}">${counselor}</option>`).join('');
  const roomOptions = rooms.map(room => 
    `<option value="${room}">${room}</option>`).join('');
  
  var html = `
    <div style="padding: 20px; font-family: Arial, sans-serif;">
      <h2 style="color: #4285f4;">預約團體</h2>
      <div style="margin: 10px 0;">
        <label style="font-weight: bold;">團體名稱：</label><br>
        <input type="text" id="groupName" style="width: 100%; padding: 8px; margin-top: 5px; border: 1px solid #ddd; border-radius: 4px;" placeholder="請輸入團體名稱">
      </div>
      <div style="margin: 10px 0;">
        <label style="font-weight: bold;">帶領者：</label><br>
        <select id="counselor" style="width: 100%; padding: 8px; margin-top: 5px; border: 1px solid #ddd; border-radius: 4px;">
          <option value="">請選擇帶領者</option>
          ${counselorOptions}
        </select>
      </div>
      <div style="margin: 10px 0;">
        <label style="font-weight: bold;">諮商室：</label><br>
        <select id="room" style="width: 100%; padding: 8px; margin-top: 5px; border: 1px solid #ddd; border-radius: 4px;">
          <option value="">請選擇諮商室</option>
          ${roomOptions}
        </select>
      </div>
      <div style="margin: 10px 0;">
        <label style="font-weight: bold;">是否為帶狀團體：</label><br>
        <input type="checkbox" id="isSeriesGroup" style="margin-top: 8px;"> 是
      </div>
      
      <div id="sessionsContainer">
        <h3 style="color: #4285f4; margin-top: 20px;">團體場次</h3>
        <div id="sessionsList">
          <div class="session-item" style="border: 1px solid #ddd; padding: 10px; border-radius: 4px; margin-bottom: 10px;">
            <div style="margin: 10px 0;">
              <label style="font-weight: bold;">日期：</label><br>
              <input type="date" class="session-date" style="width: 100%; padding: 8px; margin-top: 5px; border: 1px solid #ddd; border-radius: 4px;">
            </div>
            <div style="margin: 10px 0; display: flex; justify-content: space-between;">
              <div style="width: 48%;">
                <label style="font-weight: bold;">開始時間：</label><br>
                <select class="session-start-hour" style="width: 45%; padding: 8px; margin-top: 5px; border: 1px solid #ddd; border-radius: 4px;">
                  ${generateHourOptions()}
                </select>
                <select class="session-start-minute" style="width: 45%; padding: 8px; margin-top: 5px; border: 1px solid #ddd; border-radius: 4px;">
                  <option value="00">00</option>
                  <option value="30">30</option>
                </select>
              </div>
              <div style="width: 48%;">
                <label style="font-weight: bold;">結束時間：</label><br>
                <select class="session-end-hour" style="width: 45%; padding: 8px; margin-top: 5px; border: 1px solid #ddd; border-radius: 4px;">
                  ${generateHourOptions()}
                </select>
                <select class="session-end-minute" style="width: 45%; padding: 8px; margin-top: 5px; border: 1px solid #ddd; border-radius: 4px;">
                  <option value="00">00</option>
                  <option value="30">30</option>
                </select>
              </div>
            </div>
          </div>
        </div>
        
        <div style="margin: 15px 0; text-align: center;">
          <button onclick="addNewSession()" style="background-color: #34a853; color: white; border: none; padding: 8px 15px; border-radius: 4px; cursor: pointer;">
            + 新增場次
          </button>
        </div>
      </div>
      
      <div style="margin: 20px 0; text-align: center;">
        <button onclick="submitGroupReservation()" style="background-color: #4285f4; color: white; border: none; padding: 10px 20px; border-radius: 4px; cursor: pointer; margin-right: 10px;">確認預約</button>
        <button onclick="google.script.host.close()" style="background-color: #f1f1f1; border: none; padding: 10px 20px; border-radius: 4px; cursor: pointer;">取消</button>
      </div>
      <div id="message" style="margin-top: 15px; padding: 10px; display: none; border-radius: 4px;"></div>
      
      ${generateLoadingIndicatorHTML()}
    </div>
    <script>
      let sessionCount = 1;
      
      function addNewSession() {
        sessionCount++;
        const sessionItem = document.createElement('div');
        sessionItem.className = 'session-item';
        sessionItem.style = 'border: 1px solid #ddd; padding: 10px; border-radius: 4px; margin-bottom: 10px; position: relative;';
        
        sessionItem.innerHTML = \`
          <div style="position: absolute; top: 5px; right: 5px;">
            <button onclick="removeSession(this)" style="background-color: #db4437; color: white; border: none; width: 25px; height: 25px; border-radius: 50%; cursor: pointer; font-size: 14px; line-height: 1;">×</button>
          </div>
          <div style="margin: 10px 0;">
            <label style="font-weight: bold;">日期：</label><br>
            <input type="date" class="session-date" style="width: 100%; padding: 8px; margin-top: 5px; border: 1px solid #ddd; border-radius: 4px;">
          </div>
          <div style="margin: 10px 0; display: flex; justify-content: space-between;">
            <div style="width: 48%;">
              <label style="font-weight: bold;">開始時間：</label><br>
              <select class="session-start-hour" style="width: 45%; padding: 8px; margin-top: 5px; border: 1px solid #ddd; border-radius: 4px;">
                ${generateHourOptions()}
              </select>
              <select class="session-start-minute" style="width: 45%; padding: 8px; margin-top: 5px; border: 1px solid #ddd; border-radius: 4px;">
                <option value="00">00</option>
                <option value="30">30</option>
              </select>
            </div>
            <div style="width: 48%;">
              <label style="font-weight: bold;">結束時間：</label><br>
              <select class="session-end-hour" style="width: 45%; padding: 8px; margin-top: 5px; border: 1px solid #ddd; border-radius: 4px;">
                ${generateHourOptions()}
              </select>
              <select class="session-end-minute" style="width: 45%; padding: 8px; margin-top: 5px; border: 1px solid #ddd; border-radius: 4px;">
                <option value="00">00</option>
                <option value="30">30</option>
              </select>
            </div>
          </div>
        \`;
        
        document.getElementById('sessionsList').appendChild(sessionItem);
      }
      
      function removeSession(button) {
        const sessionItem = button.closest('.session-item');
        sessionItem.remove();
      }
      
      function submitGroupReservation() {
        const groupName = document.getElementById('groupName').value;
        const counselor = document.getElementById('counselor').value;
        const room = document.getElementById('room').value;
        const isSeriesGroup = document.getElementById('isSeriesGroup').checked;
        
        if (!groupName || !counselor || !room) {
          showMessage('請填寫團體名稱、帶領者和諮商室', 'error');
          return;
        }
        
        // 收集所有場次資料
        const sessionItems = document.querySelectorAll('.session-item');
        const sessions = [];
        
        for (let i = 0; i < sessionItems.length; i++) {
          const item = sessionItems[i];
          const date = item.querySelector('.session-date').value;
          const startHour = item.querySelector('.session-start-hour').value;
          const startMinute = item.querySelector('.session-start-minute').value;
          const endHour = item.querySelector('.session-end-hour').value;
          const endMinute = item.querySelector('.session-end-minute').value;
          
          if (!date || !startHour || !endHour) {
            showMessage(\`請填寫第 \${i+1} 場次的所有時間資訊\`, 'error');
            return;
          }
          
          // 檢查結束時間是否晚於開始時間
          const startTime = parseInt(startHour) * 60 + parseInt(startMinute);
          const endTime = parseInt(endHour) * 60 + parseInt(endMinute);
          
          if (endTime <= startTime) {
            showMessage(\`第 \${i+1} 場次的結束時間必須晚於開始時間\`, 'error');
            return;
          }
          
          sessions.push({
            date: date,
            startTime: startHour + ':' + startMinute,
            endTime: endHour + ':' + endMinute,
            sessionNumber: i + 1
          });
        }
        
        if (sessions.length === 0) {
          showMessage('請至少新增一個團體場次', 'error');
          return;
        }
        
        document.getElementById('message').style.display = 'none';
        
        // 顯示加載指示器
        showLoading();
        
        google.script.run
          .withSuccessHandler(function(result) {
            // 隱藏加載指示器
            hideLoading();
            
            if (result.success) {
              showMessage('團體預約已成功建立！', 'success');
              setTimeout(function() {
                google.script.host.close();
              }, 2000);
            } else {
              showMessage(result.message || '預約建立失敗，請稍後再試', 'error');
            }
          })
          .withFailureHandler(function(error) {
            // 隱藏加載指示器
            hideLoading();
            
            showMessage('發生錯誤：' + error, 'error');
          })
          .processGroupReservation(groupName, counselor, room, isSeriesGroup, sessions);
      }
      
      function showMessage(message, type) {
        var messageDiv = document.getElementById('message');
        messageDiv.innerHTML = message;
        messageDiv.style.display = 'block';
        
        if (type === 'error') {
          messageDiv.style.backgroundColor = '#ffebee';
          messageDiv.style.color = '#c62828';
        } else {
          messageDiv.style.backgroundColor = '#e8f5e9';
          messageDiv.style.color = '#2e7d32';
        }
      }
    </script>
  `;

  var ui = HtmlService.createHtmlOutput(html)
    .setWidth(450)
    .setHeight(650);
    
  SpreadsheetApp.getUi().showModalDialog(ui, '預約團體');
}

/**
 * 處理團體預約請求
 * @param {string} groupName - 團體名稱
 * @param {string} counselor - 帶領者姓名
 * @param {string} room - 諮商室
 * @param {boolean} isSeriesGroup - 是否為帶狀團體
 * @param {Array} sessions - 團體場次資料
 * @return {Object} 處理結果
 */
function processGroupReservation(groupName, counselor, room, isSeriesGroup, sessions) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName("登錄資料");
    const now = new Date();
    
    // 檢查所有場次的時間衝突
    for (let i = 0; i < sessions.length; i++) {
      const session = sessions[i];
      const sessionDate = new Date(session.date);
      const startTime = session.startTime;
      const endTime = session.endTime;
      
      // 檢查諮商室在該時段是否可用
      const roomAvailable = checkRoomAvailabilityForGroup(sessionDate, startTime, endTime, room);
      if (!roomAvailable) {
        // 記錄失敗日誌
        logSystemActivity(
          "團體預約",
          groupName,
          `團體預約失敗: 第 ${i+1} 場次時段衝突`,
          "失敗",
          counselor,
          `衝突場次: ${session.date} ${startTime}-${endTime}, 諮商室: ${room}`
        );
        return { 
          success: false, 
          message: `第 ${i+1} 場次 (${session.date} ${startTime}-${endTime}) 諮商室已被預約，請選擇其他時間或諮商室` 
        };
      }
    }
    
    // 所有場次都無衝突，開始建立預約
    for (let i = 0; i < sessions.length; i++) {
      const session = sessions[i];
      const sessionDate = new Date(session.date);
      const startTime = session.startTime;
      const endTime = session.endTime;
      const sessionNumber = session.sessionNumber;
      
      // 使用 appendRow 添加資料
      sheet.appendRow([
        now,                // 時間戳記
        groupName,          // 團體名稱
        sessionDate,        // 諮商日期
        counselor,          // 帶領者
        "團體諮商",          // 服務方案
        startTime + "-" + endTime, // 時間範圍
        room,               // 諮商室
        "團體",              // 標記為團體
        isSeriesGroup ? "帶狀團體" : "單次團體", // 團體類型
        sessionNumber       // 場次編號
      ]);
      
      // 創建日曆事件
      createGroupCalendarEvent(
        groupName, 
        sessionDate, 
        startTime, 
        endTime, 
        counselor, 
        room, 
        isSeriesGroup,
        sessionNumber
      );
    }
    
    // 根據時間戳記對資料進行排序
    sortDataByTimestamp(sheet);
    
    // 更新統計報表
    updateStatistics();
    
    // 添加成功日誌記錄
    const sessionDetails = sessions.map(session => 
      `${session.date} ${session.startTime}-${session.endTime}`).join(', ');
    
    logSystemActivity(
      "團體預約",
      groupName,
      `帶領者: ${counselor}, 諮商室: ${room}, 場次: ${sessionDetails}`,
      "成功",
      counselor,
      `團體類型: ${isSeriesGroup ? '帶狀團體' : '單次團體'}, 共${sessions.length}場次`
    );

    return { success: true };
  } catch (error) {
    // 記錄失敗日誌
    logSystemActivity(
      "團體預約",
      groupName,
      `團體預約失敗: ${error.toString()}`,
      "失敗",
      counselor
    );
    // 【新增】團體預約成功後，新增小幫手待辦
    sessions.forEach(session => {
      createHelperTodoItem(
        OPERATION_TYPES.GROUP_RESERVATION,
        groupName,
        {
          date: session.date,
          time: session.startTime,
          therapist: counselor,
          room: room,
          serviceType: "團體諮商",
          additionalInfo: `團體名稱：${groupName}, 場次：${session.sessionNumber}`
        }
      );
    }); 
    Logger.log("處理團體預約時出現錯誤：" + error.toString());
    return { success: false, message: '處理預約時出現錯誤: ' + error.toString() };
  }
}

/**
 * 檢查諮商室在指定時段是否可用（團體預約）
 * @param {Date} date - 預約日期
 * @param {string} startTimeString - 開始時間 (HH:MM格式)
 * @param {string} endTimeString - 結束時間 (HH:MM格式)
 * @param {string} room - 諮商室名稱
 * @return {boolean} 諮商室是否可用
 */
function checkRoomAvailabilityForGroup(date, startTimeString, endTimeString, room) {
  try {
    // 從系統設定獲取日曆ID
    const config = getSystemConfig();
    const calendar = CalendarApp.getCalendarById(config.calendarId);
    
    // 分割時間字串取得小時和分鐘
    const [startHours, startMinutes] = startTimeString.split(':').map(Number);
    const [endHours, endMinutes] = endTimeString.split(':').map(Number);
    
    // 設定諮商的開始和結束時間
    const startTime = new Date(date);
    startTime.setHours(startHours);
    startTime.setMinutes(startMinutes);
    startTime.setSeconds(0);
    
    const endTime = new Date(date);
    endTime.setHours(endHours);
    endTime.setMinutes(endMinutes);
    endTime.setSeconds(0);
    
    // 定義檢查範圍：包括前後可能重疊的時間
    // 開始檢查範圍：當天0點
    const dayStart = new Date(date);
    dayStart.setHours(0, 0, 0, 0);
    
    // 結束檢查範圍：當天23:59
    const dayEnd = new Date(date);
    dayEnd.setHours(23, 59, 59, 999);
    
    // 獲取當天所有事件
    const events = calendar.getEvents(dayStart, dayEnd);
    
    // 檢查是否有與當前時段重疊的同一諮商室的預約
    for (let event of events) {
      const title = event.getTitle();
      const desc = event.getDescription();
      
      // 只檢查未取消和未改期的事件
      if (!title.includes("【取消】") && !title.includes("【改期】")) {
        // 檢查諮商室是否相同
        if (title.includes(`- ${room}`) || desc.includes(`諮商室: ${room}`)) {
          // 檢查時間是否重疊
          const eventStart = event.getStartTime();
          const eventEnd = event.getEndTime();
          
          // 檢查重疊的情況：
          // 1. 新預約的開始時間在現有預約的時段內
          // 2. 新預約的結束時間在現有預約的時段內
          // 3. 新預約橫跨現有預約（新預約開始時間早於現有預約，結束時間晚於現有預約）
          if ((startTime >= eventStart && startTime < eventEnd) || 
              (endTime > eventStart && endTime <= eventEnd) ||
              (startTime <= eventStart && endTime >= eventEnd)) {
            return false; // 時段重疊，諮商室不可用
          }
        }
      }
    }
    
    return true; // 諮商室可用
  } catch (error) {
    Logger.log("檢查團體諮商室可用性時出現錯誤：" + error.toString());
    // 出錯時返回false保守處理
    return false;
  }
}

/**
 * 創建團體日曆事件 (強制設定顏色版)
 * @param {string} groupName - 團體名稱
 * @param {Date} date - 諮商日期
 * @param {string} startTimeString - 開始時間 (HH:MM格式)
 * @param {string} endTimeString - 結束時間 (HH:MM格式)
 * @param {string} counselor - 帶領者姓名
 * @param {string} room - 諮商室
 * @param {boolean} isSeriesGroup - 是否為帶狀團體
 * @param {number} sessionNumber - 場次編號
 * @return {CalendarEvent|null} 創建的日曆事件
 */
function createGroupCalendarEvent(groupName, date, startTimeString, endTimeString, counselor, room, isSeriesGroup, sessionNumber) {
  try {
    const config = getSystemConfig();
    const calendar = CalendarApp.getCalendarById(config.calendarId);
    
    const [startHours, startMinutes] = startTimeString.split(':').map(Number);
    const [endHours, endMinutes] = endTimeString.split(':').map(Number);
    
    const startTime = new Date(date);
    startTime.setHours(startHours, startMinutes, 0);
    
    const endTime = new Date(date);
    endTime.setHours(endHours, endMinutes, 0);
    
    const sessionLabel = isSeriesGroup ? `-${sessionNumber}` : '';
    const title = `【團體】${groupName}${sessionLabel}（${counselor}）- ${room}`;
    
    const description = `團體名稱: ${groupName}\n帶領者: ${counselor}\n諮商室: ${room}\n團體類型: ${isSeriesGroup ? '帶状團體' : '單次團體'}\n場次: ${sessionNumber}`;
    
    // 【修改處】先建立事件，但不指定顏色
    const event = calendar.createEvent(title, startTime, endTime, {
      description: description,
      location: room
    });
    
    // 【新增處】如果事件成功建立，立刻強制設定顏色為紫色
    if (event) {
      event.setColor(CalendarApp.EventColor.MAUVE); 
      Logger.log("團體事件創建並成功設定顏色為紫色！");
    }
    
    return event;
  } catch (error) {
    Logger.log("創建團體日曆事件錯誤：" + error.toString());
    return null;
  }
}

/**
 * 顯示取消團體對話框
 */
function showCancelGroupDialog() {
  var html = `
    <!DOCTYPE html>
    <html>
    <head>
      <base target="_top">
      <style>
        body {
          font-family: Arial, sans-serif;
          padding: 20px;
        }
        .form-group {
          margin-bottom: 15px;
        }
        label {
          font-weight: bold;
          display: block;
          margin-bottom: 5px;
        }
        input[type="text"], 
        input[type="date"], 
        textarea {
          width: 100%;
          padding: 8px;
          border: 1px solid #ddd;
          border-radius: 4px;
          box-sizing: border-box;
        }
        textarea {
          height: 80px;
          resize: vertical;
        }
        .radio-group {
          margin-top: 5px;
        }
        .button-group {
          margin-top: 20px;
          text-align: center;
        }
        .btn {
          padding: 10px 20px;
          border: none;
          border-radius: 4px;
          cursor: pointer;
          margin-right: 10px;
        }
        .btn-danger {
          background-color: #db4437;
          color: white;
        }
        .btn-default {
          background-color: #f1f1f1;
        }
        #message {
          margin-top: 15px;
          padding: 10px;
          border-radius: 4px;
          display: none;
        }
        .message-error {
          background-color: #ffebee;
          color: #c62828;
        }
        .message-success {
          background-color: #e8f5e9;
          color: #2e7d32;
        }
        .loading {
          display: none;
          position: fixed;
          top: 0;
          left: 0;
          width: 100%;
          height: 100%;
          background-color: rgba(255, 255, 255, 0.8);
          z-index: 1000;
          text-align: center;
          padding-top: 200px;
        }
        .spinner {
          border: 5px solid #f3f3f3;
          border-top: 5px solid #3498db;
          border-radius: 50%;
          width: 50px;
          height: 50px;
          animation: spin 1s linear infinite;
          margin: 0 auto;
        }
        @keyframes spin {
          0% { transform: rotate(0deg); }
          100% { transform: rotate(360deg); }
        }
      </style>
    </head>
    <body>
      <h2 style="color: #4285f4;">取消團體預約</h2>
      
      <div class="form-group">
        <label for="groupName">團體名稱：</label>
        <input type="text" id="groupName" placeholder="請輸入團體名稱">
      </div>
      
      <div class="form-group">
        <label for="counselor">帶領者：</label>
        <input type="text" id="counselor" placeholder="請輸入帶領者姓名">
      </div>
      
      <div class="form-group">
        <label for="appointmentDate">預約日期：</label>
        <input type="date" id="appointmentDate">
      </div>
      
      <div class="form-group">
        <label>取消選項：</label>
        <div class="radio-group">
          <input type="radio" id="cancelSingle" name="cancelOption" value="single" checked>
          <label for="cancelSingle" style="font-weight: normal; display: inline;">只取消指定日期的場次</label>
        </div>
        <div class="radio-group">
          <input type="radio" id="cancelAll" name="cancelOption" value="all">
          <label for="cancelAll" style="font-weight: normal; display: inline;">取消此團體的所有場次</label>
        </div>
      </div>
      
      <div class="form-group">
        <label for="cancelReason">取消原因：</label>
        <textarea id="cancelReason" placeholder="請輸入取消原因"></textarea>
      </div>
      
      <div class="button-group">
        <button class="btn btn-danger" onclick="submitCancelGroup()">取消預約</button>
        <button class="btn btn-default" onclick="google.script.host.close()">關閉</button>
      </div>
      
      <div id="message"></div>
      
      <div class="loading" id="loading">
        <div class="spinner"></div>
        <p>處理中，請稍候...</p>
      </div>
      
      <script>
        function submitCancelGroup() {
          var groupName = document.getElementById('groupName').value.trim();
          var counselor = document.getElementById('counselor').value.trim();
          var appointmentDate = document.getElementById('appointmentDate').value;
          var cancelOption = document.querySelector('input[name="cancelOption"]:checked').value;
          var reason = document.getElementById('cancelReason').value.trim();
          
          // 驗證輸入
          if (!groupName) {
            showMessage('請輸入團體名稱', 'error');
            return;
          }
          
          if (!counselor) {
            showMessage('請輸入帶領者姓名', 'error');
            return;
          }
          
          if (cancelOption === 'single' && !appointmentDate) {
            showMessage('請選擇預約日期', 'error');
            return;
          }
          
          if (!reason) {
            showMessage('請輸入取消原因', 'error');
            return;
          }
          
          // 確認是否要取消
          var confirmMessage = cancelOption === 'all' 
            ? '確定要取消此團體的所有場次嗎？此操作無法撤銷。' 
            : '確定要取消此團體在指定日期的場次嗎？此操作無法撤銷。';
            
          if (!confirm(confirmMessage)) {
            return;
          }
          
          // 顯示加載指示器
          document.getElementById('loading').style.display = 'block';
          
          // 呼叫後端處理取消
          if (cancelOption === 'all') {
            google.script.run
              .withSuccessHandler(handleCancelSuccess)
              .withFailureHandler(handleCancelError)
              .cancelGroupByNameAndCounselor(groupName, counselor, reason);
          } else {
            google.script.run
              .withSuccessHandler(handleCancelSuccess)
              .withFailureHandler(handleCancelError)
              .cancelGroupByNameCounselorAndDate(groupName, counselor, appointmentDate, reason);
          }
        }
        
        function handleCancelSuccess(result) {
          // 隱藏加載指示器
          document.getElementById('loading').style.display = 'none';
          
          if (result.success) {
            var message = '';
            if (result.cancelCount) {
              message = '已成功取消 ' + result.cancelCount + ' 個團體場次！';
            } else {
              message = '已成功取消團體場次！';
            }
              
            showMessage(message, 'success');
            
            // 2秒後關閉對話框
            setTimeout(function() {
              google.script.host.close();
            }, 2000);
          } else {
            showMessage(result.message || '取消團體失敗，請稍後再試', 'error');
          }
        }
        
        function handleCancelError(error) {
          // 隱藏加載指示器
          document.getElementById('loading').style.display = 'none';
          showMessage('發生錯誤：' + error, 'error');
        }
        
        function showMessage(message, type) {
          var messageDiv = document.getElementById('message');
          messageDiv.innerHTML = message;
          messageDiv.style.display = 'block';
          
          if (type === 'error') {
            messageDiv.className = 'message-error';
          } else {
            messageDiv.className = 'message-success';
          }
          
          // 滾動到訊息
          messageDiv.scrollIntoView({ behavior: 'smooth' });
        }
      </script>
    </body>
    </html>
  `;

  var ui = HtmlService.createHtmlOutput(html)
    .setWidth(450)
    .setHeight(600);
    
  SpreadsheetApp.getUi().showModalDialog(ui, '取消團體預約');
}

/**
 * 根據團體名稱、帶領者和日期取消單次團體場次
 */
function cancelGroupByNameCounselorAndDate(groupName, counselor, dateStr, reason) {
  try {
    var sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('登錄資料');
    if (!sheet) {
      return { success: false, message: '找不到登錄資料表單' };
    }
    
    var data = sheet.getDataRange().getValues();
    
    // 解析日期
    var targetDate = new Date(dateStr);
    var cancelCount = 0;
    var calendarUpdateCount = 0;
    
    // 日曆相關
    var calendar;
    try {
      calendar = CalendarApp.getDefaultCalendar();
    } catch (e) {
      Logger.log("獲取日曆失敗：" + e.toString());
      calendar = null;
    }
    
    // 先找出所有要刪除的行，避免在循環中刪除導致索引錯亂
    var rowsToDelete = [];
    
    for (var i = 1; i < data.length; i++) {
      var row = data[i];
      var rowClientName = row[1]; // B列 - 個案姓名/團體名稱
      var rowDate = row[2];       // C列 - 日期
      var rowCounselor = row[3];  // D列 - 心理師/帶領者
      var rowTime = row[5];       // F列 - 時間
      var rowRoom = row[6];       // G列 - 諮商室
      
      // 檢查是否匹配
      if (rowClientName === groupName && 
          rowCounselor === counselor && 
          isSameDay(rowDate, targetDate)) {
        
        // 取消日曆事件（如果日曆可用）
        if (calendar) {
          var calendarUpdated = cancelCalendarEvent(calendar, rowDate, rowTime, rowCounselor, rowRoom, rowClientName);
          if (calendarUpdated) {
            calendarUpdateCount++;
          }
        }
        
        // 記錄要刪除的行
        rowsToDelete.push(i + 1);
        cancelCount++;
      }
    }
    
    // 從後往前刪除行，避免索引變化
    rowsToDelete.sort(function(a, b) { return b - a; });
    for (var j = 0; j < rowsToDelete.length; j++) {
      sheet.deleteRow(rowsToDelete[j]);
    }
    
    if (cancelCount > 0) {
      var message = '已成功刪除 ' + cancelCount + ' 個團體場次記錄';
      if (calendar) {
        message += '，其中 ' + calendarUpdateCount + ' 個日曆事件已標記為取消';
      }
      
      // 添加成功日誌記錄
      logSystemActivity(
        "取消團體",
        groupName,
        `取消單次團體場次: ${dateStr}, 帶領者: ${counselor}`,
        "成功",
        counselor,
        `取消原因: ${reason}, 取消場次數: ${cancelCount}`
      );
      
      return { success: true, cancelCount: cancelCount, message: message };
    } else {
      // 記錄失敗日誌
      logSystemActivity(
        "取消團體",
        groupName,
        `取消團體失敗: 找不到符合條件的團體場次`,
        "失敗",
        counselor,
        `嘗試取消日期: ${dateStr}, 取消原因: ${reason}`
      );
      return { success: false, message: '找不到符合條件的團體場次' };
    }
  } catch (error) {
    // 記錄失敗日誌
    logSystemActivity(
      "取消團體",
      groupName,
      `取消團體場次錯誤: ${error.toString()}`,
      "失敗",
      counselor
    );
    
    Logger.log('取消團體場次錯誤: ' + error);
    return { success: false, message: '發生錯誤: ' + error };
  }
}


/**
 * 根據團體名稱和帶領者取消所有團體場次
 */
function cancelGroupByNameAndCounselor(groupName, counselor, reason) {
  try {
    var sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('登錄資料');
    if (!sheet) {
      return { success: false, message: '找不到登錄資料表單' };
    }
    
    var data = sheet.getDataRange().getValues();
    
    var cancelCount = 0;
    var calendarUpdateCount = 0;
    
    // 日曆相關
    var calendar;
    try {
      calendar = CalendarApp.getDefaultCalendar();
    } catch (e) {
      Logger.log("獲取日曆失敗：" + e.toString());
      calendar = null;
    }
    
    // 先找出所有要刪除的行，避免在循環中刪除導致索引錯亂
    var rowsToDelete = [];
    var calendarEvents = [];
    
    for (var i = 1; i < data.length; i++) {
      var row = data[i];
      var rowClientName = row[1]; // B列 - 個案姓名/團體名稱
      var rowDate = row[2];       // C列 - 日期
      var rowCounselor = row[3];  // D列 - 心理師/帶領者
      var rowTime = row[5];       // F列 - 時間
      var rowRoom = row[6];       // G列 - 諮商室
      
      // 檢查是否匹配
      if (rowClientName === groupName && rowCounselor === counselor) {
        // 記錄要刪除的行
        rowsToDelete.push(i + 1);
        
        // 記錄要取消的日曆事件
        if (calendar) {
          calendarEvents.push({
            date: rowDate,
            time: rowTime,
            counselor: rowCounselor,
            room: rowRoom,
            clientName: rowClientName
          });
        }
        
        cancelCount++;
      }
    }
    
    // 從後往前刪除行，避免索引變化
    rowsToDelete.sort(function(a, b) { return b - a; });
    for (var j = 0; j < rowsToDelete.length; j++) {
      sheet.deleteRow(rowsToDelete[j]);
    }
    
    // 處理日曆事件取消
    if (calendar) {
      for (var k = 0; k < calendarEvents.length; k++) {
        var event = calendarEvents[k];
        var calendarUpdated = cancelCalendarEvent(
          calendar, 
          event.date, 
          event.time, 
          event.counselor, 
          event.room, 
          event.clientName
        );
        
        if (calendarUpdated) {
          calendarUpdateCount++;
        }
        
        // 添加短暫延遲，避免 Google 日曆 API 限制
        Utilities.sleep(100);
      }
    }
    
    if (cancelCount > 0) {
      var message = '已成功刪除 ' + cancelCount + ' 個團體場次記錄';
      if (calendar) {
        message += '，其中 ' + calendarUpdateCount + ' 個日曆事件已標記為取消';
      }
      
      // 添加成功日誌記錄
      logSystemActivity(
        "取消團體",
        groupName,
        `取消所有團體場次, 帶領者: ${counselor}`,
        "成功",
        counselor,
        `取消原因: ${reason}, 取消場次數: ${cancelCount}`
      );
      
      return { success: true, cancelCount: cancelCount, message: message };
    } else {
      // 記錄失敗日誌
      logSystemActivity(
        "取消團體",
        groupName,
        `取消團體失敗: 找不到符合條件的團體場次`,
        "失敗",
        counselor,
        `取消原因: ${reason}`
      );
      return { success: false, message: '找不到符合條件的團體場次' };
    }
  } catch (error) {
    // 記錄失敗日誌
    logSystemActivity(
      "取消團體",
      groupName,
      `取消團體場次錯誤: ${error.toString()}`,
      "失敗",
      counselor
    );
    
    Logger.log('取消團體場次錯誤: ' + error);
    return { success: false, message: '發生錯誤: ' + error };
  }
}

/**
 * 檢查兩個日期是否為同一天
 */
function isSameDay(date1, date2) {
  if (!(date1 instanceof Date)) date1 = new Date(date1);
  if (!(date2 instanceof Date)) date2 = new Date(date2);
  
  return date1.getFullYear() === date2.getFullYear() &&
         date1.getMonth() === date2.getMonth() &&
         date1.getDate() === date2.getDate();
}

/**
 * 取消日曆事件
 */
function cancelCalendarEvent(calendar, date, timeRange, counselor, room, groupName) {
  try {
    // 解析時間範圍
    var timeParts = timeRange.split('-').map(function(t) { return t.trim(); });
    var startTimeStr = timeParts[0];
    var endTimeStr = timeParts.length > 1 ? timeParts[1] : null;
    
    // 設定事件開始和結束時間
    var startTime = new Date(date);
    try {
      var startHourMin = startTimeStr.split(':');
      startTime.setHours(parseInt(startHourMin[0]), parseInt(startHourMin[1]), 0, 0);
    } catch (e) {
      Logger.log("解析開始時間錯誤：" + e.toString() + ", 使用預設時間");
      startTime.setHours(9, 0, 0, 0); // 使用預設時間
    }
    
    var endTime = new Date(date);
    if (endTimeStr) {
      try {
        var endHourMin = endTimeStr.split(':');
        endTime.setHours(parseInt(endHourMin[0]), parseInt(endHourMin[1]), 0, 0);
      } catch (e) {
        Logger.log("解析結束時間錯誤：" + e.toString() + ", 使用預設結束時間");
        endTime.setHours(startTime.getHours() + 1, startTime.getMinutes(), 0, 0);
      }
    } else {
      // 如果沒有結束時間，假設持續1小時
      endTime.setHours(startTime.getHours() + 1, startTime.getMinutes(), 0, 0);
    }
    
    // 設定搜尋範圍（當天）
    var dayStart = new Date(date);
    dayStart.setHours(0, 0, 0, 0);
    
    var dayEnd = new Date(date);
    dayEnd.setHours(23, 59, 59, 999);
    
    // 獲取當天所有事件
    var events;
    try {
      events = calendar.getEvents(dayStart, dayEnd);
    } catch (e) {
      Logger.log("獲取日曆事件錯誤：" + e.toString());
      return false; // 獲取事件失敗，返回失敗
    }
    
    // 找到並取消匹配的事件
    var eventFound = false;
    
    for (var i = 0; i < events.length; i++) {
      try {
        var event = events[i];
        var title = event.getTitle();
        
        // 檢查是否為目標事件（團體名稱、帶領者、諮商室都匹配）
        if (title.indexOf(groupName) !== -1 && 
            title.indexOf(counselor) !== -1 && 
            (title.indexOf(room) !== -1 || room === "") && 
            title.indexOf("【取消】") === -1) {
          
          // 更新事件標題，標記為取消
          event.setTitle("【取消】" + title);
          
          // 將事件設為灰色
          event.setColor(CalendarApp.EventColor.GRAY);
          
          Logger.log("已取消日曆事件：" + title);
          eventFound = true;
          break;
        }
      } catch (e) {
        Logger.log("處理事件時出錯：" + e.toString());
        continue; // 跳過這個事件，繼續處理下一個
      }
    }
    
    if (!eventFound) {
      Logger.log("未找到匹配的日曆事件：團體=" + groupName + ", 帶領者=" + counselor + ", 日期=" + Utilities.formatDate(date, "GMT+8", "yyyy-MM-dd"));
    }
    
    return eventFound;
  } catch (error) {
    Logger.log("取消日曆事件錯誤：" + error.toString());
    return false; // 發生錯誤，返回失敗
  }
}

/**
 * 根據團體名稱、帶領者和日期取消單次團體場次
 */
function cancelGroupByNameCounselorAndDate(groupName, counselor, dateStr, reason) {
  try {
    var sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('登錄資料');
    if (!sheet) {
      return { success: false, message: '找不到登錄資料表單' };
    }
    
    var data = sheet.getDataRange().getValues();
    
    // 解析日期
    var targetDate = new Date(dateStr);
    var cancelCount = 0;
    var calendarUpdateCount = 0;
    
    // 日曆相關
    var calendar;
    try {
      calendar = CalendarApp.getDefaultCalendar();
    } catch (e) {
      Logger.log("獲取日曆失敗：" + e.toString());
      calendar = null;
    }
    
    // 先找出所有要刪除的行，避免在循環中刪除導致索引錯亂
    var rowsToDelete = [];
    
    for (var i = 1; i < data.length; i++) {
      var row = data[i];
      var rowClientName = row[1]; // B列 - 個案姓名/團體名稱
      var rowDate = row[2];       // C列 - 日期
      var rowCounselor = row[3];  // D列 - 心理師/帶領者
      var rowTime = row[5];       // F列 - 時間
      var rowRoom = row[6];       // G列 - 諮商室
      
      // 檢查是否匹配
      if (rowClientName === groupName && 
          rowCounselor === counselor && 
          isSameDay(rowDate, targetDate)) {
        
        // 取消日曆事件（如果日曆可用）
        if (calendar) {
          var calendarUpdated = cancelCalendarEvent(calendar, rowDate, rowTime, rowCounselor, rowRoom, rowClientName);
          if (calendarUpdated) {
            calendarUpdateCount++;
          }
        }
        
        // 記錄要刪除的行
        rowsToDelete.push(i + 1);
        cancelCount++;
      }
    }
    
    // 從後往前刪除行，避免索引變化
    rowsToDelete.sort(function(a, b) { return b - a; });
    for (var j = 0; j < rowsToDelete.length; j++) {
      sheet.deleteRow(rowsToDelete[j]);
    }
    
    if (cancelCount > 0) {
      var message = '已成功刪除 ' + cancelCount + ' 個團體場次記錄';
      if (calendar) {
        message += '，其中 ' + calendarUpdateCount + ' 個日曆事件已標記為取消';
      }
      return { success: true, cancelCount: cancelCount, message: message };
    } else {
      return { success: false, message: '找不到符合條件的團體場次' };
    }
  } catch (error) {
    Logger.log('取消團體場次錯誤: ' + error);
    return { success: false, message: '發生錯誤: ' + error };
  }
}

/**
 * 根據團體名稱和帶領者取消所有團體場次
 */
function cancelGroupByNameAndCounselor(groupName, counselor, reason) {
  try {
    var sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('登錄資料');
    if (!sheet) {
      return { success: false, message: '找不到登錄資料表單' };
    }
    
    var data = sheet.getDataRange().getValues();
    
    var cancelCount = 0;
    var calendarUpdateCount = 0;
    
    // 日曆相關
    var calendar;
    try {
      calendar = CalendarApp.getDefaultCalendar();
    } catch (e) {
      Logger.log("獲取日曆失敗：" + e.toString());
      calendar = null;
    }
    
    // 先找出所有要刪除的行，避免在循環中刪除導致索引錯亂
    var rowsToDelete = [];
    var calendarEvents = [];
    
    for (var i = 1; i < data.length; i++) {
      var row = data[i];
      var rowClientName = row[1]; // B列 - 個案姓名/團體名稱
      var rowDate = row[2];       // C列 - 日期
      var rowCounselor = row[3];  // D列 - 心理師/帶領者
      var rowTime = row[5];       // F列 - 時間
      var rowRoom = row[6];       // G列 - 諮商室
      
      // 檢查是否匹配
      if (rowClientName === groupName && rowCounselor === counselor) {
        // 記錄要刪除的行
        rowsToDelete.push(i + 1);
        
        // 記錄要取消的日曆事件
        if (calendar) {
          calendarEvents.push({
            date: rowDate,
            time: rowTime,
            counselor: rowCounselor,
            room: rowRoom,
            clientName: rowClientName
          });
        }
        
        cancelCount++;
      }
    }
    
    // 從後往前刪除行，避免索引變化
    rowsToDelete.sort(function(a, b) { return b - a; });
    for (var j = 0; j < rowsToDelete.length; j++) {
      sheet.deleteRow(rowsToDelete[j]);
    }
    
    // 處理日曆事件取消
    if (calendar) {
      for (var k = 0; k < calendarEvents.length; k++) {
        var event = calendarEvents[k];
        var calendarUpdated = cancelCalendarEvent(
          calendar, 
          event.date, 
          event.time, 
          event.counselor, 
          event.room, 
          event.clientName
        );
        
        if (calendarUpdated) {
          calendarUpdateCount++;
        }
        
        // 添加短暫延遲，避免 Google 日曆 API 限制
        Utilities.sleep(100);
      }
    }
    
    if (cancelCount > 0) {
      var message = '已成功刪除 ' + cancelCount + ' 個團體場次記錄';
      if (calendar) {
        message += '，其中 ' + calendarUpdateCount + ' 個日曆事件已標記為取消';
      }
      return { success: true, cancelCount: cancelCount, message: message };
    } else {
      return { success: false, message: '找不到符合條件的團體場次' };
    }
  } catch (error) {
    Logger.log('取消團體場次錯誤: ' + error);
    return { success: false, message: '發生錯誤: ' + error };
  }
}

/**
 * 處理調整諮商空間的請求
 * @param {string} clientName - 個案姓名
 * @param {string} appointmentDate - 預約日期字串
 * @param {string} counselor - 心理師姓名
 * @param {string} newRoom - 新諮商空間
 * @return {Object} 處理結果
 */
function processChangeRoomRequest(clientName, appointmentDate, counselor, newRoom) {
  try {
    var date = new Date(appointmentDate);
    const result = changeAppointmentRoom(clientName, date, counselor, newRoom);
    
    if (result.success) {
      // 添加成功日誌
      logSystemActivity(
        "調整諮商空間",
        clientName,
        `預約日期: ${appointmentDate}, 新諮商室: ${newRoom}`,
        "成功",
        counselor,
        "諮商空間調整完成"
      );
        // 【新增】調整空間成功後，新增小幫手待辦
        createHelperTodoItem(
          "調整諮商空間",
          clientName,
          {
            date: appointmentDate,
            time: appointmentInfo.time,
            therapist: counselor,
            room: newRoom,
            serviceType: appointmentInfo.serviceType,
            additionalInfo: `原諮商室：${appointmentInfo.room} → 新諮商室：${newRoom}`
          }
        );
    } else {
      // 添加失敗日誌
      logSystemActivity(
        "調整諮商空間",
        clientName,
        `調整諮商空間失敗: ${result.message}`,
        "失敗",
        counselor
      );
    }
    
    return result;
  } catch (error) {
    // 記錄失敗日誌
    logSystemActivity(
      "調整諮商空間",
      clientName,
      `調整諮商空間失敗: ${error.toString()}`,
      "失敗",
      counselor
    );
    
    Logger.log("處理調整諮商空間請求時出錯: " + error.toString());
    return { success: false, message: "處理過程中發生錯誤: " + error.toString() };
  }
}


/**
 * 調整諮商空間的核心功能
 * @param {string} clientName - 個案姓名
 * @param {Date} appointmentDate - 預約日期
 * @param {string} counselor - 心理師姓名
 * @param {string} newRoom - 新諮商空間
 * @return {Object} 處理結果
 */
function changeAppointmentRoom(clientName, appointmentDate, counselor, newRoom) {
  try {
    // 1. 檢查新諮商室在該時段是否可用
    // 首先需要獲取預約的時間
    const appointmentInfo = findAppointmentInfo(clientName, appointmentDate, counselor);
    if (!appointmentInfo) {
      return { success: false, message: "找不到符合條件的預約記錄" };
    }
    
    const appointmentTime = appointmentInfo.time;
    
    // 檢查新諮商室是否可用（排除原預約）
    const roomAvailable = checkRoomAvailabilityExcludingCurrent(
      appointmentDate, 
      appointmentTime, 
      newRoom, 
      clientName, 
      counselor
    );
    
    if (!roomAvailable) {
      return { success: false, message: "該時段新諮商室已被預約，請選擇其他諮商室" };
    }
    
    // 2. 修改試算表中的諮商室資料
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName("登錄資料");
    const data = sheet.getDataRange().getValues();
    let updated = false;
    
    for (let i = 1; i < data.length; i++) {
      if (data[i][1] === clientName && 
          isSameDay(new Date(data[i][2]), appointmentDate) &&
          data[i][3] === counselor) {
        // 更新諮商室
        sheet.getRange(i + 1, 7).setValue(newRoom);
        Logger.log("已在試算表中更新諮商室");
        updated = true;
        break;
      }
    }
    
    if (!updated) {
      return { success: false, message: "找不到符合條件的預約記錄" };
    }
    
    // 3. 修改Google日曆事件
    const config = getSystemConfig();
    const calendar = CalendarApp.getCalendarById(config.calendarId);
    const events = calendar.getEventsForDay(appointmentDate);
    let eventUpdated = false;
    
    for (let event of events) {
      const title = event.getTitle();
      const description = event.getDescription();
      
      if (title.includes(clientName) && title.includes(counselor)) {
        // 更新事件標題中的諮商室
        const newTitle = title.replace(/- .*$/, `- ${newRoom}`);
        event.setTitle(newTitle);
        
        // 更新事件描述中的諮商室
        const newDescription = description.replace(/諮商室: .*(\n|$)/, `諮商室: ${newRoom}\n`);
        event.setDescription(newDescription);
        
        Logger.log("已更新Google日曆事件");
        eventUpdated = true;
        break;
      }
    }
    
    if (!eventUpdated) {
      Logger.log("警告：找不到對應的Google日曆事件");
    }
    
    return { success: true };
  } catch (error) {
    Logger.log("調整諮商空間時發生錯誤：" + error.toString());
    return { success: false, message: "處理過程中發生錯誤: " + error.toString() };
  }
}

/**
 * 檢查兩個日期是否為同一天
 * @param {Date} date1 - 第一個日期
 * @param {Date} date2 - 第二個日期
 * @return {boolean} 是否為同一天
 */
function isSameDay(date1, date2) {
  return date1.getFullYear() === date2.getFullYear() &&
         date1.getMonth() === date2.getMonth() &&
         date1.getDate() === date2.getDate();
}

/**
 * 查找預約資訊
 * @param {string} clientName - 個案姓名
 * @param {Date} appointmentDate - 預約日期
 * @param {string} counselor - 心理師姓名
 * @return {Object|null} 預約資訊
 */
function findAppointmentInfo(clientName, appointmentDate, counselor) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName("登錄資料");
    const data = sheet.getDataRange().getValues();
    
    for (let i = 1; i < data.length; i++) {
      if (data[i][1] === clientName && 
          isSameDay(new Date(data[i][2]), appointmentDate) &&
          data[i][3] === counselor) {
        
        return {
          clientName: data[i][1],
          date: new Date(data[i][2]),
          counselor: data[i][3],
          serviceType: data[i][4],
          time: data[i][5],
          room: data[i][6]
        };
      }
    }
    
    return null;
  } catch (error) {
    Logger.log("查找預約資訊時出錯: " + error.toString());
    return null;
  }
}

/**
 * 檢查諮商室在指定時段是否可用（排除當前預約）
 * @param {Date} date - 預約日期
 * @param {string} timeString - 預約時間 (HH:MM格式)
 * @param {string} room - 諮商室名稱
 * @param {string} currentClientName - 當前預約的個案姓名
 * @param {string} currentCounselor - 當前預約的心理師
 * @return {boolean} 諮商室是否可用
 */
function checkRoomAvailabilityExcludingCurrent(date, timeString, room, currentClientName, currentCounselor) {
  try {
    // 從系統設定獲取日曆ID
    const config = getSystemConfig();
    const calendar = CalendarApp.getCalendarById(config.calendarId);
    
    // 分割時間字串取得小時和分鐘
    const [hours, minutes] = timeString.split(':').map(Number);
    
    // 設定諮商的開始和結束時間
    const startTime = new Date(date);
    startTime.setHours(hours);
    startTime.setMinutes(minutes);
    startTime.setSeconds(0);
    
    const endTime = new Date(startTime);
    endTime.setMinutes(startTime.getMinutes() + config.counselingDuration); // 諮商時長
    
    // 定義檢查範圍：包括前後可能重疊的時間
    // 開始檢查範圍：當天0點
    const dayStart = new Date(date);
    dayStart.setHours(0, 0, 0, 0);
    
    // 結束檢查範圍：當天23:59
    const dayEnd = new Date(date);
    dayEnd.setHours(23, 59, 59, 999);
    
    // 獲取當天所有事件
    const events = calendar.getEvents(dayStart, dayEnd);
    
    // 檢查是否有與當前時段重疊的同一諮商室的預約
    for (let event of events) {
      const title = event.getTitle();
      const desc = event.getDescription();
      
      // 排除當前預約
      if (title.includes(currentClientName) && title.includes(currentCounselor)) {
        continue;
      }
      
      // 只檢查未取消和未改期的事件
      if (!title.includes("【取消】") && !title.includes("【改期】")) {
        // 檢查諮商室是否相同
        if (title.includes(`- ${room}`) || desc.includes(`諮商室: ${room}`)) {
          // 檢查時間是否重疊
          const eventStart = event.getStartTime();
          const eventEnd = event.getEndTime();
          
          // 檢查重疊的情況：
          // 1. 新預約的開始時間在現有預約的時段內
          // 2. 新預約的結束時間在現有預約的時段內
          // 3. 新預約橫跨現有預約（新預約開始時間早於現有預約，結束時間晚於現有預約）
          if ((startTime >= eventStart && startTime < eventEnd) || 
              (endTime > eventStart && endTime <= eventEnd) ||
              (startTime <= eventStart && endTime >= eventEnd)) {
            return false; // 時段重疊，諮商室不可用
          }
        }
      }
    }
    
    return true; // 諮商室可用
  } catch (error) {
    Logger.log("檢查諮商室可用性時出現錯誤：" + error.toString());
    // 出錯時返回false保守處理
    return false;
  }
}

/**
 * 系統設定管理
 * 集中管理系統中使用的常數和設定
 */
function getSystemConfig() {
  return {
    calendarId: 'outhearter@gmail.com',
    counselingDuration: 50, // 諮商時長(分鐘)
    timeZone: 'Asia/Taipei',
    systemName: '浪心人心理諮商所預約系統'
  };
}

/**
 * 生成加載指示器的 HTML 和 JavaScript
 * @return {string} 加載指示器的 HTML 和 JavaScript
 */
function generateLoadingIndicatorHTML() {
  return `
    <style>
      .loading-overlay {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(255, 255, 255, 0.8);
        z-index: 1000;
        justify-content: center;
        align-items: center;
        flex-direction: column;
      }
      
      .spinner {
        border: 5px solid #f3f3f3;
        border-top: 5px solid #4285f4;
        border-radius: 50%;
        width: 40px;
        height: 40px;
        animation: spin 1s linear infinite;
        margin-bottom: 10px;
      }
      
      @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
      }
    </style>
    <div class="loading-overlay" id="loadingOverlay">
      <div class="spinner"></div>
      <div>處理中，請稍候...</div>
    </div>
    <script>
      function showLoading() {
        document.getElementById('loadingOverlay').style.display = 'flex';
      }
      
      function hideLoading() {
        document.getElementById('loadingOverlay').style.display = 'none';
      }
    </script>
  `;
}

/**
 * 當表單提交時觸發
 * @param {Object} e - 表單提交事件物件
 */
function onFormSubmit(e) {
  try {
    Logger.log("觸發了onFormSubmit函數，開始處理...");
    
    // 變數預設值
    let clientName, counselingDate, counselor, serviceType, time, room, deposit;
    
    // 檢查是從表單還是從試算表觸發
    if (e && e.response) {
      // 從表單回應中獲取數據
      Logger.log("從表單提交觸發");
      const itemResponses = e.response.getItemResponses();
      
      // 獲取每個問題的回答
      for (let i = 0; i < itemResponses.length; i++) {
        const response = itemResponses[i];
        const title = response.getItem().getTitle();
        const answer = response.getResponse();
        Logger.log(`表單問題: ${title}, 答案: ${answer}`);
        
        // 根據問題標題映射到對應變數
        if (title.includes("個案姓名")) clientName = answer;
        else if (title.includes("諮商日期")) counselingDate = new Date(answer);
        else if (title.includes("心理師")) counselor = answer;
        else if (title.includes("服務方案")) serviceType = answer;
        else if (title.includes("時間")) time = answer;
        else if (title.includes("諮商室")) room = answer;
        else if (title.includes("保證金")) deposit = answer;
      }
    } else {
      // 從試算表中獲取數據
      Logger.log("從試算表觸發");
      const ss = SpreadsheetApp.getActiveSpreadsheet();
      const sheet = ss.getSheetByName("登錄資料");
      const lastRow = sheet.getLastRow();
      
      if (lastRow > 1) {
        const rowData = sheet.getRange(lastRow, 1, 1, 7).getValues()[0];
        clientName = rowData[1];
        counselingDate = rowData[2];
        counselor = rowData[3];
        serviceType = rowData[4];
        time = rowData[5];
        room = rowData[6];
      } else {
        Logger.log("試算表中無資料");
        return;
      }
    }
    
    // 必要參數檢查
    if (!clientName || !counselingDate || !counselor || !serviceType || !time) {
      Logger.log("必要參數缺失，無法處理");
      return;
    }
    
    Logger.log(`準備處理預約: 客戶=${clientName}, 心理師=${counselor}, 日期=${counselingDate}, 時間=${time}`);
    
    // 創建日曆事件
    createCalendarEvent(clientName, serviceType, counselingDate, time, counselor, room);
    
    // 對資料進行排序，確保最新的記錄在最下方
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName("登錄資料");
    sortDataByTimestamp(sheet);
    
    // 更新統計報表
    updateStatistics();
    
    // 通知心理師
    const emailResult = notifyCounselor(clientName, serviceType, counselingDate, time, counselor, room);
    Logger.log(`郵件發送結果: ${emailResult ? "成功" : "失敗"}`);
    
    Logger.log("表單處理完成");
  } catch (error) {
    Logger.log(`處理表單提交時出錯: ${error.toString()}`);
  }
}

/**
 * 保留 processForm 作為兼容
 */
function processForm(e) {
  onFormSubmit(e);
}

/**
 * 安裝表單提交觸發器
 */
function setupFormTriggers() {
  // 刪除現有的觸發器以避免重複
  const triggers = ScriptApp.getProjectTriggers();
  for (let i = 0; i < triggers.length; i++) {
    if (triggers[i].getHandlerFunction() === 'onFormSubmit') {
      ScriptApp.deleteTrigger(triggers[i]);
    }
  }
  
  // 設定試算表提交觸發器
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  ScriptApp.newTrigger('onFormSubmit')
    .forSpreadsheet(ss)
    .onFormSubmit()
    .create();
  
  Logger.log("已成功設置表單提交觸發器");
}

/**
 * 重設所有觸發器
 */
function resetAllTriggers() {
  // 刪除所有已存在的觸發器
  const triggers = ScriptApp.getProjectTriggers();
  for (let i = 0; i < triggers.length; i++) {
    ScriptApp.deleteTrigger(triggers[i]);
  }
  
  // 重新設定表單提交觸發器
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  ScriptApp.newTrigger('onFormSubmit')
    .forSpreadsheet(ss)
    .onFormSubmit()
    .create();
  
  Logger.log("已重設所有觸發器");
}

/**
 * 按時間戳記排序資料
 * @param {Sheet} sheet - 要排序的工作表
 */
function sortDataByTimestamp(sheet) {
  try {
    // 獲取資料範圍
    const dataRange = sheet.getDataRange();
    const data = dataRange.getValues();
    
    // 如果只有標題行或沒有資料，則不需要排序
    if (data.length <= 1) return;
    
    // 分離標題行和資料
    const headerRow = data[0];
    const dataRows = data.slice(1);
    
    // 按時間戳記排序（第一列，索引0）
    dataRows.sort((a, b) => {
      const dateA = new Date(a[0]);
      const dateB = new Date(b[0]);
      return dateA - dateB; // 升序排序
    });
    
    // 重新組合資料
    const sortedData = [headerRow].concat(dataRows);
    
    // 將排序後的資料寫回工作表
    dataRange.setValues(sortedData);
    
    Logger.log("資料已按時間戳記排序");
  } catch (error) {
    Logger.log(`排序資料時出錯: ${error.toString()}`);
  }
}

/**
 * 顯示第一次預約對話框
 */
function showFirstAppointmentDialog() {
  // 確保系統設定表格已更新
  updateSystemSettingsForDeposit();
  
  // 獲取各項下拉選單的選項
  const counselors = getCounselorList();
  const serviceTypes = getServiceTypeList();
  const rooms = getRoomList();
  
  const counselorOptions = counselors.map(counselor => 
    '<option value="' + counselor + '">' + counselor + '</option>').join('');
  const serviceTypeOptions = serviceTypes.map(type => 
    '<option value="' + type + '">' + type + '</option>').join('');
  const roomOptions = rooms.map(room => 
    '<option value="' + room + '">' + room + '</option>').join('');
  
  // 獲取保證金條件
  const depositConditions = getDepositConditions();
  const depositConditionsJson = JSON.stringify(depositConditions);
  
  var html = '<div id="form-container" style="padding: 20px; font-family: Arial, sans-serif;">' +
    '<h2 style="color: #4285f4;">第一次預約</h2>' +
    '<div style="margin: 10px 0;">' +
      '<label style="font-weight: bold;">個案姓名：</label><br>' +
      '<input type="text" id="clientName" style="width: 100%; padding: 8px; margin-top: 5px; border: 1px solid #ddd; border-radius: 4px;" placeholder="請輸入個案姓名">' +
    '</div>' +
    '<div style="margin: 10px 0;">' +
      '<label style="font-weight: bold;">預約日期：</label><br>' +
      '<input type="date" id="appointmentDate" style="width: 100%; padding: 8px; margin-top: 5px; border: 1px solid #ddd; border-radius: 4px;">' +
    '</div>' +
    '<div style="margin: 10px 0;">' +
      '<label style="font-weight: bold;">預約時間：</label><br>' +
      '<select id="appointmentHour" style="width: 45%; padding: 8px; margin-top: 5px; border: 1px solid #ddd; border-radius: 4px;">' +
        generateHourOptions() +
      '</select>' +
      '<select id="appointmentMinute" style="width: 45%; padding: 8px; margin-top: 5px; border: 1px solid #ddd; border-radius: 4px;">' +
        '<option value="00">00</option>' +
        '<option value="30">30</option>' +
      '</select>' +
    '</div>' +
    '<div style="margin: 10px 0;">' +
      '<label style="font-weight: bold;">服務心理師：</label><br>' +
      '<select id="counselor" style="width: 100%; padding: 8px; margin-top: 5px; border: 1px solid #ddd; border-radius: 4px;">' +
        '<option value="">請選擇心理師</option>' +
        counselorOptions +
      '</select>' +
    '</div>' +
    '<div style="margin: 10px 0;">' +
      '<label style="font-weight: bold;">服務方案：</label><br>' +
      '<select id="serviceType" onchange="updateDepositStatus()" style="width: 100%; padding: 8px; margin-top: 5px; border: 1px solid #ddd; border-radius: 4px;">' +
        '<option value="">請選擇服務方案</option>' +
        serviceTypeOptions +
      '</select>' +
    '</div>' +
    '<div style="margin: 10px 0;">' +
      '<label style="font-weight: bold;">諮商室：</label><br>' +
      '<select id="room" style="width: 100%; padding: 8px; margin-top: 5px; border: 1px solid #ddd; border-radius: 4px;">' +
        '<option value="">請選擇諮商室</option>' +
        roomOptions +
      '</select>' +
    '</div>' +
    '<div style="margin: 10px 0;">' +
      '<label style="font-weight: bold;">保證金：</label><br>' +
      '<select id="deposit" style="width: 100%; padding: 8px; margin-top: 5px; border: 1px solid #ddd; border-radius: 4px;">' +
        '<option value="未繳納">未繳納</option>' +
        '<option value="已繳納">已繳納</option>' +
        '<option value="免收">免收</option>' +
      '</select>' +
      '<div id="depositNote" style="margin-top: 5px; font-size: 13px; color: #666;"></div>' +
    '</div>' +
    '<div style="margin: 20px 0; text-align: center;">' +
      '<button onclick="submitFirstAppointment()" style="background-color: #4285f4; color: white; border: none; padding: 10px 20px; border-radius: 4px; cursor: pointer; margin-right: 10px;">確認預約</button>' +
      '<button onclick="google.script.host.close()" style="background-color: #f1f1f1; border: none; padding: 10px 20px; border-radius: 4px; cursor: pointer;">取消</button>' +
    '</div>' +
    '<div id="message" style="margin-top: 15px; padding: 10px; display: none; border-radius: 4px;"></div>' +
  '</div>' +
    
  generateLoadingIndicatorHTML() +
  '<script>' +
    '// 保證金條件設定\n' +
    'const depositConditions = ' + depositConditionsJson + ';\n' +
    
    '// 頁面載入後自動設定今天日期\n' +
    'document.addEventListener("DOMContentLoaded", function() {\n' +
    '  const today = new Date();\n' +
    '  const year = today.getFullYear();\n' +
    '  const month = String(today.getMonth() + 1).padStart(2, "0");\n' +
    '  const day = String(today.getDate()).padStart(2, "0");\n' +
    '  document.getElementById("appointmentDate").value = year + "-" + month + "-" + day;\n' +
    '});\n' +
    
    '// 根據服務方案更新保證金狀態\n' +
    'function updateDepositStatus() {\n' +
    '  const serviceType = document.getElementById("serviceType").value;\n' +
    '  const depositSelect = document.getElementById("deposit");\n' +
    '  const depositNote = document.getElementById("depositNote");\n' +
    '  \n' +
    '  if (serviceType && depositConditions[serviceType]) {\n' +
    '    const condition = depositConditions[serviceType];\n' +
    '    \n' +
    '    // 設定保證金狀態\n' +
    '    depositSelect.value = condition.status;\n' +
    '    \n' +
    '    // 如果是免收，顯示備註\n' +
    '    if (condition.status === "免收" && condition.note) {\n' +
    '      depositNote.textContent = "備註: " + condition.note;\n' +
    '      depositNote.style.display = "block";\n' +
    '    } else {\n' +
    '      depositNote.style.display = "none";\n' +
    '    }\n' +
    '    \n' +
    '    // 如果是免收，禁用選擇\n' +
    '    depositSelect.disabled = (condition.status === "免收");\n' +
    '  } else {\n' +
    '    // 預設為未繳納，且可選擇\n' +
    '    depositSelect.value = "未繳納";\n' +
    '    depositSelect.disabled = false;\n' +
    '    depositNote.style.display = "none";\n' +
    '  }\n' +
    '}\n' +
    
    'function submitFirstAppointment() {\n' +
    '  var clientName = document.getElementById("clientName").value;\n' +
    '  var appointmentDate = document.getElementById("appointmentDate").value;\n' +
    '  var appointmentHour = document.getElementById("appointmentHour").value;\n' +
    '  var appointmentMinute = document.getElementById("appointmentMinute").value;\n' +
    '  var counselor = document.getElementById("counselor").value;\n' +
    '  var serviceType = document.getElementById("serviceType").value;\n' +
    '  var room = document.getElementById("room").value;\n' +
    '  var deposit = document.getElementById("deposit").value;\n' +
    '  \n' +
    '  // 組合時間字串\n' +
    '  var appointmentTime = appointmentHour + ":" + appointmentMinute;\n' +
    '  \n' +
    '  if (!clientName || !appointmentDate || !counselor || !serviceType || !room) {\n' +
    '    showMessage("請填寫所有必要欄位", "error");\n' +
    '    return;\n' +
    '  }\n' +
    '  \n' +
    '  // 檢查保證金狀態\n' +
    '  if (serviceType && depositConditions[serviceType] && \n' +
    '      depositConditions[serviceType].status === "需收" && \n' +
    '      deposit === "未繳納") {\n' +
    '    if (!confirm("此服務方案需要收取保證金，確定要在未繳納保證金的情況下預約嗎？")) {\n' +
    '      return;\n' +
    '    }\n' +
    '  }\n' +
    '  \n' +
    '  document.getElementById("message").style.display = "none";\n' +
    '  \n' +
    '  // 顯示加載指示器\n' +
    '  showLoading();\n' +
    '  \n' +
    '  google.script.run\n' +
    '    .withSuccessHandler(function(result) {\n' +
    '      // 隱藏加載指示器\n' +
    '      hideLoading();\n' +
    '      \n' +
    '      if (result.success) {\n' +
    '        if (result.notificationMessage) {\n' +
    '          // 顯示初次預約訊息框\n' +
    '          document.getElementById("message").style.display = "none";\n' +
    '          document.getElementById("form-container").innerHTML = result.notificationMessage;\n' +
    '        } else {\n' +
    '          showMessage("預約已成功建立！", "success");\n' +
    '          setTimeout(function() {\n' +
    '            google.script.host.close();\n' +
    '          }, 2000);\n' +
    '        }\n' +
    '      } else {\n' +
    '        showMessage(result.message || "預約建立失敗，請稍後再試", "error");\n' +
    '      }\n' +
    '    })\n' +
    '    .withFailureHandler(function(error) {\n' +
    '      // 隱藏加載指示器\n' +
    '      hideLoading();\n' +
    '      \n' +
    '      showMessage("發生錯誤：" + error, "error");\n' +
    '    })\n' +
    '    .processFirstAppointment(clientName, appointmentDate, appointmentTime, counselor, serviceType, room, deposit);\n' +
    '}\n' +
    
    'function showMessage(message, type) {\n' +
    '  var messageDiv = document.getElementById("message");\n' +
    '  messageDiv.innerHTML = message;\n' +
    '  messageDiv.style.display = "block";\n' +
    '  \n' +
    '  if (type === "error") {\n' +
    '    messageDiv.style.backgroundColor = "#ffebee";\n' +
    '    messageDiv.style.color = "#c62828";\n' +
    '  } else {\n' +
    '    messageDiv.style.backgroundColor = "#e8f5e9";\n' +
    '    messageDiv.style.color = "#2e7d32";\n' +
    '  }\n' +
    '}\n' +
  '</script>';

  var ui = HtmlService.createHtmlOutput(html)
    .setWidth(400)
    .setHeight(650);
    
  SpreadsheetApp.getUi().showModalDialog(ui, '第一次預約');
}


/**
 * 處理第一次預約請求
 * @param {string} clientName - 個案姓名
 * @param {string} appointmentDate - 預約日期字串
 * @param {string} appointmentTime - 預約時間字串
 * @param {string} counselor - 心理師姓名
 * @param {string} serviceType - 服務方案
 * @param {string} room - 諮商室
 * @param {string} deposit - 保證金狀態
 * @return {Object} 處理結果
 */
function processFirstAppointment(clientName, appointmentDate, appointmentTime, counselor, serviceType, room, deposit) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName("登錄資料");
    const now = new Date();
    const appointmentDateObj = new Date(appointmentDate);
    
    // 檢查諮商室在該時段是否可用
    const roomAvailable = checkRoomAvailability(appointmentDateObj, appointmentTime, room);
    if (!roomAvailable) {
      // 記錄失敗日誌
      logSystemActivity(
        "第一次預約",
        clientName,
        `預約失敗: 該時段諮商室已被預約`,
        "失敗",
        counselor,
        `嘗試預約時間: ${appointmentDate} ${appointmentTime}, 諮商室: ${room}`
      );
      return { success: false, message: '該時段諮商室已被預約，請選擇其他時間或諮商室' };
    }
    
    // 使用 appendRow 添加資料
    sheet.appendRow([
      now,                // 時間戳記
      clientName,         // 個案姓名
      appointmentDateObj, // 諮商日期
      counselor,          // 諮商師
      serviceType,        // 服務方案
      appointmentTime,    // 時間
      room,               // 諮商室
      deposit             // 保證金狀態
    ]);
    
    // 根據時間戳記對資料進行排序
    sortDataByTimestamp(sheet);
    
    // 創建日曆事件
    createCalendarEvent(clientName, serviceType, appointmentDateObj, appointmentTime, counselor, room);
    
    // 更新統計報表
    updateStatistics();
    
    // 通知心理師
    notifyCounselor(clientName, serviceType, appointmentDateObj, appointmentTime, counselor, room);
    
    // 生成初次預約訊息
    const notificationMessage = generateNotificationMessage('firstAppointment', {
      clientName: clientName,
      appointmentDate: appointmentDateObj,
      appointmentTime: appointmentTime,
      counselor: counselor,
      serviceType: serviceType,
      room: room
    });
    
    // 添加成功日誌記錄
    logSystemActivity(
      "第一次預約",
      clientName,
      `預約日期: ${appointmentDate}, 時間: ${appointmentTime}, 心理師: ${counselor}, 服務: ${serviceType}, 諮商室: ${room}`,
      "成功",
      counselor,
      `保證金狀態: ${deposit}`
    );

    // 【新增】預約成功後，新增小幫手待辦
    createHelperTodoItem(
      OPERATION_TYPES.FIRST_APPOINTMENT,
      clientName,
      {
        date: appointmentDate,
        time: appointmentTime,
        therapist: counselor,
        room: room,
        serviceType: "個別諮商",
        additionalInfo: "首次預約"
      }
    );

    return { 
      success: true,
      notificationMessage: notificationMessage
    };
  } catch (error) {
    // 記錄失敗日誌
    logSystemActivity(
      "第一次預約",
      clientName,
      `預約失敗: ${error.toString()}`,
      "失敗",
      counselor
    );
    
    Logger.log("處理第一次預約時出現錯誤：" + error.toString());
    return { success: false, message: '處理預約時出現錯誤' };
  }
}

/**
 * 處理個案續約請求 (已新增更換方案功能)
 * @param {string} clientName - 個案姓名
 * @param {string} renewalDate - 續約日期 (YYYY-MM-DD格式)
 * @param {string} renewalTime - 續約時間 (HH:MM格式)
 * @param {boolean} changeRoom - 是否更換諮商空間
 * @param {string} newRoom - 新的諮商空間
 * @param {boolean} changeService - 是否更換服務方案
 * @param {string} newServiceType - 新的服務方案
 * @return {Object} 處理結果
 */
function processClientRenewal(clientName, renewalDate, renewalTime, changeRoom, newRoom, changeService, newServiceType) {
  try {
    const latestInfo = getLatestClientInfo(clientName);
    if (!latestInfo) {
      logSystemActivity("個案續約", clientName, `續約失敗: 找不到該個案的記錄`, "失敗");
      return { success: false, message: '找不到該個案的記錄，請先新增個案資料' };
    }
    
    const newDate = new Date(renewalDate);
    
    // 【修改處】決定最終要使用的諮商室和服務方案
    const roomToUse = changeRoom && newRoom ? newRoom : latestInfo.room;
    const serviceTypeToUse = changeService && newServiceType ? newServiceType : latestInfo.serviceType;
    
    const roomAvailable = checkRoomAvailability(newDate, renewalTime, roomToUse);
    if (!roomAvailable) {
      // (此處的房間衝突邏輯不變)
      const allRooms = getRoomList();
      const availableRooms = [];
      for (let i = 0; i < Math.min(allRooms.length, 5); i++) {
        if (checkRoomAvailability(newDate, renewalTime, allRooms[i])) {
          availableRooms.push(allRooms[i]);
        }
      }
      if (availableRooms.length === 0) {
        logSystemActivity("個案續約", clientName, `續約失敗: 該時段所有諮商室都已被預約`, "失敗", latestInfo.counselor);
        return { success: false, message: '該時段所有諮商室都已被預約，請選擇其他時間', noRoomsAvailable: true };
      }
      return {
        success: false,
        message: '選擇的諮商室已被預約，請選擇其他諮商室',
        needRoomChange: true,
        availableRooms: availableRooms,
        originalInfo: { clientName: clientName, date: renewalDate, time: renewalTime, counselor: latestInfo.counselor, serviceType: serviceTypeToUse }
      };
    }
    
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName("登錄資料");
    const now = new Date();
    
    sheet.appendRow([
      now,
      clientName,
      newDate,
      latestInfo.counselor,
      serviceTypeToUse, // 【修改處】使用最終決定的服務方案
      renewalTime,
      roomToUse,
      latestInfo.deposit
    ]);
    
    sortDataByTimestamp(sheet);
    
    // 【修改處】使用最終決定的服務方案來建立事件和發送通知
    createCalendarEvent(clientName, serviceTypeToUse, newDate, renewalTime, latestInfo.counselor, roomToUse);
    updateStatistics();
    notifyCounselor(clientName, serviceTypeToUse, newDate, renewalTime, latestInfo.counselor, roomToUse);

    const notificationMessage = generateNotificationMessage('renewal', {
      clientName: clientName,
      renewalDate: newDate,
      renewalTime: renewalTime,
      counselor: latestInfo.counselor,
      serviceType: serviceTypeToUse, // 【修改處】
      room: roomToUse
    });
    
    createHelperTodoItem(
      OPERATION_TYPES.RENEWAL,
      clientName,
      {
        clientName: clientName,
        date: renewalDate,
        time: renewalTime,
        therapist: latestInfo.counselor,
        room: roomToUse,
        serviceType: serviceTypeToUse, // 【修改處】
        additionalInfo: `續約` + (changeService ? ` (更換方案至: ${newServiceType})` : '')
      }
    );
    
    let logNotes = changeRoom ? `更換諮商室至: ${newRoom}` : "";
    if (changeService) {
        logNotes += (logNotes ? ", " : "") + `更換方案至: ${newServiceType}`;
    }

    logSystemActivity("個案續約", clientName, `續約日期: ${renewalDate}, 時間: ${renewalTime}, 諮商室: ${roomToUse}`, "成功", latestInfo.counselor, logNotes);
    
    return { 
      success: true,
      notificationMessage: notificationMessage
    };
  } catch (error) {
    Logger.log("處理續約時出現錯誤：" + error.toString());
    return { success: false, message: '處理續約時出現錯誤: ' + error.toString() };
  }
}


/**
 * 創建或確保系統設定表格存在
 */
function ensureSystemSettingsSheet() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  let sheet = ss.getSheetByName("系統設定");
  
  if (!sheet) {
    sheet = ss.insertSheet("系統設定");
    
    // 設定標題
    sheet.appendRow(["設定類型", "選項"]);
    sheet.getRange("A1:B1").setFontWeight("bold");
    
    // 設定心理師區域
    sheet.appendRow(["心理師", ""]);
    sheet.getRange(2, 1).setFontWeight("bold");
    sheet.appendRow(["", "王醫師"]);
    sheet.appendRow(["", "李醫師"]);
    sheet.appendRow(["", "張醫師"]);
    
    // 設定服務方案區域
    sheet.appendRow(["服務方案", ""]);
    sheet.getRange(6, 1).setFontWeight("bold");
    sheet.appendRow(["", "個別諮商"]);
    sheet.appendRow(["", "伴侶諮商"]);
    sheet.appendRow(["", "家族諮商"]);
    
    // 設定諮商室區域
    sheet.appendRow(["諮商室", ""]);
    sheet.getRange(10, 1).setFontWeight("bold");
    sheet.appendRow(["", "諮商室A"]);
    sheet.appendRow(["", "諮商室B"]);
    sheet.appendRow(["", "諮商室C"]);
    
    // 美化表格
    sheet.setColumnWidth(1, 150);
    sheet.setColumnWidth(2, 200);
  }
  
  return sheet;
}

/**
 * 顯示個案續約對話框 (已新增更換方案功能)
 */
function showClientRenewalDialog() {
  // 【修改處】同時獲取諮商室和服務方案列表
  const rooms = getRoomList();
  const roomOptions = rooms.map(room => `<option value="${room}">${room}</option>`).join('');
  
  const serviceTypes = getServiceTypeList();
  const serviceTypeOptions = serviceTypes.map(type => `<option value="${type}">${type}</option>`).join('');
    
  const clients = getClientList();
  const clientOptions = clients.map(client => `<option value="${client}">${client}</option>`).join('');

  var html = `
    <!DOCTYPE html>
    <html>
    <head>
      <base target="_top">
      <meta charset="UTF-8">
    </head>
    <body>
    <div class="renewal-container" style="padding: 20px; font-family: Arial, sans-serif;">
      <h2 style="color: #4285f4;">個案續約</h2>
      <div style="margin: 15px 0;">
        <label style="font-weight: bold;">個案姓名：</label><br>
        <div style="position: relative; width: 100%;">
          <input type="text" id="clientName" list="clientList" style="width: 100%; padding: 8px; margin-top: 5px; border: 1px solid #ddd; border-radius: 4px;" placeholder="請輸入或選擇個案姓名" autocomplete="off">
          <datalist id="clientList">${clientOptions}</datalist>
          <div id="clientNameError" style="color: #c62828; font-size: 12px; margin-top: 3px; display: none;">查無此個案，請確認名稱是否正確</div>
        </div>
      </div>
      <div style="margin: 15px 0;">
        <label style="font-weight: bold;">續約諮商日期：</label><br>
        <input type="date" id="renewalDate" style="width: 100%; padding: 8px; margin-top: 5px; border: 1px solid #ddd; border-radius: 4px;">
      </div>
      <div style="margin: 15px 0;">
        <label style="font-weight: bold;">續約諮商時間：</label><br>
        <select id="renewalHour" style="width: 45%; padding: 8px; margin-top: 5px; border: 1px solid #ddd; border-radius: 4px;">
          ${generateHourOptions()}
        </select>
        <select id="renewalMinute" style="width: 45%; padding: 8px; margin-top: 5px; border: 1px solid #ddd; border-radius: 4px;">
          <option value="00">00</option>
          <option value="30">30</option>
        </select>
      </div>
      
      <div style="margin: 15px 0;">
        <div style="display: flex; align-items: center;">
          <input type="checkbox" id="changeRoom" style="margin-right: 8px;" onchange="toggleRoomSelection()">
          <label for="changeRoom" style="font-weight: bold;">調整諮商空間</label>
        </div>
      </div>
      
      <div id="roomSelectionDiv" style="margin: 15px 0; display: none;">
        <label style="font-weight: bold;">選擇諮商空間：</label><br>
        <select id="newRoom" style="width: 100%; padding: 8px; margin-top: 5px; border: 1px solid #ddd; border-radius: 4px;">
          <option value="">請選擇諮商空間</option>
          ${roomOptions}
        </select>
      </div>

      <div style="margin: 15px 0;">
        <div style="display: flex; align-items: center;">
          <input type="checkbox" id="changeService" style="margin-right: 8px;" onchange="toggleServiceSelection()">
          <label for="changeService" style="font-weight: bold;">更換服務方案</label>
        </div>
      </div>
      
      <div id="serviceSelectionDiv" style="margin: 15px 0; display: none;">
        <label style="font-weight: bold;">選擇新服務方案：</label><br>
        <select id="newServiceType" style="width: 100%; padding: 8px; margin-top: 5px; border: 1px solid #ddd; border-radius: 4px;">
          <option value="">請選擇服務方案</option>
          ${serviceTypeOptions}
        </select>
      </div>
      
      <div style="margin: 20px 0; text-align: center;">
        <button onclick="processRenewal()" style="background-color: #4285f4; color: white; border: none; padding: 10px 20px; border-radius: 4px; cursor: pointer; margin-right: 10px;">確認續約</button>
        <button onclick="google.script.host.close()" style="background-color: #f1f1f1; border: none; padding: 10px 20px; border-radius: 4px; cursor: pointer;">取消</button>
      </div>
      <div id="message" style="margin-top: 15px; padding: 10px; display: none; border-radius: 4px;"></div>

      ${generateLoadingIndicatorHTML()}
    </div>
    <script>
      let originalInfo = null;
      
      document.addEventListener("DOMContentLoaded", function() {
        const today = new Date();
        const year = today.getFullYear();
        const month = String(today.getMonth() + 1).padStart(2, "0");
        const day = String(today.getDate()).padStart(2, "0");
        document.getElementById("renewalDate").value = year + "-" + month + "-" + day;
        setupClientNameInputFilter();
      });
      
      function setupClientNameInputFilter() { /* ... 此函式內容不變 ... */ }
      
      function toggleRoomSelection() {
        document.getElementById('roomSelectionDiv').style.display = document.getElementById('changeRoom').checked ? 'block' : 'none';
      }
      
      // 【新增】控制服務方案選單顯示/隱藏的函式
      function toggleServiceSelection() {
        document.getElementById('serviceSelectionDiv').style.display = document.getElementById('changeService').checked ? 'block' : 'none';
      }
      
      function processRenewal() {
        const clientName = document.getElementById('clientName').value;
        const renewalDate = document.getElementById('renewalDate').value;
        const renewalTime = document.getElementById('renewalHour').value + ':' + document.getElementById('renewalMinute').value;
        
        // 【修改處】獲取所有新選項的值
        const changeRoom = document.getElementById('changeRoom').checked;
        const newRoom = changeRoom ? document.getElementById('newRoom').value : '';
        
        const changeService = document.getElementById('changeService').checked;
        const newServiceType = changeService ? document.getElementById('newServiceType').value : '';
        
        if (!clientName || !renewalDate) { /* ... 驗證邏輯不變 ... */ }
        if (changeRoom && !newRoom) { showMessage('請選擇新的諮商空間', 'error'); return; }
        if (changeService && !newServiceType) { showMessage('請選擇新的服務方案', 'error'); return; }

        const clientList = document.getElementById('clientList');
        const clients = Array.from(clientList.options).map(opt => opt.value);
        if (!clients.includes(clientName)) { showMessage('查無此個案，請確認名稱是否正確', 'error'); return; }
        
        document.getElementById('message').style.display = 'none';
        showLoading();
        
        // 【修改處】將新參數傳遞給後端
        google.script.run
          .withSuccessHandler(function(result) {
              hideLoading();
              if (result.success) {
                  document.querySelector('.renewal-container').innerHTML = result.notificationMessage;
              } else if (result.needRoomChange) {
                  originalInfo = result.originalInfo;
                  showRoomSelection(result.availableRooms);
                  showMessage(result.message, 'warning');
              } else {
                  showMessage(result.message || '續約失敗，請稍後再試', 'error');
              }
          })
          .withFailureHandler(function(error) {
              hideLoading();
              showMessage('發生錯誤：' + error, 'error');
          })
          .processClientRenewal(clientName, renewalDate, renewalTime, changeRoom, newRoom, changeService, newServiceType);
      }
      
      function showRoomSelection(availableRooms) { /* ... 此函式內容不變 ... */ }
      function showMessage(message, type) { /* ... 此函式內容不變 ... */ }
      function showLoading() { /* ... 此函式內容不變 ... */ }
      function hideLoading() { /* ... 此函式內容不變 ... */ }
    </script>
    </body>
    </html>`;

  var userInterface = HtmlService.createHtmlOutput(html)
    .setWidth(400)
    .setHeight(650) // 稍微增加高度以適應新選項
    .setTitle('個案續約');

  SpreadsheetApp.getUi().showModelessDialog(userInterface, '個案續約');
}

/**
 * 使用新諮商室處理續約
 * @param {Object} originalInfo - 原預約資訊
 * @param {string} newRoom - 新諮商室
 * @return {Object} 處理結果
 */
function processRenewalWithNewRoom(originalInfo, newRoom) {
  try {
    const newDateObj = new Date(originalInfo.date);
    
    // 【修正】使用正確的房間可用性檢查函數（續約是新預約，不需要排除現有預約）
    if (!checkRoomAvailability(newDateObj, originalInfo.time, newRoom)) {
      return { success: false, message: '選擇的諮商室已被預約，請重新選擇' };
    }
    
    // 添加新預約記錄
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName("登錄資料");
    const now = new Date();
    
    sheet.appendRow([
      now,                    // 時間戳記
      originalInfo.clientName, // 個案姓名
      newDateObj,             // 諮商日期
      originalInfo.counselor, // 諮商師
      originalInfo.serviceType, // 服務方案
      originalInfo.time,      // 時間
      newRoom,                // 諮商室
      "已繳納"                // 保證金狀態（續約通常已繳納）
    ]);
    
    // 排序資料
    sortDataByTimestamp(sheet);
    
    // 創建日曆事件
    createCalendarEvent(originalInfo.clientName, originalInfo.serviceType, newDateObj, originalInfo.time, originalInfo.counselor, newRoom);
    
    // 更新統計報表
    updateStatistics();
    
    // 通知心理師
    notifyCounselor(originalInfo.clientName, originalInfo.serviceType, newDateObj, originalInfo.time, originalInfo.counselor, newRoom);
    
    // 生成續約訊息
    const notificationMessage = generateNotificationMessage('renewal', {
      clientName: originalInfo.clientName,
      renewalDate: newDateObj,
      renewalTime: originalInfo.time,
      counselor: originalInfo.counselor,
      serviceType: originalInfo.serviceType,
      room: newRoom
    });
    
    // 【新增】續約成功後，新增小幫手待辦
    createHelperTodoItem(
      OPERATION_TYPES.RENEWAL,
      originalInfo.clientName,
      {
        clientName: originalInfo.clientName,
        date: originalInfo.date,
        time: originalInfo.time,
        therapist: originalInfo.counselor,
        room: newRoom,
        serviceType: originalInfo.serviceType,
        additionalInfo: "續約（更換諮商室）"
      }
    );
    
    // 添加成功日誌
    logSystemActivity(
      "個案續約",
      originalInfo.clientName,
      `續約日期: ${originalInfo.date}, 時間: ${originalInfo.time}, 諮商室: ${newRoom}`,
      "成功",
      originalInfo.counselor,
      "續約完成（更換諮商室）"
    );
    
    return { 
      success: true,
      notificationMessage: notificationMessage 
    };
  } catch (error) {
    Logger.log("使用新諮商室處理續約時出現錯誤：" + error.toString());
    return { success: false, message: '處理續約時出現錯誤' };
  }
}


/**
 * 生成小時選項的HTML
 */
function generateHourOptions() {
  var options = '';
  for (var i = 8; i <= 21; i++) {
    var hour = i < 10 ? '0' + i : '' + i;
    options += `<option value="${hour}">${hour}</option>`;
  }
  return options;
}

/**
 * 獲取個案的最新服務記錄
 * @param {string} clientName - 個案姓名
 * @return {Object|null} 個案最新服務記錄
 */
function getLatestClientInfo(clientName) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName("登錄資料");
    const data = sheet.getDataRange().getValues();
    
    // 過濾出符合客戶名稱的所有記錄
    const clientRecords = data.filter((row, index) => {
      // 跳過標題行
      if (index === 0) return false;
      // 檢查名字是否相符（模糊匹配）
      return row[1] && (row[1].includes(clientName) || clientName.includes(row[1]));
    });
    
    if (clientRecords.length === 0) {
      return null;
    }
    
    // 依時間戳記排序，取得最新的一筆記錄
    clientRecords.sort((a, b) => new Date(b[0]) - new Date(a[0]));
    const latest = clientRecords[0];
    
    return {
      timestamp: latest[0],
      clientName: latest[1],
      date: latest[2],
      counselor: latest[3],
      serviceType: latest[4],
      time: latest[5],
      room: latest[6],
      deposit: latest[7] || '否' // 保證金狀態，如果不存在則預設為'否'
    };
  } catch (error) {
    Logger.log("獲取個案資訊時出現錯誤：" + error.toString());
    return null;
  }
}

/**
 * 檢查諮商室在指定時段是否可用
 * @param {Date} date - 預約日期
 * @param {string} timeString - 預約時間 (HH:MM格式)
 * @param {string} room - 諮商室名稱
 * @return {boolean} 諮商室是否可用
 */
function checkRoomAvailability(date, timeString, room) {
  try {
    // 從系統設定獲取日曆ID
    const config = getSystemConfig();
    const calendar = CalendarApp.getCalendarById(config.calendarId);
    
    // 分割時間字串取得小時和分鐘
    const [hours, minutes] = timeString.split(':').map(Number);
    
    // 設定諮商的開始和結束時間
    const startTime = new Date(date);
    startTime.setHours(hours);
    startTime.setMinutes(minutes);
    startTime.setSeconds(0);
    
    const endTime = new Date(startTime);
    endTime.setMinutes(startTime.getMinutes() + config.counselingDuration); // 諮商時長
    
    // 定義檢查範圍：包括前後可能重疊的時間
    // 開始檢查範圍：當天0點
    const dayStart = new Date(date);
    dayStart.setHours(0, 0, 0, 0);
    
    // 結束檢查範圍：當天23:59
    const dayEnd = new Date(date);
    dayEnd.setHours(23, 59, 59, 999);
    
    // 獲取當天所有事件
    const events = calendar.getEvents(dayStart, dayEnd);
    
    // 檢查是否有與當前時段重疊的同一諮商室的預約
    for (let event of events) {
      const title = event.getTitle();
      const desc = event.getDescription();
      
      // 只檢查未取消和未改期的事件
      if (!title.includes("【取消】") && !title.includes("【改期】")) {
        // 檢查諮商室是否相同
        if (title.includes(`- ${room}`) || desc.includes(`諮商室: ${room}`)) {
          // 檢查時間是否重疊
          const eventStart = event.getStartTime();
          const eventEnd = event.getEndTime();
          
          // 檢查重疊的情況：
          // 1. 新預約的開始時間在現有預約的時段內
          // 2. 新預約的結束時間在現有預約的時段內
          // 3. 新預約橫跨現有預約（新預約開始時間早於現有預約，結束時間晚於現有預約）
          if ((startTime >= eventStart && startTime < eventEnd) || 
              (endTime > eventStart && endTime <= eventEnd) ||
              (startTime <= eventStart && endTime >= eventEnd)) {
            return false; // 時段重疊，諮商室不可用
          }
        }
      }
    }
    
    return true; // 諮商室可用
  } catch (error) {
    Logger.log("檢查諮商室可用性時出現錯誤：" + error.toString());
    // 出錯時返回false保守處理
    return false;
  }
}

/**
 * 顯示繳交保證金對話框
 */
function showDepositPaymentDialog() {
  // 獲取客戶名單供下拉選擇
  const clients = getClientList();
  const clientOptions = clients.map(client => 
    `<option value="${client}">${client}</option>`).join('');
    
  var html = `
    <div id="deposit-container" style="padding: 20px; font-family: Arial, sans-serif;">
      <h2 style="color: #4285f4;">繳交保證金</h2>
      <div style="margin: 15px 0;">
        <label style="font-weight: bold;">個案姓名：</label><br>
        <div style="position: relative; width: 100%;">
          <input type="text" id="clientName" list="clientList" style="width: 100%; padding: 8px; margin-top: 5px; border: 1px solid #ddd; border-radius: 4px;" placeholder="請輸入或選擇個案姓名" autocomplete="off">
          <datalist id="clientList">
            ${clientOptions}
          </datalist>
          <div id="clientNameError" style="color: #c62828; font-size: 12px; margin-top: 3px; display: none;">查無此個案，請確認名稱是否正確</div>
        </div>
      </div>
      
      <div style="margin: 15px 0;">
        <label style="font-weight: bold;">繳費方式：</label><br>
        <div style="margin-top: 8px;">
          <input type="radio" id="paymentTransfer" name="paymentMethod" value="transfer" checked onchange="togglePaymentFields()">
          <label for="paymentTransfer" style="margin-left: 5px; margin-right: 20px;">轉帳</label>
          
          <input type="radio" id="paymentCash" name="paymentMethod" value="cash" onchange="togglePaymentFields()">
          <label for="paymentCash" style="margin-left: 5px;">現場繳納</label>
        </div>
      </div>
      
      <div id="transferFields" style="margin: 15px 0;">
        <label style="font-weight: bold;">轉帳末五碼：</label><br>
        <input type="text" id="transferLastDigits" style="width: 100%; padding: 8px; margin-top: 5px; border: 1px solid #ddd; border-radius: 4px;" maxlength="5" placeholder="請輸入轉帳末五碼">
      </div>
      
      <div id="cashFields" style="margin: 15px 0; display: none;">
        <label style="font-weight: bold;">現場繳納日期：</label><br>
        <input type="date" id="cashPaymentDate" style="width: 100%; padding: 8px; margin-top: 5px; border: 1px solid #ddd; border-radius: 4px;">
      </div>
      
      <div style="margin: 15px 0;">
        <label style="font-weight: bold;">第一次諮商日期：</label><br>
        <input type="date" id="firstCounselingDate" style="width: 100%; padding: 8px; margin-top: 5px; border: 1px solid #ddd; border-radius: 4px;">
      </div>
      
      <div style="margin: 20px 0; text-align: center;">
        <button onclick="processDeposit()" style="background-color: #4285f4; color: white; border: none; padding: 10px 20px; border-radius: 4px; cursor: pointer; margin-right: 10px;">確認繳納</button>
        <button onclick="google.script.host.close()" style="background-color: #f1f1f1; border: none; padding: 10px 20px; border-radius: 4px; cursor: pointer;">取消</button>
      </div>
      <div id="message" style="margin-top: 15px; padding: 10px; display: none; border-radius: 4px;"></div>
      
      ${generateLoadingIndicatorHTML()}
    </div>
    <script>
      // 初始化頁面時設定今天日期
      document.addEventListener("DOMContentLoaded", function() {
        const today = new Date();
        const year = today.getFullYear();
        const month = String(today.getMonth() + 1).padStart(2, "0");
        const day = String(today.getDate()).padStart(2, "0");
        const todayString = year + "-" + month + "-" + day;
        
        document.getElementById("firstCounselingDate").value = todayString;
        document.getElementById("cashPaymentDate").value = todayString;
        
        // 設置名字輸入框的事件監聽
        setupClientNameInputFilter();
      });
      
      // 切換繳費方式時顯示/隱藏對應欄位
      function togglePaymentFields() {
        const isTransfer = document.getElementById('paymentTransfer').checked;
        const transferFields = document.getElementById('transferFields');
        const cashFields = document.getElementById('cashFields');
        
        if (isTransfer) {
          transferFields.style.display = 'block';
          cashFields.style.display = 'none';
          // 清空現場繳納欄位
          document.getElementById('cashPaymentDate').value = '';
        } else {
          transferFields.style.display = 'none';
          cashFields.style.display = 'block';
          // 清空轉帳欄位
          document.getElementById('transferLastDigits').value = '';
          // 設定現場繳納日期為今天
          const today = new Date();
          const year = today.getFullYear();
          const month = String(today.getMonth() + 1).padStart(2, "0");
          const day = String(today.getDate()).padStart(2, "0");
          document.getElementById('cashPaymentDate').value = year + "-" + month + "-" + day;
        }
      }
      
      // 設置個案名稱的過濾功能
      function setupClientNameInputFilter() {
        const clientNameInput = document.getElementById('clientName');
        const clientList = document.getElementById('clientList');
        const originalOptions = Array.from(clientList.options).map(opt => opt.value);
        
        clientNameInput.addEventListener('input', function() {
          const searchValue = this.value.toLowerCase();
          const errorElement = document.getElementById('clientNameError');
          
          // 檢查是否有完全匹配的名字
          const exactMatch = originalOptions.some(option => option === this.value);
          if (this.value && !exactMatch) {
            errorElement.style.display = 'block';
          } else {
            errorElement.style.display = 'none';
          }
        });
      }
      
      function processDeposit() {
        var clientName = document.getElementById('clientName').value;
        var paymentMethod = document.querySelector('input[name="paymentMethod"]:checked').value;
        var transferLastDigits = document.getElementById('transferLastDigits').value;
        var cashPaymentDate = document.getElementById('cashPaymentDate').value;
        var firstCounselingDate = document.getElementById('firstCounselingDate').value;
        
        if (!clientName || !firstCounselingDate) {
          showMessage('請填寫個案姓名和第一次諮商日期', 'error');
          return;
        }
        
        // 根據繳費方式驗證必要欄位
        if (paymentMethod === 'transfer') {
          if (!transferLastDigits) {
            showMessage('請輸入轉帳末五碼', 'error');
            return;
          }
          if (transferLastDigits.length !== 5 || !/^\\d+$/.test(transferLastDigits)) {
            showMessage('請輸入正確的轉帳末五碼（5位數字）', 'error');
            return;
          }
        } else if (paymentMethod === 'cash') {
          if (!cashPaymentDate) {
            showMessage('請選擇現場繳納日期', 'error');
            return;
          }
        }
        
        // 嚴格驗證客戶名稱是否在列表中
        const clientList = document.getElementById('clientList');
        const clients = Array.from(clientList.options).map(opt => opt.value);
        if (!clients.includes(clientName)) {
          showMessage('查無此個案，請確認名稱是否正確', 'error');
          return;
        }
        
        document.getElementById('message').style.display = 'none';
        
        // 顯示加載指示器
        showLoading();
        
        google.script.run
          .withSuccessHandler(function(result) {
            // 隱藏加載指示器
            hideLoading();
            
            if (result.success) {
              if (result.notificationMessage) {
                // 顯示保證金已繳納訊息框
                document.getElementById('message').style.display = "none";
                document.getElementById('deposit-container').innerHTML = result.notificationMessage;
              } else {
                showMessage('保證金已成功繳納！', 'success');
                setTimeout(function() {
                  google.script.host.close();
                }, 2000);
              }
            } else {
              showMessage(result.message || '繳納失敗，請稍後再試', 'error');
            }
          })
          .withFailureHandler(function(error) {
            // 隱藏加載指示器
            hideLoading();
            
            showMessage('發生錯誤：' + error, 'error');
          })
          .processDepositPayment(clientName, paymentMethod, transferLastDigits, cashPaymentDate, firstCounselingDate);
      }
      
      function showMessage(message, type) {
        var messageDiv = document.getElementById('message');
        messageDiv.innerHTML = message;
        messageDiv.style.display = 'block';
        
        if (type === 'error') {
          messageDiv.style.backgroundColor = '#ffebee';
          messageDiv.style.color = '#c62828';
        } else {
          messageDiv.style.backgroundColor = '#e8f5e9';
          messageDiv.style.color = '#2e7d32';
        }
      }
    </script>
  `;

  var ui = HtmlService.createHtmlOutput(html)
    .setWidth(400)
    .setHeight(550);
    
  SpreadsheetApp.getUi().showModalDialog(ui, '繳交保證金');
}

/**
 * 處理保證金繳納請求（支援轉帳和現場繳納）
 * @param {string} clientName - 個案姓名
 * @param {string} paymentMethod - 繳費方式 ('transfer' 或 'cash')
 * @param {string} transferLastDigits - 轉帳末五碼（轉帳時使用）
 * @param {string} cashPaymentDate - 現場繳納日期（現場繳納時使用）
 * @param {string} firstCounselingDate - 第一次諮商日期
 * @return {Object} 處理結果
 */
function processDepositPayment(clientName, paymentMethod, transferLastDigits, cashPaymentDate, firstCounselingDate) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName("登錄資料");
    const data = sheet.getDataRange().getValues();
    
    const firstCounselingDateObj = new Date(firstCounselingDate);
    let recordFound = false;
    let counselor = "";
    let serviceType = "";
    
    // 搜尋符合條件的記錄並更新保證金狀態
    for (let i = 1; i < data.length; i++) {
      const name = data[i][1];
      const date = new Date(data[i][2]);
      
      if (name && name === clientName && 
          date.getFullYear() === firstCounselingDateObj.getFullYear() && 
          date.getMonth() === firstCounselingDateObj.getMonth() && 
          date.getDate() === firstCounselingDateObj.getDate()) {
        
        // 收集更多信息用於通知
        counselor = data[i][3];
        serviceType = data[i][4];
        
        // 檢查是否已有H列（保證金欄位）
        let depositCol = 8; // H列的索引為7，但Google Sheets索引從1開始
        
        // 根據繳費方式設定不同的保證金狀態
        let depositStatus = '';
        if (paymentMethod === 'transfer') {
          depositStatus = `已繳納 (${transferLastDigits})`;
        } else if (paymentMethod === 'cash') {
          const cashDate = Utilities.formatDate(new Date(cashPaymentDate), "Asia/Taipei", "MM/dd");
          depositStatus = `已繳納 (現場 ${cashDate})`;
        }
        
        // 更新保證金狀態
        sheet.getRange(i + 1, depositCol).setValue(depositStatus);
        recordFound = true;
        
        break;
      }
    }
    
    if (!recordFound) {
      // 記錄失敗日誌
      const paymentInfo = paymentMethod === 'transfer' ? 
        `轉帳末五碼: ${transferLastDigits}` : 
        `現場繳納日期: ${cashPaymentDate}`;
      
      logSystemActivity(
        "繳交保證金",
        clientName,
        `保證金繳納失敗: 找不到匹配的諮商記錄`,
        "失敗",
        "",
        `嘗試匹配日期: ${firstCounselingDate}, ${paymentInfo}`
      );
      return { success: false, message: '找不到匹配的諮商記錄，請確認個案名稱和諮商日期' };
    }
    
    // 生成保證金已繳納通知
    const notificationMessage = generateNotificationMessage('deposit', {
      clientName: clientName,
      counselor: counselor,
      serviceType: serviceType,
      paymentMethod: paymentMethod,
      transferLastDigits: transferLastDigits,
      cashPaymentDate: cashPaymentDate
    });
    
    // 【新增】繳交成功後，新增小幫手待辦
    createHelperTodoItem(
      OPERATION_TYPES.DEPOSIT_PAYMENT,
      clientName,
      {
        date: firstCounselingDate,
        time: "",
        therapist: counselor,
        room: "",
        serviceType: serviceType,
        additionalInfo: `保證金繳交：${paymentMethod === 'transfer' ? '轉帳' : '現場繳納'}`
      }
    );

    // 添加成功日誌記錄
    const paymentInfo = paymentMethod === 'transfer' ? 
      `轉帳末五碼: ${transferLastDigits}` : 
      `現場繳納日期: ${cashPaymentDate}`;
    
    logSystemActivity(
      "繳交保證金",
      clientName,
      `${paymentInfo}, 首次諮商日期: ${firstCounselingDate}`,
      "成功",
      counselor,
      `已更新保證金狀態為已繳納（${paymentMethod === 'transfer' ? '轉帳' : '現場'}）`
    );
    
    return { 
      success: true,
      notificationMessage: notificationMessage
    };
  } catch (error) {
    // 記錄失敗日誌
    logSystemActivity(
      "繳交保證金",
      clientName,
      `保證金繳納失敗: ${error.toString()}`,
      "失敗"
    );
    
    Logger.log("處理保證金繳納時出現錯誤：" + error.toString());
    return { success: false, message: '處理保證金繳納時出現錯誤' };
  }
}

/**
 * 確保通知心理師表格存在
 */
function ensureCounselorNotificationSheet() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  let sheet = ss.getSheetByName("通知心理師");
  
  if (!sheet) {
    sheet = ss.insertSheet("通知心理師");
    sheet.appendRow(["心理師姓名", "電子郵件"]);
    sheet.getRange("A1:B1").setFontWeight("bold");
    
    // 添加一些假資料供測試
    sheet.appendRow(["王醫師", "example1@gmail.com"]);
    sheet.appendRow(["李醫師", "example2@gmail.com"]);
    sheet.appendRow(["張醫師", "example3@gmail.com"]);
  }
  
  return sheet;
}

/**
 * 獲取心理師的電子郵件地址
 * @param {string} counselorName - 心理師姓名
 * @return {string|null} 心理師的電子郵件地址
 */
function getCounselorEmail(counselorName) {
  try {
    ensureCounselorNotificationSheet();
    
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName("通知心理師");
    const data = sheet.getDataRange().getValues();
    
    // 搜尋心理師的郵件地址，允許部分匹配
    for (let i = 1; i < data.length; i++) {
      if (data[i][0] === counselorName || 
          data[i][0].includes(counselorName) || 
          counselorName.includes(data[i][0])) {
        Logger.log(`找到心理師 ${counselorName} 的郵件地址: ${data[i][1]}`);
        return data[i][1];
      }
    }
    
    // 如果在表格中找不到，使用預設值
    Logger.log(`在表格中找不到心理師 ${counselorName} 的郵件地址，使用預設值`);
    return null;
  } catch (error) {
    Logger.log(`獲取心理師郵件地址時出錯: ${error.toString()}`);
    return null;
  }
}

/**
 * 通知心理師有新的預約
 * @param {string} clientName - 個案姓名
 * @param {string} serviceType - 服務方案
 * @param {Date|string} date - 諮商日期
 * @param {string} time - 諮商時間
 * @param {string} counselor - 心理師姓名
 * @param {string} room - 諮商室
 * @return {boolean} 是否成功發送郵件
 */
function notifyCounselor(clientName, serviceType, date, time, counselor, room) {
  try {
    // 獲取心理師郵件地址
    const email = getCounselorEmail(counselor);
    if (!email) {
      Logger.log(`無法通知心理師 ${counselor}，找不到郵件地址`);
      return false;
    }
    
    // 格式化日期時間
    const dateObj = date instanceof Date ? date : new Date(date);
    const formattedDate = formatDateWithWeekday(dateObj);
    const formattedTime = time instanceof Date ? 
      Utilities.formatDate(time, "Asia/Taipei", "HH:mm") : time;
    
    // 獲取服務方案的顯示名稱
    const displayServiceType = getDisplayName(serviceType, 'service');
    
    // 郵件主題
    const subject = `【新預約通知】${formattedDate} ${formattedTime} ${clientName}`;
    
    // 創建 Google 日曆新增事件連結
    const calendarLink = createGoogleCalendarLink(clientName, serviceType, dateObj, time, counselor, room);
    
    // 郵件內容
    const body = `
      <div style="font-family: Arial, sans-serif; padding: 15px;">
        <h2 style="color: #4285f4;">新預約通知</h2>
        <p>親愛的 ${counselor}，您有一個新的預約：</p>
        <div style="background-color: #f8f9fa; padding: 15px; border-left: 4px solid #4285f4; margin: 15px 0;">
          <p><strong>個案姓名：</strong>${clientName}</p>
          <p><strong>服務方案：</strong>${displayServiceType}</p>
          <p><strong>諮商日期：</strong>${formattedDate}</p>
          <p><strong>諮商時間：</strong>${formattedTime}</p>
          <p><strong>諮商室：</strong>${room}</p>
        </div>
        <div style="text-align: center; margin: 20px 0;">
          <a href="${calendarLink}" target="_blank" style="display: inline-block; background-color: #4285f4; color: white; padding: 10px 20px; text-decoration: none; border-radius: 4px; font-weight: bold;">新增至我的行事曆</a>
        </div>
        <p>此郵件由系統自動發送，請勿直接回覆。</p>
      </div>
    `;
    
    // 發送郵件
    GmailApp.sendEmail(email, subject, "", {
      htmlBody: body,
      name: getSystemConfig().systemName
    });
    
    Logger.log(`已成功發送通知給心理師 ${counselor} (${email})`);
    return true;
  } catch (error) {
    Logger.log(`通知心理師時出錯: ${error.toString()}`);
    return false;
  }
}

/**
 * 創建 Google 日曆新增事件連結
 * @param {string} clientName - 個案姓名
 * @param {string} serviceType - 服務方案
 * @param {Date} date - 諮商日期
 * @param {string} timeValue - 諮商時間
 * @param {string} counselor - 心理師姓名
 * @param {string} room - 諮商室
 * @return {string} Google 日曆新增事件連結
 */
function createGoogleCalendarLink(clientName, serviceType, date, timeValue, counselor, room) {
  try {
    const config = getSystemConfig();
    
    // 處理時間格式
    let formattedTime;
    if (timeValue instanceof Date) {
      formattedTime = Utilities.formatDate(timeValue, config.timeZone, "HH:mm");
    } else {
      formattedTime = timeValue;
    }
    
    // 分割時間字串取得小時和分鐘
    const [hours, minutes] = formattedTime.split(':').map(Number);
    
    // 設定事件開始時間
    const startTime = new Date(date instanceof Date ? date : new Date(date));
    startTime.setHours(hours);
    startTime.setMinutes(minutes);
    startTime.setSeconds(0);
    
    // 設定結束時間（根據諮商時長）
    const endTime = new Date(startTime.getTime() + (config.counselingDuration * 60 * 1000));
    
    // 獲取此次服務的次數
    const clientHistory = getClientServiceHistory(clientName);
    const currentServiceCount = clientHistory[serviceType] || 1;
    
    // 創建事件標題
    const title = `（${serviceType} ${currentServiceCount}）${clientName}（${counselor}）- ${room}`;
    
    // 創建事件描述
    const description = `服務方案: ${serviceType}\n諮商師: ${counselor}\n諮商室: ${room}`;
    
    // 格式化日期時間為 Google 日曆 URL 格式
    const startDate = Utilities.formatDate(startTime, "UTC", "yyyyMMdd'T'HHmmss'Z'");
    const endDate = Utilities.formatDate(endTime, "UTC", "yyyyMMdd'T'HHmmss'Z'");
    
    // 建立 Google 日曆新增事件連結
    const baseUrl = "https://calendar.google.com/calendar/render";
    const params = {
      action: "TEMPLATE",
      text: encodeURIComponent(title),
      dates: `${startDate}/${endDate}`,
      details: encodeURIComponent(description),
      location: encodeURIComponent(room),
      sf: true,
      output: "xml"
    };
    
    // 組合 URL 參數
    const queryString = Object.keys(params)
      .map(key => `${key}=${params[key]}`)
      .join("&");
    
    return `${baseUrl}?${queryString}`;
  } catch (error) {
    Logger.log(`創建 Google 日曆連結時出錯: ${error.toString()}`);
    return "#"; // 返回空連結
  }
}


/**
 * 從對照表取得顯示名稱
 * @param {string} originalName - 原始名稱
 * @param {string} type - 類型 ('service' 或 'counselor')
 * @return {string} 顯示名稱
 */
function getDisplayName(originalName, type) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheetName = type === 'service' ? '服務方案對照表' : '心理師對照表';
    const sheet = ss.getSheetByName(sheetName);
    
    if (!sheet) return originalName; // 如果找不到對照表，返回原始名稱
    
    const data = sheet.getDataRange().getValues();
    
    // 跳過標題行，搜尋對應的顯示名稱
    for (let i = 1; i < data.length; i++) {
      if (data[i][0] === originalName) {
        return data[i][1] || originalName;
      }
    }
    
    return originalName; // 如果找不到對應，返回原始名稱
  } catch (error) {
    Logger.log(`取得顯示名稱時發生錯誤：${error.toString()}`);
    return originalName;
  }
}

/**
 * 格式化日期並加入星期
 * @param {Date} date - 日期物件
 * @return {string} 格式化後的日期字串
 */
function formatDateWithWeekday(date) {
  try {
    const weekdays = ['日', '一', '二', '三', '四', '五', '六'];
    const weekday = weekdays[date.getDay()];
    return Utilities.formatDate(date, "Asia/Taipei", "yyyy/MM/dd") + `(${weekday})`;
  } catch (error) {
    Logger.log(`格式化日期時出錯: ${error.toString()}`);
    return date ? date.toLocaleDateString() : '日期錯誤';
  }
}

/**
 * 創建日曆事件
 * @param {string} clientName - 個案姓名
 * @param {string} serviceType - 服務方案
 * @param {Date|string} date - 諮商日期
 * @param {string} timeValue - 諮商時間
 * @param {string} counselor - 心理師姓名
 * @param {string} room - 諮商室
 * @return {CalendarEvent|null} 創建的日曆事件
 */
function createCalendarEvent(clientName, serviceType, date, timeValue, counselor, room) {
  try {
    const config = getSystemConfig();
    const calendar = CalendarApp.getCalendarById(config.calendarId);
    
    Logger.log("原始時間值：" + timeValue);
    Logger.log("時間值類型：" + typeof timeValue);
    
    // 處理時間格式
    let formattedTime;
    if (timeValue instanceof Date) {
      formattedTime = Utilities.formatDate(timeValue, config.timeZone, "HH:mm");
    } else {
      formattedTime = timeValue;
    }
    
    Logger.log("格式化後的時間：" + formattedTime);
    
    // 分割時間字串取得小時和分鐘
    const [hours, minutes] = formattedTime.split(':').map(Number);
    
    // 設定事件開始時間
    const startTime = new Date(date instanceof Date ? date : new Date(date));
    startTime.setHours(hours);
    startTime.setMinutes(minutes);
    startTime.setSeconds(0);
    
    // 設定結束時間（根據諮商時長）
    const endTime = new Date(startTime.getTime() + (config.counselingDuration * 60 * 1000));

    Logger.log("預計創建的時間：");
    Logger.log("開始時間：" + Utilities.formatDate(startTime, config.timeZone, "yyyy/MM/dd HH:mm"));
    Logger.log("結束時間：" + Utilities.formatDate(endTime, config.timeZone, "yyyy/MM/dd HH:mm"));

    // 獲取個案歷史服務記錄
    const clientHistory = getClientServiceHistory(clientName);
    let historyText = "";
    if (clientHistory && Object.keys(clientHistory).length > 0) {
      historyText = "\n\n個案歷史服務記錄：\n";
      for (const [type, count] of Object.entries(clientHistory)) {
        historyText += `${type}: ${count}次\n`;
      }
    }

    // 獲取此次服務的次數
    const currentServiceCount = clientHistory[serviceType] || 1;
    
    // 獲取轉換後的名稱和格式化的日期時間
    const displayServiceType = getDisplayName(serviceType, 'service');
    const displayCounselor = getDisplayName(counselor, 'counselor');
    const formattedDateWithWeekday = formatDateWithWeekday(startTime);
    const formattedTimeOnly = Utilities.formatDate(startTime, config.timeZone, "HH:mm");

    // 根據服務次數生成不同的LINE通知文字
    let lineNotification;
    if (currentServiceCount <= 1) {
      lineNotification = `「${clientName}您好，已幫您預約使用${displayServiceType}，安排的是${displayCounselor}。時間是${formattedDateWithWeekday} ${formattedTimeOnly}，第一次來請提早10分鐘填寫資料以及攜帶身分證唷~感謝您」`;
    } else {
      lineNotification = `「${clientName}您好，已幫您預約使用${displayServiceType}，安排的是${displayCounselor}。時間是${formattedDateWithWeekday} ${formattedTimeOnly}，感謝您~」`;
    }
    
    // 創建事件，使用新的標題格式
    const title = `（${serviceType} ${currentServiceCount}）${clientName}（${counselor}）- ${room}`;
    const event = calendar.createEvent(title, startTime, endTime, {
      description: `服務方案: ${serviceType}\n諮商師: ${counselor}\n諮商室: ${room}${historyText}\n\n【LINE通知文字】\n${lineNotification}`,
      timeZone: config.timeZone
    });
    
    if (event) {
      Logger.log("事件創建成功！");
      Logger.log("事件標題：" + event.getTitle());
      Logger.log("實際事件時間：" + 
        Utilities.formatDate(event.getStartTime(), config.timeZone, "yyyy/MM/dd HH:mm"));
    }
    
    return event;
  } catch (error) {
    Logger.log("創建日曆事件錯誤：" + error.toString());
    return null;
  }
}

/**
 * 獲取個案的歷史服務記錄
 * @param {string} clientName - 個案姓名
 * @return {Object} 個案歷史服務記錄
 */
function getClientServiceHistory(clientName) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    
    // 創建標準化服務類型的映射表
    const serviceTypeMap = getServiceTypeMapping();
    
    // 創建統計物件
    const clientHistory = {};
    
    // 首先從「個案服務記錄」表格中獲取預設次數
    const recordSheet = ss.getSheetByName("個案服務記錄");
    if (recordSheet) {
      const records = recordSheet.getDataRange().getValues();
      // 跳過標題行
      for (let i = 1; i < records.length; i++) {
        const name = records[i][0];
        // 檢查名字是否包含在客戶名稱中，或客戶名稱是否包含此名字
        if (name && (clientName.includes(name) || name.includes(clientName))) {
          let serviceType = records[i][1];
          // 標準化服務類型
          serviceType = standardizeServiceType(serviceType, serviceTypeMap);
          const count = parseInt(records[i][2]);
          
          // 使用標準化後的服務類型作為鍵
          clientHistory[serviceType] = count;
        }
      }
    }
    
    // 然後從實際登錄資料中計算次數
    const dataSheet = ss.getSheetByName("登錄資料");
    if (dataSheet) {
      const data = dataSheet.getDataRange().getValues();
      
      // 跳過標題行
      for (let i = 1; i < data.length; i++) {
        const name = data[i][1];
        // 檢查名字是否包含在客戶名稱中，或客戶名稱是否包含此名字
        if (name && (clientName.includes(name) || name.includes(clientName))) {
          let serviceType = data[i][4];
          if (serviceType) {
            // 標準化服務類型
            serviceType = standardizeServiceType(serviceType, serviceTypeMap);
            
            // 使用標準化後的服務類型作為鍵
            clientHistory[serviceType] = (clientHistory[serviceType] || 0) + 1;
          }
        }
      }
    }
    
    return clientHistory;
  } catch (error) {
    Logger.log("獲取個案歷史記錄錯誤：" + error.toString());
    return {};
  }
}

/**
 * 獲取服務類型的標準化映射
 * @return {Object} 服務類型映射表
 */
function getServiceTypeMapping() {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const mappingSheet = ss.getSheetByName("服務方案對照表");
    const mapping = {};
    
    if (mappingSheet) {
      const data = mappingSheet.getDataRange().getValues();
      // 跳過標題行
      for (let i = 1; i < data.length; i++) {
        if (data[i][0] && data[i][1]) {
          // 建立雙向映射，將簡稱和全名都映射到標準名稱
          const standardName = data[i][0]; // 使用第一列作為標準名稱
          const displayName = data[i][1];
          
          mapping[standardName.toLowerCase()] = standardName;
          mapping[displayName.toLowerCase()] = standardName;
        }
      }
    }
    
    return mapping;
  } catch (error) {
    Logger.log("獲取服務類型映射錯誤：" + error.toString());
    return {};
  }
}

/**
 * 標準化服務類型名稱
 * @param {string} serviceType - 原始服務類型名稱
 * @param {Object} mapping - 服務類型映射表
 * @return {string} 標準化後的服務類型名稱
 */
function standardizeServiceType(serviceType, mapping) {
  if (!serviceType) return serviceType;
  
  // 轉為小寫進行比對
  const lowercaseType = serviceType.toLowerCase();
  
  // 從映射表中查找標準名稱
  if (mapping[lowercaseType]) {
    return mapping[lowercaseType];
  }
  
  // 如果找不到映射，嘗試進行部分匹配
  for (const [key, value] of Object.entries(mapping)) {
    if (lowercaseType.includes(key) || key.includes(lowercaseType)) {
      return value;
    }
  }
  
  // 如果找不到任何匹配，返回原始值
  return serviceType;
}

/**
 * 獲取客戶的服務類型
 * @param {string} clientName - 個案姓名
 * @param {Date} date - 諮商日期
 * @param {string} counselor - 心理師姓名
 * @return {string} 服務類型
 */
function getClientServiceType(clientName, date, counselor) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName("登錄資料");
    const data = sheet.getDataRange().getValues();
    
    // 將日期轉換為字符串格式，以便比較
    const dateString = date instanceof Date ? 
      Utilities.formatDate(date, "Asia/Taipei", "yyyy-MM-dd") : 
      Utilities.formatDate(new Date(date), "Asia/Taipei", "yyyy-MM-dd");
    
    // 搜尋符合條件的記錄
    for (let i = 1; i < data.length; i++) {
      const rowClientName = data[i][1];
      const rowDate = data[i][2];
      const rowCounselor = data[i][3];
      const rowServiceType = data[i][4];
      
      // 將行中的日期轉換為相同格式
      const rowDateString = rowDate instanceof Date ? 
        Utilities.formatDate(rowDate, "Asia/Taipei", "yyyy-MM-dd") : 
        Utilities.formatDate(new Date(rowDate), "Asia/Taipei", "yyyy-MM-dd");
      
      // 檢查是否符合所有條件
      if (rowClientName === clientName && 
          rowDateString === dateString && 
          rowCounselor === counselor) {
        return rowServiceType;
      }
    }
    
    // 如果找不到符合的記錄，返回空字符串
    return "";
  } catch (error) {
    Logger.log("獲取客戶服務類型時出錯: " + error.toString());
    return "";
  }
}

/**
 * 更新統計報表的函數
 */
function updateStatistics() {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const dataSheet = ss.getSheetByName("登錄資料");
    const statsSheet = ss.getSheetByName("統計報表");
    
    // 如果統計報表不存在，創建一個
    if (!statsSheet) {
      const newStatsSheet = ss.insertSheet("統計報表");
      newStatsSheet.getRange(1, 1, 1, 5).setValues([["年份", "月份", "心理師", "服務方案", "次數"]]);
      newStatsSheet.getRange(1, 1, 1, 5).setFontWeight("bold");
      statsSheet = newStatsSheet;
    } else {
      // 清除舊的統計資料（保留標題）
      if (statsSheet.getLastRow() > 1) {
        statsSheet.getRange(2, 1, statsSheet.getLastRow()-1, statsSheet.getLastColumn()).clear();
      }
    }
    
    // 獲取所有資料
    const data = dataSheet.getDataRange().getValues();
    
    // 創建統計物件
    const stats = {};
    
    // 跳過標題行
    for (let i = 1; i < data.length; i++) {
      const counselor = data[i][3];
      const serviceType = data[i][4];
      const date = new Date(data[i][2]);
      const month = date.getMonth() + 1;
      const year = date.getFullYear();
      const key = `${year}-${month}-${counselor}-${serviceType}`;
      
      stats[key] = (stats[key] || 0) + 1;
    }
    
    // 寫入統計數據
    const statsData = Object.entries(stats).map(([key, value]) => {
      const [year, month, counselor, serviceType] = key.split("-");
      return [year, month, counselor, serviceType, value];
    });
    
    if (statsData.length > 0) {
      statsSheet.getRange(2, 1, statsData.length, 5).setValues(statsData);
    }
    
    Logger.log("統計報表已更新");
  } catch (error) {
    Logger.log("更新統計報表錯誤：" + error.toString());
  }
}

/**
 * 取消預約的函數 - 將原事件變成灰色而非刪除
 * @param {string} clientName - 個案姓名
 * @param {Date} appointmentDate - 預約日期
 * @param {string} counselor - 心理師姓名
 * @return {boolean} 是否成功取消
 */
function cancelAppointment(clientName, appointmentDate, counselor) {
  try {
    // 1. 修改日曆事件標題，並設為灰色
    const config = getSystemConfig();
    const calendar = CalendarApp.getCalendarById(config.calendarId);
    const events = calendar.getEventsForDay(appointmentDate);
    let eventFound = false;
    
    for (let event of events) {
      const title = event.getTitle();
      if (title.includes(clientName) && !title.includes("【取消】")) {
        // 修改標題，在前面加上【取消】
        event.setTitle(`【取消】${title}`);
        
        // 將事件設為灰色 (使用 Google 日曆的 "8" 灰色)
        event.setColor(CalendarApp.EventColor.GRAY);
        
        Logger.log("已將日曆事件標記為取消並設為灰色");
        eventFound = true;
        break;
      }
    }

    if (!eventFound) {
      Logger.log("未找到對應的日曆事件");
    }

    // 2. 從試算表中刪除資料
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName("登錄資料");
    const data = sheet.getDataRange().getValues();
    
    for (let i = 1; i < data.length; i++) {
      if (data[i][1] === clientName && 
          new Date(data[i][2]).toDateString() === appointmentDate.toDateString() &&
          data[i][3] === counselor) {
        sheet.deleteRow(i + 1);
        Logger.log("已從試算表刪除資料");
        break;
      }
    }

    // 3. 更新統計資料
    updateStatistics();
    Logger.log("已更新統計資料");
    
    // 4. 發送取消通知
    sendCancelNotification(clientName, appointmentDate, counselor);

    return true;
  } catch (error) {
    Logger.log("取消預約時發生錯誤：" + error.toString());
    return false;
  }
}

/**
 * 發送取消預約通知
 * @param {string} clientName - 個案姓名
 * @param {Date} appointmentDate - 預約日期
 * @param {string} counselor - 心理師姓名
 */
function sendCancelNotification(clientName, appointmentDate, counselor) {
  try {
    // 獲取心理師郵件地址
    const email = getCounselorEmail(counselor);
    if (!email) {
      Logger.log(`無法發送取消通知給心理師 ${counselor}，找不到郵件地址`);
      return;
    }
    
    // 獲取服務類型
    const serviceType = getClientServiceType(clientName, appointmentDate, counselor);
    
    // 格式化日期
    const formattedDate = formatDateWithWeekday(appointmentDate);
    
    // 郵件主題
    const subject = `【預約取消通知】${formattedDate} ${clientName}`;
    
    // 郵件內容
    const body = `
      <div style="font-family: Arial, sans-serif; padding: 15px;">
        <h2 style="color: #db4437;">預約取消通知</h2>
        <p>親愛的 ${counselor}，以下預約已被取消：</p>
        <div style="background-color: #f8f9fa; padding: 15px; border-left: 4px solid #db4437; margin: 15px 0;">
          <p><strong>個案姓名：</strong>${clientName}</p>
          <p><strong>服務方案：</strong>${serviceType}</p>
          <p><strong>原定日期：</strong>${formattedDate}</p>
        </div>
        <p>此郵件由系統自動發送，請勿直接回覆。</p>
      </div>
    `;
    
    // 發送郵件
    GmailApp.sendEmail(email, subject, "", {
      htmlBody: body,
      name: getSystemConfig().systemName
    });
    
    Logger.log(`已成功發送取消通知給心理師 ${counselor} (${email})`);
  } catch (error) {
    Logger.log(`發送取消通知時出錯: ${error.toString()}`);
  }
}

/**
 * 發送改期通知
 * @param {string} clientName - 個案姓名
 * @param {Date} originalDate - 原始預約日期
 * @param {Date} newDate - 新預約日期
 * @param {string} newTime - 新預約時間
 * @param {string} counselor - 心理師姓名
 * @param {string} serviceType - 服務類型
 * @param {string} room - 諮商室
 */
function sendRescheduleNotification(clientName, originalDate, newDate, newTime, counselor, serviceType, room) {
  try {
    // 獲取心理師郵件地址
    const email = getCounselorEmail(counselor);
    if (!email) {
      Logger.log(`無法發送改期通知給心理師 ${counselor}，找不到郵件地址`);
      return;
    }
    
    // 格式化日期
    const formattedOriginalDate = formatDateWithWeekday(originalDate);
    const formattedNewDate = formatDateWithWeekday(newDate);
    
    // 創建 Google 日曆新增事件連結
    const calendarLink = createGoogleCalendarLink(clientName, serviceType, newDate, newTime, counselor, room);
    
    // 郵件主題
    const subject = `【預約改期通知】${clientName} ${formattedOriginalDate} → ${formattedNewDate}`;
    
    // 郵件內容
    const body = `
      <div style="font-family: Arial, sans-serif; padding: 15px;">
        <h2 style="color: #f4b400;">預約改期通知</h2>
        <p>親愛的 ${counselor}，以下預約已被改期：</p>
        <div style="background-color: #f8f9fa; padding: 15px; border-left: 4px solid #f4b400; margin: 15px 0;">
          <p><strong>個案姓名：</strong>${clientName}</p>
          <p><strong>服務方案：</strong>${serviceType}</p>
          <p><strong>原定日期：</strong>${formattedOriginalDate}</p>
          <p><strong>新預約日期：</strong>${formattedNewDate}</p>
          <p><strong>新預約時間：</strong>${newTime}</p>
          <p><strong>諮商室：</strong>${room}</p>
        </div>
        <div style="text-align: center; margin: 20px 0;">
          <a href="${calendarLink}" target="_blank" style="display: inline-block; background-color: #f4b400; color: white; padding: 10px 20px; text-decoration: none; border-radius: 4px; font-weight: bold;">新增至我的行事曆</a>
        </div>
        <p>此郵件由系統自動發送，請勿直接回覆。</p>
      </div>
    `;
    
    // 發送郵件
    GmailApp.sendEmail(email, subject, "", {
      htmlBody: body,
      name: getSystemConfig().systemName
    });
    
    Logger.log(`已成功發送改期通知給心理師 ${counselor} (${email})`);
  } catch (error) {
    Logger.log(`發送改期通知時出錯: ${error.toString()}`);
  }
}

/**
 * 顯示取消預約的使用者介面
 */
function showCancelDialog() {
  // 獲取心理師列表
  const counselors = getCounselorList();
  const counselorOptions = counselors.map(counselor => 
    `<option value="${counselor}">${counselor}</option>`).join('');
  
  // 獲取客戶名單供下拉選擇
  const clients = getClientList();
  const clientOptions = clients.map(client => 
    `<option value="${client}">${client}</option>`).join('');
  
  var html = `
    <div id="cancel-container" style="padding: 20px; font-family: Arial, sans-serif;">
      <h2 style="color: #db4437;">取消預約</h2>
      <div style="margin: 15px 0;">
        <label style="font-weight: bold;">個案姓名：</label><br>
        <div style="position: relative; width: 100%;">
          <input type="text" id="clientName" list="clientList" style="width: 100%; padding: 8px; margin-top: 5px; border: 1px solid #ddd; border-radius: 4px;" placeholder="請輸入或選擇個案姓名" autocomplete="off">
          <datalist id="clientList">
            ${clientOptions}
          </datalist>
          <div id="clientNameError" style="color: #c62828; font-size: 12px; margin-top: 3px; display: none;">查無此個案，請確認名稱是否正確</div>
        </div>
      </div>
      <div style="margin: 15px 0;">
        <label style="font-weight: bold;">預約日期：</label><br>
        <input type="date" id="appointmentDate" style="width: 100%; padding: 8px; margin-top: 5px; border: 1px solid #ddd; border-radius: 4px;">
      </div>
      <div style="margin: 15px 0;">
        <label style="font-weight: bold;">諮商師：</label><br>
        <select id="counselor" style="width: 100%; padding: 8px; margin-top: 5px; border: 1px solid #ddd; border-radius: 4px;">
          <option value="">請選擇諮商師</option>
          ${counselorOptions}
        </select>
      </div>
      <div style="margin: 15px 0;">
        <label style="font-weight: bold;">取消原因：</label><br>
        <textarea id="cancelReason" style="width: 100%; padding: 8px; margin-top: 5px; border: 1px solid #ddd; border-radius: 4px; height: 80px;" placeholder="請輸入取消原因"></textarea>
      </div>
      <div style="margin: 20px 0; text-align: center;">
        <button onclick="submitCancel()" style="background-color: #db4437; color: white; border: none; padding: 10px 20px; border-radius: 4px; cursor: pointer; margin-right: 10px;">確認取消</button>
        <button onclick="google.script.host.close()" style="background-color: #f1f1f1; border: none; padding: 10px 20px; border-radius: 4px; cursor: pointer;">關閉</button>
      </div>
      <div id="message" style="margin-top: 15px; padding: 10px; display: none; border-radius: 4px;"></div>
      
      ${generateLoadingIndicatorHTML()}
    </div>
    <script>
      // 初始化頁面時設定今天日期
      document.addEventListener("DOMContentLoaded", function() {
        const today = new Date();
        const year = today.getFullYear();
        const month = String(today.getMonth() + 1).padStart(2, "0");
        const day = String(today.getDate()).padStart(2, "0");
        document.getElementById("appointmentDate").value = year + "-" + month + "-" + day;
        
        // 設置名字輸入框的事件監聽
        setupClientNameInputFilter();
      });
      
      // 設置個案名稱的過濾功能
      function setupClientNameInputFilter() {
        const clientNameInput = document.getElementById('clientName');
        const clientList = document.getElementById('clientList');
        const originalOptions = Array.from(clientList.options).map(opt => opt.value);
        
        clientNameInput.addEventListener('input', function() {
          const searchValue = this.value.toLowerCase();
          const errorElement = document.getElementById('clientNameError');
          
          // 檢查是否有完全匹配的名字
          const exactMatch = originalOptions.some(option => option === this.value);
          if (this.value && !exactMatch) {
            errorElement.style.display = 'block';
          } else {
            errorElement.style.display = 'none';
          }
        });
      }
      
      function submitCancel() {
        var clientName = document.getElementById('clientName').value;
        var appointmentDate = document.getElementById('appointmentDate').value;
        var counselor = document.getElementById('counselor').value;
        var cancelReason = document.getElementById('cancelReason').value;
        
        if (!clientName || !appointmentDate || !counselor) {
          showMessage('請填寫所有必要欄位', 'error');
          return;
        }
        
        // 嚴格驗證客戶名稱是否在列表中
        const clientList = document.getElementById('clientList');
        const clients = Array.from(clientList.options).map(opt => opt.value);
        if (!clients.includes(clientName)) {
          showMessage('查無此個案，請確認名稱是否正確', 'error');
          return;
        }
        
        document.getElementById('message').style.display = 'none';
        
        // 顯示加載指示器
        showLoading();
        
        google.script.run
          .withSuccessHandler(function(result) {
            // 隱藏加載指示器
            hideLoading();
            
            if (result.success) {
              if (result.notificationMessage) {
                // 顯示取消預約訊息框
                document.getElementById('message').style.display = "none";
                document.getElementById('cancel-container').innerHTML = result.notificationMessage;
              } else {
                showMessage('預約已成功取消', 'success');
                setTimeout(function() {
                  google.script.host.close();
                }, 2000);
              }
            } else {
              showMessage(result.message || '取消預約失敗，請稍後再試', 'error');
            }
          })
          .withFailureHandler(function(error) {
            // 隱藏加載指示器
            hideLoading();
            
            showMessage('發生錯誤：' + error, 'error');
          })
          .processCancelRequest(clientName, appointmentDate, counselor, cancelReason);
      }
      
      function showMessage(message, type) {
        var messageDiv = document.getElementById('message');
        messageDiv.innerHTML = message;
        messageDiv.style.display = 'block';
        
        if (type === 'error') {
          messageDiv.style.backgroundColor = '#ffebee';
          messageDiv.style.color = '#c62828';
        } else {
          messageDiv.style.backgroundColor = '#e8f5e9';
          messageDiv.style.color = '#2e7d32';
        }
      }
    </script>`;

  var ui = HtmlService.createHtmlOutput(html)
    .setWidth(400)
    .setHeight(500);
    
  SpreadsheetApp.getUi().showModalDialog(ui, '取消預約');
}



/**
 * 處理取消請求的函數
 * @param {string} clientName - 個案姓名
 * @param {string} appointmentDate - 預約日期字串
 * @param {string} counselor - 心理師姓名
 * @param {string} cancelReason - 取消原因
 * @return {Object} 處理結果
 */
function processCancelRequest(clientName, appointmentDate, counselor, cancelReason) {
  try {
    var date = new Date(appointmentDate);
    
    // 在取消預約前先取得預約資訊
    const appointmentInfo = findAppointmentInfo(clientName, date, counselor);
    if (!appointmentInfo) {
      // 記錄失敗日誌
      logSystemActivity(
        "取消預約",
        clientName,
        `取消預約失敗: 找不到符合條件的預約記錄`,
        "失敗",
        counselor,
        `嘗試取消日期: ${appointmentDate}`
      );
      return { 
        success: false, 
        message: "找不到符合條件的預約記錄" 
      };
    }
    
    // 執行取消預約操作
    const cancelResult = cancelAppointment(clientName, date, counselor);
    
    if (cancelResult) {
      // 生成取消預約通知
      const notificationMessage = generateNotificationMessage('cancel', {
        clientName: clientName,
        appointmentDate: date,
        appointmentTime: appointmentInfo.time,
        counselor: counselor,
        serviceType: appointmentInfo.serviceType,
        room: appointmentInfo.room,
        cancelReason: cancelReason
      });
      
      // 添加成功日誌記錄
      logSystemActivity(
        "取消預約",
        clientName,
        `取消日期: ${appointmentDate}, 心理師: ${counselor}`,
        "成功",
        counselor,
        `取消原因: ${cancelReason}`
      );

      // 【新增】取消成功後，新增小幫手待辦
      createHelperTodoItem(
        OPERATION_TYPES.CANCELLATION,
        clientName,
        {
          date: appointmentDate,
          time: appointmentInfo.time,
          therapist: counselor,
          room: appointmentInfo.room,
          serviceType: appointmentInfo.serviceType,
          additionalInfo: `取消原因：${cancelReason}`
        }
      );

      return { 
        success: true,
        notificationMessage: notificationMessage
      };
    } else {
      // 記錄失敗日誌
      logSystemActivity(
        "取消預約",
        clientName,
        `取消預約失敗: 執行取消操作失敗`,
        "失敗",
        counselor,
        `取消原因: ${cancelReason}`
      );
      return { 
        success: false, 
        message: "取消預約失敗，請稍後再試" 
      };
    }
  } catch (error) {
    // 記錄失敗日誌
    logSystemActivity(
      "取消預約",
      clientName,
      `取消預約失敗: ${error.toString()}`,
      "失敗",
      counselor
    );
    
    Logger.log("處理取消請求時出錯: " + error.toString());
    return { 
      success: false, 
      message: "處理過程中發生錯誤: " + error.toString() 
    };
  }
}

/**
 * 顯示調整預約時間的使用者介面 (已修正衝突處理邏輯)
 */
function showRescheduleDialog() {
  const counselors = getCounselorList();
  const counselorOptions = counselors.map(counselor => `<option value="${counselor}">${counselor}</option>`).join('');
  
  const clients = getClientList();
  const clientOptions = clients.map(client => `<option value="${client}">${client}</option>`).join('');
  
  // 注意：這裡先不載入 rooms，因為當衝突發生時，會由後端提供可用的列表
  
  var html = `
    <div id="reschedule-container" style="padding: 20px; font-family: Arial, sans-serif;">
      <h2 style="color: #f4b400;">調整預約時間</h2>
      <div style="margin: 10px 0;">
        <label style="font-weight: bold;">個案姓名：</label><br>
        <div style="position: relative; width: 100%;">
          <input type="text" id="clientName" list="clientList" style="width: 100%; padding: 8px; margin-top: 5px; border: 1px solid #ddd; border-radius: 4px;" placeholder="請輸入或選擇個案姓名" autocomplete="off">
          <datalist id="clientList">${clientOptions}</datalist>
          <div id="clientNameError" style="color: #c62828; font-size: 12px; margin-top: 3px; display: none;">查無此個案，請確認名稱是否正確</div>
        </div>
      </div>
      <div style="margin: 10px 0;">
        <label style="font-weight: bold;">原預約日期：</label><br>
        <input type="date" id="originalDate" style="width: 100%; padding: 8px; margin-top: 5px; border: 1px solid #ddd; border-radius: 4px;">
      </div>
      <div style="margin: 10px 0;">
        <label style="font-weight: bold;">諮商師：</label><br>
        <select id="counselor" style="width: 100%; padding: 8px; margin-top: 5px; border: 1px solid #ddd; border-radius: 4px;">
          <option value="">請選擇諮商師</option>
          ${counselorOptions}
        </select>
      </div>
      <hr>
      <div style="margin: 10px 0;">
        <label style="font-weight: bold;">新預約日期：</label><br>
        <input type="date" id="newDate" style="width: 100%; padding: 8px; margin-top: 5px; border: 1px solid #ddd; border-radius: 4px;">
      </div>
      <div style="margin: 10px 0;">
        <label style="font-weight: bold;">新預約時間：</label><br>
        <select id="newHour" style="width: 45%; padding: 8px; margin-top: 5px; border: 1px solid #ddd; border-radius: 4px;">
          ${generateHourOptions()}
        </select>
        <select id="newMinute" style="width: 45%; padding: 8px; margin-top: 5px; border: 1px solid #ddd; border-radius: 4px;">
          <option value="00">00</option>
          <option value="30">30</option>
        </select>
      </div>
      
      <div id="roomSelectionDiv" style="margin: 15px 0; display: none;">
        <label style="font-weight: bold;">選擇新的諮商室：</label><br>
        <select id="newRoom" style="width: 100%; padding: 8px; margin-top: 5px; border: 1px solid #ddd; border-radius: 4px;">
          <option value="">請選擇可用諮商室</option>
        </select>
      </div>
      
      <div style="margin: 20px 0; text-align: center;">
        <button onclick="submitReschedule()" id="submitButton" style="background-color: #f4b400; color: white; border: none; padding: 10px 20px; border-radius: 4px; cursor: pointer; margin-right: 10px;">確認調整</button>
        <button onclick="google.script.host.close()" style="background-color: #f1f1f1; border: none; padding: 10px 20px; border-radius: 4px; cursor: pointer;">關閉</button>
      </div>
      <div id="message" style="margin-top: 15px; padding: 10px; display: none; border-radius: 4px;"></div>
      
      ${generateLoadingIndicatorHTML()}
    </div>
    <script>
      let rescheduleData = {}; // 用於儲存需要重新提交的資料

      document.addEventListener("DOMContentLoaded", function() {
        const today = new Date();
        const year = today.getFullYear();
        const month = String(today.getMonth() + 1).padStart(2, "0");
        const day = String(today.getDate()).padStart(2, "0");
        document.getElementById("originalDate").value = year + "-" + month + "-" + day;
        document.getElementById("newDate").value = year + "-" + month + "-" + day;
      });

      function showMessage(message, type) {
        const messageDiv = document.getElementById('message');
        messageDiv.innerHTML = message;
        messageDiv.style.display = 'block';
        messageDiv.style.backgroundColor = type === 'error' ? '#ffebee' : (type === 'warning' ? '#fff3e0' : '#e8f5e9');
        messageDiv.style.color = type === 'error' ? '#c62828' : (type === 'warning' ? '#ef6c00' : '#2e7d32');
      }

      function submitReschedule() {
        const clientName = document.getElementById('clientName').value;
        const originalDate = document.getElementById('originalDate').value;
        const counselor = document.getElementById('counselor').value;
        const newDate = document.getElementById('newDate').value;
        const newTime = document.getElementById('newHour').value + ':' + document.getElementById('newMinute').value;
        const newRoom = document.getElementById('newRoom').value; // 獲取新選擇的諮商室

        if (!clientName || !originalDate || !counselor || !newDate) {
          showMessage('請填寫所有必要欄位', 'error');
          return;
        }

        document.getElementById('message').style.display = 'none';
        showLoading();

        // 【修改處】檢查是否有暫存的改期資料。如果沒有，走正常流程；如果有，表示是第二次提交。
        if (Object.keys(rescheduleData).length > 0 && newRoom) {
            // 第二次提交，使用者已選擇新房間
            google.script.run
                .withSuccessHandler(handleSuccess)
                .withFailureHandler(handleFailure)
                .processRescheduleWithNewRoom(rescheduleData, newRoom);
        } else {
            // 第一次提交
            google.script.run
                .withSuccessHandler(handleSuccess)
                .withFailureHandler(handleFailure)
                .processRescheduleRequest(clientName, originalDate, counselor, newDate, newTime);
        }
      }

      function handleSuccess(result) {
        hideLoading();
        if (result.success) {
          document.getElementById('reschedule-container').innerHTML = result.notificationMessage;
        } else if (result.needRoomChange) {
          // 【修改處】處理需要更換房間的邏輯
          showMessage(result.message, 'warning');
          rescheduleData = result.originalInfo; // 暫存使用者輸入的資料
          
          const roomSelectionDiv = document.getElementById('roomSelectionDiv');
          const newRoomSelect = document.getElementById('newRoom');
          
          // 填充可用的房間列表
          newRoomSelect.innerHTML = '<option value="">請選擇可用諮商室</option>' + 
                                    result.availableRooms.map(r => \`<option value="\${r}">\${r}</option>\`).join('');
          roomSelectionDiv.style.display = 'block'; // 顯示房間選擇器
          
        } else {
          showMessage(result.message || '調整失敗，請稍後再試', 'error');
        }
      }

      function handleFailure(error) {
        hideLoading();
        showMessage('發生錯誤：' + error, 'error');
      }
    </script>
  `;

  var ui = HtmlService.createHtmlOutput(html)
    .setWidth(450)
    .setHeight(620);
  SpreadsheetApp.getUi().showModalDialog(ui, '調整預約時間');
}

/**
 * 處理調整時間請求的函數 (整合修正版 V2)
 * @param {string} clientName - 個案姓名
 * @param {string} originalDateStr - 原預約日期字串
 * @param {string} counselor - 心理師姓名
 * @param {string} newDateStr - 新預約日期字串
 * @param {string} newTime - 新預約時間
 * @return {Object} 處理結果
 */
function processRescheduleRequest(clientName, originalDateStr, counselor, newDateStr, newTime) {
  try {
    const origDate = new Date(originalDateStr);
    const newDateObj = new Date(newDateStr);

    // 1. 獲取原預約資訊
    const originalInfo = findAppointmentInfo(clientName, origDate, counselor);
    if (!originalInfo) {
      const message = "找不到符合條件的原預約記錄，請確認個案姓名、原預約日期和心理師是否正確。";
      logSystemActivity("調整預約時間", clientName, message, "失敗", counselor);
      return { success: false, message: message };
    }
    const roomToUse = originalInfo.room;
    const serviceType = originalInfo.serviceType;

    // 2. 檢查新時段的原諮商室是否可用
    const roomAvailable = checkRoomAvailabilityExcludingCurrent(newDateObj, newTime, roomToUse, clientName, counselor);
    
    // 【修改處】如果房間不可用，則檢查其他房間
    if (!roomAvailable) {
      const allRooms = getRoomList();
      const availableRooms = allRooms.filter(room => room !== roomToUse && checkRoomAvailabilityExcludingCurrent(newDateObj, newTime, room, clientName, counselor));

      if (availableRooms.length === 0) {
        const message = `新時段 ${newDateStr} ${newTime} 的所有諮商室都已被預約，請選擇其他時間。`;
        logSystemActivity("調整預約時間", clientName, message, "失敗", counselor, `原預約: ${originalDateStr}`);
        return { success: false, message: message };
      }

      // 回傳特殊物件，告知前端需要使用者選擇新房間
      return {
        success: false,
        needRoomChange: true,
        message: `原諮商室 ${roomToUse} 在新時段已被預約，但有其他可用空間。請選擇一個新的諮商室：`,
        availableRooms: availableRooms,
        originalInfo: { clientName, originalDateStr, counselor, newDateStr, newTime, serviceType }
      };
    }
    
    // 如果原房間可用，直接完成改期
    const result = processRescheduleWithNewRoom({ clientName, originalDateStr, counselor, newDateStr, newTime, serviceType }, roomToUse);
    return result;

  } catch (error) {
    Logger.log("處理調整時間請求時出錯: " + error.toString());
    logSystemActivity("調整預約時間", clientName, `處理請求時發生嚴重錯誤: ${error.toString()}`, "失敗", counselor);
    return { success: false, message: "處理過程中發生錯誤: " + error.toString() };
  }
}

/**
 * 使用指定的諮商室來完成預約調整
 * @param {Object} originalInfo - 包含所有預約資訊的物件
 * @param {string} newRoom - 最終選定的新諮商室
 * @return {Object} 處理結果
 */
function processRescheduleWithNewRoom(originalInfo, newRoom) {
  const { clientName, originalDateStr, counselor, newDateStr, newTime, serviceType } = originalInfo;
  const origDate = new Date(originalDateStr);
  const newDateObj = new Date(newDateStr);

  try {
    const config = getSystemConfig();
    const calendar = CalendarApp.getCalendarById(config.calendarId);

    // 標記原始日曆事件為【改期】
    const originalEvents = calendar.getEventsForDay(origDate);
    for (let event of originalEvents) {
      const title = event.getTitle();
      if (title.includes(clientName) && title.includes(counselor) && !title.includes("【")) {
        event.setTitle(`【改期】${title}`);
        event.setColor(CalendarApp.EventColor.GRAY);
        Logger.log(`已將原始日曆事件標記為改期: ${title}`);
        break;
      }
    }

    // 創建新的日曆事件
    const newEvent = createCalendarEvent(clientName, serviceType, newDateObj, newTime, counselor, newRoom);
    if (newEvent) {
      newEvent.setColor(CalendarApp.EventColor.BLUE);
    }

    // 更新試算表中的資料
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName("登錄資料");
    const data = sheet.getDataRange().getValues();
    let updated = false;
    for (let i = 1; i < data.length; i++) {
      if (data[i][1] === clientName && isSameDay(new Date(data[i][2]), origDate) && data[i][3] === counselor) {
        sheet.getRange(i + 1, 3).setValue(newDateObj); // 更新日期
        sheet.getRange(i + 1, 6).setValue(newTime);   // 更新時間
        sheet.getRange(i + 1, 7).setValue(newRoom);   // 更新諮商室
        updated = true;
        Logger.log(`已在試算表中更新預約資料，第 ${i + 1} 行`);
        break;
      }
    }
    if (!updated) {
      sheet.appendRow([new Date(), clientName, newDateObj, counselor, serviceType, newTime, newRoom, ""]);
      Logger.log("在登錄資料中未找到對應舊紀錄，已為新預約新增一筆資料。");
    }
    
    updateStatistics();
    sendRescheduleNotification(clientName, origDate, newDateObj, newTime, counselor, serviceType, newRoom);
    
    const notificationMessage = generateNotificationMessage('reschedule', {
      clientName: clientName,
      originalDate: origDate,
      newDate: newDateObj,
      newTime: newTime,
      counselor: counselor,
      serviceType: serviceType,
      room: newRoom
    });

    logSystemActivity("調整預約時間", clientName, `原日期: ${originalDateStr} -> 新日期: ${newDateStr} ${newTime}`, "成功", counselor, `諮商室更換為: ${newRoom}`);
    
    return { success: true, notificationMessage: notificationMessage };
  } catch (error) {
     Logger.log("執行最終改期時出錯: " + error.toString());
     logSystemActivity("調整預約時間", clientName, `執行最終改期時發生嚴重錯誤: ${error.toString()}`, "失敗", counselor);
     return { success: false, message: "執行最終改期時發生錯誤: " + error.toString() };
  }
}

/**
 * 獲取所有客戶名單
 * @return {Array<string>} 客戶名單
 */
function getClientList() {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const dataSheet = ss.getSheetByName("登錄資料");
    if (!dataSheet) return [];
    
    const data = dataSheet.getDataRange().getValues();
    
    // 假設客戶名稱在第2列（索引1）
    const clientSet = new Set();
    for (let i = 1; i < data.length; i++) {
      if (data[i][1] && typeof data[i][1] === 'string') {
        clientSet.add(data[i][1]);
      }
    }
    
    return Array.from(clientSet).sort();
  } catch (error) {
    Logger.log("獲取客戶名單時出錯: " + error.toString());
    return [];
  }
}

/**
 * 顯示調整諮商空間對話框
 */
function showChangeRoomDialog() {
  // 獲取心理師列表
  const counselors = getCounselorList();
  const counselorOptions = counselors.map(counselor => 
    `<option value="${counselor}">${counselor}</option>`).join('');
  
  // 獲取諮商室列表
  const rooms = getRoomList();
  const roomOptions = rooms.map(room => 
    `<option value="${room}">${room}</option>`).join('');
  
  // 獲取客戶名單供下拉選擇
  const clients = getClientList();
  const clientOptions = clients.map(client => 
    `<option value="${client}">${client}</option>`).join('');
  
  var html = `
    <div style="padding: 20px; font-family: Arial, sans-serif;">
      <h2 style="color: #4285f4;">調整諮商空間</h2>
      <div style="margin: 15px 0;">
        <label style="font-weight: bold;">個案姓名：</label><br>
        <div style="position: relative; width: 100%;">
          <input type="text" id="clientName" list="clientList" style="width: 100%; padding: 8px; margin-top: 5px; border: 1px solid #ddd; border-radius: 4px;" placeholder="請輸入或選擇個案姓名" autocomplete="off">
          <datalist id="clientList">
            ${clientOptions}
          </datalist>
          <div id="clientNameError" style="color: #c62828; font-size: 12px; margin-top: 3px; display: none;">查無此個案，請確認名稱是否正確</div>
        </div>
      </div>
      <div style="margin: 15px 0;">
        <label style="font-weight: bold;">預約日期：</label><br>
        <input type="date" id="appointmentDate" style="width: 100%; padding: 8px; margin-top: 5px; border: 1px solid #ddd; border-radius: 4px;">
      </div>
      <div style="margin: 15px 0;">
        <label style="font-weight: bold;">諮商師：</label><br>
        <select id="counselor" style="width: 100%; padding: 8px; margin-top: 5px; border: 1px solid #ddd; border-radius: 4px;">
          <option value="">請選擇諮商師</option>
          ${counselorOptions}
        </select>
      </div>
      <div style="margin: 15px 0;">
        <label style="font-weight: bold;">新諮商室：</label><br>
        <select id="newRoom" style="width: 100%; padding: 8px; margin-top: 5px; border: 1px solid #ddd; border-radius: 4px;">
          <option value="">請選擇新諮商室</option>
          ${roomOptions}
        </select>
      </div>
      <div style="margin: 20px 0; text-align: center;">
        <button onclick="submitChangeRoom()" style="background-color: #4285f4; color: white; border: none; padding: 10px 20px; border-radius: 4px; cursor: pointer; margin-right: 10px;">確認調整</button>
        <button onclick="google.script.host.close()" style="background-color: #f1f1f1; border: none; padding: 10px 20px; border-radius: 4px; cursor: pointer;">關閉</button>
      </div>
      <div id="message" style="margin-top: 15px; padding: 10px; display: none; border-radius: 4px;"></div>
      
      ${generateLoadingIndicatorHTML()}
    </div>
    <script>
      // 初始化頁面時設定今天日期
      document.addEventListener("DOMContentLoaded", function() {
        const today = new Date();
        const year = today.getFullYear();
        const month = String(today.getMonth() + 1).padStart(2, "0");
        const day = String(today.getDate()).padStart(2, "0");
        document.getElementById("appointmentDate").value = year + "-" + month + "-" + day;
        
        // 設置名字輸入框的事件監聽
        setupClientNameInputFilter();
      });
      
      // 設置個案名稱的過濾功能
      function setupClientNameInputFilter() {
        const clientNameInput = document.getElementById('clientName');
        const clientList = document.getElementById('clientList');
        const originalOptions = Array.from(clientList.options).map(opt => opt.value);
        
        clientNameInput.addEventListener('input', function() {
          const searchValue = this.value.toLowerCase();
          const errorElement = document.getElementById('clientNameError');
          
          // 檢查是否有完全匹配的名字
          const exactMatch = originalOptions.some(option => option === this.value);
          if (this.value && !exactMatch) {
            errorElement.style.display = 'block';
          } else {
            errorElement.style.display = 'none';
          }
        });
      }
      
      function submitChangeRoom() {
        var clientName = document.getElementById('clientName').value;
        var appointmentDate = document.getElementById('appointmentDate').value;
        var counselor = document.getElementById('counselor').value;
        var newRoom = document.getElementById('newRoom').value;
        
        if (!clientName || !appointmentDate || !counselor || !newRoom) {
          showMessage('請填寫所有欄位', 'error');
          return;
        }
        
        // 嚴格驗證客戶名稱是否在列表中
        const clientList = document.getElementById('clientList');
        const clients = Array.from(clientList.options).map(opt => opt.value);
        if (!clients.includes(clientName)) {
          showMessage('查無此個案，請確認名稱是否正確', 'error');
          return;
        }
        
        document.getElementById('message').style.display = 'none';
        
        // 顯示加載指示器
        showLoading();
        
        google.script.run
          .withSuccessHandler(function(result) {
            // 隱藏加載指示器
            hideLoading();
            
            if (result.success) {
              showMessage('諮商室已成功調整！', 'success');
              setTimeout(function() {
                google.script.host.close();
              }, 2000);
            } else {
              showMessage(result.message || '調整諮商室失敗，請稍後再試', 'error');
            }
          })
          .withFailureHandler(function(error) {
            // 隱藏加載指示器
            hideLoading();
            
            showMessage('發生錯誤：' + error, 'error');
          })
          .processChangeRoomRequest(clientName, appointmentDate, counselor, newRoom);
      }
      
      function showMessage(message, type) {
        var messageDiv = document.getElementById('message');
        messageDiv.innerHTML = message;
        messageDiv.style.display = 'block';
        
        if (type === 'error') {
          messageDiv.style.backgroundColor = '#ffebee';
          messageDiv.style.color = '#c62828';
        } else {
          messageDiv.style.backgroundColor = '#e8f5e9';
          messageDiv.style.color = '#2e7d32';
        }
      }
    </script>`;

  var ui = HtmlService.createHtmlOutput(html)
    .setWidth(400)
    .setHeight(500);
    
  SpreadsheetApp.getUi().showModalDialog(ui, '調整諮商空間');
}


/**
 * 使用新諮商室處理續約
 * @param {string} clientName - 個案姓名
 * @param {string} renewalDate - 續約日期
 * @param {string} renewalTime - 續約時間
 * @param {string} counselor - 心理師
 * @param {string} serviceType - 服務類型
 * @param {string} newRoom - 新諮商室
 * @return {Object} 處理結果
 */
function processRenewalWithNewRoom(clientName, renewalDate, renewalTime, counselor, serviceType, newRoom) {
  try {
    const newDateObj = new Date(renewalDate);
    
    // 續約是全新的預約，直接使用 checkRoomAvailability
    if (!checkRoomAvailability(newDateObj, renewalTime, newRoom)) {
      return { success: false, message: '選擇的諮商室已被預約，請重新選擇' };
    }
    
    // 添加新預約記錄
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName("登錄資料");
    const now = new Date();
    
    sheet.appendRow([
      now,                    // 時間戳記
      clientName,             // 個案姓名
      newDateObj,             // 諮商日期
      counselor,              // 諮商師
      serviceType,            // 服務方案
      renewalTime,            // 時間
      newRoom,                // 諮商室
      "已繳納"                // 保證金狀態（續約通常已繳納）
    ]);
    
    // 排序資料
    sortDataByTimestamp(sheet);
    
    // 創建日曆事件
    createCalendarEvent(clientName, serviceType, newDateObj, renewalTime, counselor, newRoom);
    
    // 更新統計報表
    updateStatistics();
    
    // 通知心理師
    notifyCounselor(clientName, serviceType, newDateObj, renewalTime, counselor, newRoom);
    
    // 生成續約訊息
    const notificationMessage = generateNotificationMessage('renewal', {
      clientName: clientName,
      renewalDate: newDateObj,
      renewalTime: renewalTime,
      counselor: counselor,
      serviceType: serviceType,
      room: newRoom
    });
    
    // 【新增】續約成功後，新增小幫手待辦
    createHelperTodoItem(
      OPERATION_TYPES.RENEWAL,
      clientName,
      {
        clientName: clientName,
        date: renewalDate,
        time: renewalTime,
        therapist: counselor,
        room: newRoom,
        serviceType: serviceType,
        additionalInfo: "續約（更換諮商室）"
      }
    );
    
    // 添加成功日誌
    logSystemActivity(
      "個案續約",
      clientName,
      `續約日期: ${renewalDate}, 時間: ${renewalTime}, 諮商室: ${newRoom}`,
      "成功",
      counselor,
      "續約完成（更換諮商室）"
    );
    
    return { 
      success: true,
      notificationMessage: notificationMessage 
    };
  } catch (error) {
    Logger.log("使用新諮商室處理續約時出現錯誤：" + error.toString());
    return { success: false, message: '處理續約時出現錯誤' };
  }
}


/**
 * 檢查諮商室在改期時是否可用（專門用於改期場景）
 * @param {Date} newDate - 新預約日期
 * @param {string} newTime - 新預約時間 (HH:MM格式)
 * @param {string} room - 諮商室名稱
 * @param {string} clientName - 個案姓名
 * @param {string} counselor - 心理師姓名
 * @param {Date} originalDate - 原預約日期（用於排除）
 * @return {boolean} 諮商室是否可用
 */
function checkRoomAvailabilityForReschedule(newDate, newTime, room, clientName, counselor, originalDate) {
  try {
    // 從系統設定獲取日曆ID
    const config = getSystemConfig();
    const calendar = CalendarApp.getCalendarById(config.calendarId);
    
    // 分割時間字串取得小時和分鐘
    const [hours, minutes] = newTime.split(':').map(Number);
    
    // 設定新預約的開始和結束時間
    const startTime = new Date(newDate);
    startTime.setHours(hours);
    startTime.setMinutes(minutes);
    startTime.setSeconds(0);
    
    const endTime = new Date(startTime);
    endTime.setMinutes(startTime.getMinutes() + config.counselingDuration); // 諮商時長
    
    // 檢查新日期當天的所有事件
    const dayStart = new Date(newDate);
    dayStart.setHours(0, 0, 0, 0);
    
    const dayEnd = new Date(newDate);
    dayEnd.setHours(23, 59, 59, 999);
    
    // 獲取新日期當天所有事件
    const events = calendar.getEvents(dayStart, dayEnd);
    
    // 檢查是否有與新時段重疊的同一諮商室的預約
    for (let event of events) {
      const title = event.getTitle();
      const desc = event.getDescription();
      
      // 跳過已取消和已改期的事件
      if (title.includes("【取消】") || title.includes("【改期】")) {
        continue;
      }
      
      // 跳過原預約（如果是同一個個案和心理師）
      if (title.includes(clientName) && title.includes(counselor)) {
        const eventDate = event.getStartTime();
        // 如果是原預約日期的事件，跳過檢查
        if (isSameDay(eventDate, originalDate)) {
          continue;
        }
      }
      
      // 檢查諮商室是否相同
      if (title.includes(`- ${room}`) || desc.includes(`諮商室: ${room}`)) {
        // 檢查時間是否重疊
        const eventStart = event.getStartTime();
        const eventEnd = event.getEndTime();
        
        // 檢查重疊的情況
        if ((startTime >= eventStart && startTime < eventEnd) || 
            (endTime > eventStart && endTime <= eventEnd) ||
            (startTime <= eventStart && endTime >= eventEnd)) {
          Logger.log(`時間衝突：${title} 在 ${eventStart} - ${eventEnd}`);
          return false; // 時段重疊，諮商室不可用
        }
      }
    }
    
    return true; // 諮商室可用
  } catch (error) {
    Logger.log("檢查改期諮商室可用性時出現錯誤：" + error.toString());
    // 出錯時返回false保守處理
    return false;
  }
}





/**
 * 建立個案服務記錄表格
 * @return {Sheet} 個案服務記錄表格
 */
function createClientServiceRecordSheet() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  let sheet = ss.getSheetByName("個案服務記錄");
  
  if (!sheet) {
    sheet = ss.insertSheet("個案服務記錄");
    sheet.appendRow(["個案名字", "服務方案", "已服務次數", "最後更新日期"]);
    sheet.getRange("A1:D1").setFontWeight("bold");
  }
  
  return sheet;
}


/**
 * 顯示設定個案服務記錄的對話框
 */
function showAddClientServiceRecord() {
  // 獲取服務方案列表
  const serviceTypes = getServiceTypeList();
  const serviceTypeOptions = serviceTypes.map(type => 
    `<option value="${type}">${type}</option>`).join('');
  
  var html = `
    <div style="padding: 20px; font-family: Arial, sans-serif;">
      <h2 style="color: #4285f4;">設定個案服務記錄</h2>
      <div style="margin: 15px 0;">
        <label style="font-weight: bold;">個案名字：</label><br>
        <input type="text" id="clientName" style="width: 100%; padding: 8px; margin-top: 5px; border: 1px solid #ddd; border-radius: 4px;" placeholder="例如：阿白">
      </div>
      <div style="margin: 15px 0;">
        <label style="font-weight: bold;">服務方案：</label><br>
        <select id="serviceType" style="width: 100%; padding: 8px; margin-top: 5px; border: 1px solid #ddd; border-radius: 4px;">
          <option value="">請選擇服務方案</option>
          ${serviceTypeOptions}
        </select>
      </div>
      <div style="margin: 15px 0;">
        <label style="font-weight: bold;">已服務次數：</label><br>
        <input type="number" id="serviceCount" style="width: 100%; padding: 8px; margin-top: 5px; border: 1px solid #ddd; border-radius: 4px;" min="1" value="1">
      </div>
      <div style="margin: 20px 0; text-align: center;">
        <button onclick="submitRecord()" style="background-color: #4285f4; color: white; border: none; padding: 10px 20px; border-radius: 4px; cursor: pointer; margin-right: 10px;">確認設定</button>
        <button onclick="google.script.host.close()" style="background-color: #f1f1f1; border: none; padding: 10px 20px; border-radius: 4px; cursor: pointer;">關閉</button>
      </div>
      <div id="message" style="margin-top: 15px; padding: 10px; display: none; border-radius: 4px;"></div>
    </div>
    <script>
      function submitRecord() {
        var clientName = document.getElementById('clientName').value;
        var serviceType = document.getElementById('serviceType').value;
        var serviceCount = document.getElementById('serviceCount').value;
        
        if (!clientName || !serviceType || !serviceCount) {
          showMessage('請填寫所有欄位', 'error');
          return;
        }
        
        if (!/^\\d+$/.test(serviceCount)) {
          showMessage('服務次數必須是正整數', 'error');
          return;
        }
        
        document.getElementById('message').style.display = 'none';
        
        google.script.run
          .withSuccessHandler(function(result) {
            showMessage('個案服務記錄已設定成功', 'success');
            setTimeout(function() {
              google.script.host.close();
            }, 2000);
          })
          .withFailureHandler(function(error) {
            showMessage('發生錯誤：' + error, 'error');
          })
          .addClientServiceRecord(clientName, serviceType, serviceCount);
      }
      
      function showMessage(message, type) {
        var messageDiv = document.getElementById('message');
        messageDiv.innerHTML = message;
        messageDiv.style.display = 'block';
        
        if (type === 'error') {
          messageDiv.style.backgroundColor = '#ffebee';
          messageDiv.style.color = '#c62828';
        } else {
          messageDiv.style.backgroundColor = '#e8f5e9';
          messageDiv.style.color = '#2e7d32';
        }
      }
    </script>`;

  var ui = HtmlService.createHtmlOutput(html)
    .setWidth(400)
    .setHeight(450);
    
  SpreadsheetApp.getUi().showModalDialog(ui, '設定個案服務記錄');
}

/**
 * 添加個案服務記錄
 * @param {string} clientName - 個案姓名
 * @param {string} serviceType - 服務方案
 * @param {string|number} serviceCount - 服務次數
 * @return {boolean} 是否成功添加
 */
function addClientServiceRecord(clientName, serviceType, serviceCount) {
  try {
    const sheet = createClientServiceRecordSheet();
    const data = sheet.getDataRange().getValues();
    
    // 確保服務次數是數字
    const count = parseInt(serviceCount);
    if (isNaN(count) || count < 1) {
      throw new Error("服務次數必須是正整數");
    }
    
    // 檢查是否已存在此個案的此服務方案記錄
    let found = false;
    for (let i = 1; i < data.length; i++) {
      // 使用包含關係檢查，而非完全匹配
      if (data[i][0].includes(clientName) || clientName.includes(data[i][0])) {
        if (data[i][1] === serviceType) {
          // 更新現有記錄
          sheet.getRange(i + 1, 3).setValue(count);
          sheet.getRange(i + 1, 4).setValue(new Date());
          found = true;
          break;
        }
      }
    }
    
    if (!found) {
      // 新增記錄
      sheet.appendRow([clientName, serviceType, count, new Date()]);
    }
    
    return true;
  } catch (error) {
    Logger.log("設定個案服務記錄時發生錯誤：" + error.toString());
    throw error;
  }
}

/**
 * 更新個案服務記錄
 * @param {string} clientName - 個案姓名
 * @param {string} serviceType - 服務方案
 * @param {number} newCount - 新服務次數
 * @return {boolean} 是否成功更新
 */
function updateClientServiceRecord(clientName, serviceType, newCount) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName("個案服務記錄");
    
    if (!sheet) {
      // 如果表格不存在，創建並添加記錄
      const newSheet = createClientServiceRecordSheet();
      newSheet.appendRow([clientName, serviceType, newCount, new Date()]);
      return true;
    }
    
    const data = sheet.getDataRange().getValues();
    
    // 檢查是否已存在此個案的此服務方案記錄
    let found = false;
    for (let i = 1; i < data.length; i++) {
      // 使用包含關係檢查，而非完全匹配
      if ((data[i][0].includes(clientName) || clientName.includes(data[i][0])) && 
          data[i][1] === serviceType) {
        // 更新現有記錄
        sheet.getRange(i + 1, 3).setValue(newCount);
        sheet.getRange(i + 1, 4).setValue(new Date());
        found = true;
        break;
      }
    }
    
    if (!found) {
      // 新增記錄
      sheet.appendRow([clientName, serviceType, newCount, new Date()]);
    }
    
    return true;
  } catch (error) {
    Logger.log("更新個案服務記錄時發生錯誤：" + error.toString());
    return false;
  }
}


/**
 * 【全新通用函式】從系統設定工作表中，根據區塊標題獲取其下方的選項列表
 * @param {string} sectionName - 要讀取的區塊標題 (例如 "服務方案", "心理師")
 * @return {Array<string>} 該區塊的選項列表
 */
function getListFromSettings(sectionName) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const settingsSheet = ss.getSheetByName("系統設定");
    
    if (!settingsSheet) {
      // 如果找不到設定表，提供一個 UI 提示
      SpreadsheetApp.getUi().alert("錯誤：找不到名為 '系統設定' 的工作表。");
      return [];
    }
    
    const data = settingsSheet.getDataRange().getValues();
    const listItems = [];
    let inTargetSection = false;

    // 從第二行開始遍歷 (跳過標題)
    for (let i = 1; i < data.length; i++) {
      const currentCellA = data[i][0].trim(); // 當前行A欄位 (區塊標題)
      const currentCellB = data[i][1].trim(); // 當前行B欄位 (選項值)

      if (currentCellA !== "") {
        // A欄有值，代表這是一個區塊的開始
        if (inTargetSection) {
          // 如果我們原本已經在目標區塊內，現在又遇到新的區塊標頭，
          // 表示目標區塊已經結束，可以停止讀取。
          break; 
        }
        if (currentCellA === sectionName) {
          // 找到了我們想要的區塊，開始讀取。
          inTargetSection = true;
        }
      } else if (inTargetSection && currentCellB !== "") {
        // A欄是空的，且我們正處於目標區塊內，這表示這是一個選項。
        listItems.push(currentCellB);
      }
    }
    
    if (listItems.length === 0) {
        Logger.log(`在 '系統設定' 中找不到區塊 "${sectionName}" 或該區塊下沒有任何項目。`);
    }

    return listItems;
  } catch (error) {
    Logger.log(`從系統設定獲取 '${sectionName}' 列表時出錯: ${error.toString()}`);
    SpreadsheetApp.getUi().alert(`讀取設定時發生錯誤: ${error.message}`);
    return []; // 發生錯誤時返回空陣列
  }
}



/**
 * 測試函數
 */
function testFormSubmit() {
  onFormSubmit();
}

/**
 * 測試取消預約的函數
 */
function testCancelAppointment() {
  // 範例：取消特定預約
  const clientName = "測試客戶";
  const appointmentDate = new Date("2025-02-20");
  const counselor = "王醫師";
  cancelAppointment(clientName, appointmentDate, counselor);
}

/**
 * 測試調整預約時間的函數
 */
function testRescheduleAppointment() {
  const clientName = "測試客戶";
  const originalDate = new Date("2025-02-20");
  const counselor = "王醫師";
  const newDate = new Date("2025-02-25");
  const newTime = "14:30";
  const room = "諮商室A";
  rescheduleAppointment(clientName, originalDate, counselor, newDate, newTime, room);
}

/**
 * 【更新後】從系統設定表格獲取心理師列表
 * @return {Array<string>} 心理師列表
 */
function getCounselorList() {
  return getListFromSettings("心理師");
}

/**
 * 【更新後】從系統設定表格獲取服務方案列表
 * @return {Array<string>} 服務方案列表
 */
function getServiceTypeList() {
  return getListFromSettings("服務方案");
}

/**
 * 【更新後】從系統設定表格獲取諮商室列表
 * @return {Array<string>} 諮商室列表
 */
function getRoomList() {
  return getListFromSettings("諮商室");
}


/**
 * 生成小時選項的HTML
 */
function generateHourOptions() {
  var options = '';
  for (var i = 8; i <= 21; i++) {
    var hour = i < 10 ? '0' + i : '' + i;
    options += `<option value="${hour}">${hour}</option>`;
  }
  return options;
}

/**
 * 更新系統設定表格，添加保證金條件欄位
 */
function updateSystemSettingsForDeposit() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sheet = ss.getSheetByName("系統設定");
  
  if (!sheet) {
    return false;
  }
  
  // 檢查是否已有保證金欄位
  const headerRow = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
  if (headerRow.indexOf("保證金狀態") === -1) {
    // 添加保證金狀態和備註欄位
    const lastCol = sheet.getLastColumn();
    sheet.getRange(1, lastCol + 1).setValue("保證金狀態");
    sheet.getRange(1, lastCol + 2).setValue("備註");
    sheet.getRange(1, lastCol + 1, 1, 2).setFontWeight("bold");
    
    // 設定欄寬
    sheet.setColumnWidth(lastCol + 1, 100);
    sheet.setColumnWidth(lastCol + 2, 200);
  }
  
  return true;
}

/**
 * 獲取所有保證金條件設定
 * @return {Object} 保證金條件
 */
function getDepositConditions() {
  try {
    // 確保系統設定表格已更新
    updateSystemSettingsForDeposit();
    
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName("系統設定");
    const data = sheet.getDataRange().getValues();
    
    const conditions = {};
    let inServiceSection = false;
    
    // 找出保證金狀態和備註欄位的索引
    const headerRow = data[0];
    const depositStatusIndex = headerRow.indexOf("保證金狀態");
    const noteIndex = headerRow.indexOf("備註");
    
    // 如果找不到保證金欄位，返回空對象
    if (depositStatusIndex === -1) {
      return {};
    }
    
    // 遍歷所有行，找出服務方案區段
    for (let i = 1; i < data.length; i++) {
      if (data[i][0] === "服務方案") {
        inServiceSection = true;
        continue;
      } else if (inServiceSection && (data[i][0] === "心理師" || data[i][0] === "諮商室")) {
        // 已經到下一個區段
        break;
      }
      
      if (inServiceSection && data[i][1] && data[i][1] !== "") {
        const serviceType = data[i][1];
        const status = depositStatusIndex !== -1 && data[i][depositStatusIndex] ? data[i][depositStatusIndex] : '需收';
        const note = noteIndex !== -1 && data[i][noteIndex] ? data[i][noteIndex] : '';
        
        conditions[serviceType] = {
          status: status,
          note: note
        };
      }
    }
    
    return conditions;
  } catch (error) {
    Logger.log("獲取保證金條件設定時出錯：" + error.toString());
    return {};
  }
}

/**
 * 儲存保證金條件設定
 * @param {Object} settings - 保證金條件設定
 * @return {Object} 處理結果
 */
function saveDepositConditions(settings) {
  try {
    // 確保系統設定表格已更新
    updateSystemSettingsForDeposit();
    
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName("系統設定");
    const data = sheet.getDataRange().getValues();
    
    // 找出保證金狀態和備註欄位的索引
    const headerRow = data[0];
    const depositStatusIndex = headerRow.indexOf("保證金狀態");
    const noteIndex = headerRow.indexOf("備註");
    
    // 如果找不到保證金欄位，返回錯誤
    if (depositStatusIndex === -1) {
      // 記錄失敗日誌
      logSystemActivity(
        "系統設定",
        "",
        `保證金條件設定失敗: 找不到保證金狀態欄位`,
        "失敗"
      );
      return { success: false, message: '找不到保證金狀態欄位' };
    }
    
    // 遍歷所有行，找出服務方案區段並更新
    let inServiceSection = false;
    let updated = 0;
    
    for (let i = 1; i < data.length; i++) {
      if (data[i][0] === "服務方案") {
        inServiceSection = true;
        continue;
      } else if (inServiceSection && (data[i][0] === "心理師" || data[i][0] === "諮商室")) {
        // 已經到下一個區段
        break;
      }
      
      if (inServiceSection && data[i][1] && data[i][1] !== "") {
        const serviceType = data[i][1];
        
        if (settings[serviceType]) {
          // 更新保證金狀態
          sheet.getRange(i + 1, depositStatusIndex + 1).setValue(settings[serviceType].status);
          
          // 更新備註
          if (noteIndex !== -1) {
            sheet.getRange(i + 1, noteIndex + 1).setValue(settings[serviceType].note);
          }
          
          updated++;
        }
      }
    }
    
    // 添加成功日誌記錄
    const settingsDetails = Object.keys(settings).map(type => 
      `${type}: ${settings[type].status}`).join(', ');
    
    logSystemActivity(
      "系統設定",
      "",
      `更新保證金條件設定: ${settingsDetails}`,
      "成功",
      "",
      `共更新${updated}項設定`
    );
    
    return { success: true, updatedCount: updated };
  } catch (error) {
    // 記錄失敗日誌
    logSystemActivity(
      "系統設定",
      "",
      `保證金條件設定失敗: ${error.toString()}`,
      "失敗"
    );
    
    Logger.log("儲存保證金條件設定時出錯：" + error.toString());
    return { success: false, message: '儲存設定時出現錯誤：' + error.toString() };
  }
}

/**
 * 顯示保證金條件設定對話框
 */
function showDepositConditionsDialog() {
  // 獲取服務方案列表
  const serviceTypes = getServiceTypeList();
  
  // 獲取現有保證金條件
  const depositConditions = getDepositConditions();
  
  // 生成表格行
  let tableRows = '';
  serviceTypes.forEach(serviceType => {
    const condition = depositConditions[serviceType] || { status: '需收', note: '' };
    const checkedExempt = condition.status === '免收' ? 'checked' : '';
    const checkedRequired = condition.status === '需收' ? 'checked' : '';
    
    tableRows += `
      <tr>
        <td>${serviceType}</td>
        <td>
          <label><input type="radio" name="deposit_${encodeURIComponent(serviceType)}" value="免收" ${checkedExempt}> 免收</label>
          <label><input type="radio" name="deposit_${encodeURIComponent(serviceType)}" value="需收" ${checkedRequired}> 需收</label>
        </td>
        <td>
          <input type="text" id="note_${encodeURIComponent(serviceType)}" value="${condition.note}" style="width: 100%;">
        </td>
      </tr>
    `;
  });
  
  var html = `
    <div style="padding: 20px; font-family: Arial, sans-serif;">
      <h2 style="color: #4285f4;">保證金條件設定</h2>
      <p>請設定各服務方案的保證金收取條件：</p>
      
      <div style="max-height: 400px; overflow-y: auto; margin: 15px 0; border: 1px solid #ddd; border-radius: 4px;">
        <table style="width: 100%; border-collapse: collapse;">
          <thead>
            <tr style="background-color: #f8f9fa;">
              <th style="padding: 10px; text-align: left; border-bottom: 1px solid #ddd;">服務方案</th>
              <th style="padding: 10px; text-align: left; border-bottom: 1px solid #ddd;">保證金狀態</th>
              <th style="padding: 10px; text-align: left; border-bottom: 1px solid #ddd;">備註</th>
            </tr>
          </thead>
          <tbody>
            ${tableRows}
          </tbody>
        </table>
      </div>
      
      <div style="margin: 20px 0; text-align: center;">
        <button onclick="saveSettings()" style="background-color: #4285f4; color: white; border: none; padding: 10px 20px; border-radius: 4px; cursor: pointer; margin-right: 10px;">儲存設定</button>
        <button onclick="google.script.host.close()" style="background-color: #f1f1f1; border: none; padding: 10px 20px; border-radius: 4px; cursor: pointer;">取消</button>
      </div>
      
      <div id="message" style="margin-top: 15px; padding: 10px; display: none; border-radius: 4px;"></div>
      
      ${generateLoadingIndicatorHTML()}
    </div>
    <script>
      function saveSettings() {
        // 顯示加載指示器
        showLoading();
        
        const serviceTypes = ${JSON.stringify(serviceTypes)};
        const settings = {};
        
        serviceTypes.forEach(serviceType => {
          const radioName = 'deposit_' + encodeURIComponent(serviceType);
          const noteId = 'note_' + encodeURIComponent(serviceType);
          
          const radioButtons = document.getElementsByName(radioName);
          let status = '需收'; // 預設值
          
          for (let i = 0; i < radioButtons.length; i++) {
            if (radioButtons[i].checked) {
              status = radioButtons[i].value;
              break;
            }
          }
          
          const note = document.getElementById(noteId).value;
          
          settings[serviceType] = {
            status: status,
            note: note
          };
        });
        
        google.script.run
          .withSuccessHandler(function(result) {
            // 隱藏加載指示器
            hideLoading();
            
            if (result.success) {
              showMessage('保證金條件設定已成功儲存！更新了 ' + result.updatedCount + ' 個服務方案', 'success');
              setTimeout(function() {
                google.script.host.close();
              }, 2000);
            } else {
              showMessage(result.message || '設定儲存失敗，請稍後再試', 'error');
            }
          })
          .withFailureHandler(function(error) {
            // 隱藏加載指示器
            hideLoading();
            
            showMessage('發生錯誤：' + error, 'error');
          })
          .saveDepositConditions(settings);
      }
      
      function showMessage(message, type) {
        var messageDiv = document.getElementById('message');
        messageDiv.innerHTML = message;
        messageDiv.style.display = 'block';
        
        if (type === 'error') {
          messageDiv.style.backgroundColor = '#ffebee';
          messageDiv.style.color = '#c62828';
        } else {
          messageDiv.style.backgroundColor = '#e8f5e9';
          messageDiv.style.color = '#2e7d32';
        }
      }
    </script>
  `;

  var ui = HtmlService.createHtmlOutput(html)
    .setWidth(500)
    .setHeight(550);
    
  SpreadsheetApp.getUi().showModalDialog(ui, '保證金條件設定');
}

/**
 * 生成通知訊息框 (已新增改期通知)
 * @param {string} messageType - 訊息類型 (firstAppointment, renewal, deposit, cancel, reschedule)
 * @param {Object} data - 相關資料
 * @return {string} HTML訊息
 */
function generateNotificationMessage(messageType, data) {
  let title = '';
  let message = '';
  
  // 從對照表獲取正式名稱
  const displayServiceType = getServiceTypeDisplayName(data.serviceType);
  const displayCounselor = getCounselorDisplayName(data.counselor);
  
  Logger.log("原始服務類型: " + data.serviceType + " -> 轉換後: " + displayServiceType);
  Logger.log("原始心理師: " + data.counselor + " -> 轉換後: " + displayCounselor);
  
  switch (messageType) {
    case 'firstAppointment': {
      title = '初次預約通知';
      const formattedDateWithWeekday = formatDateWithWeekday(new Date(data.appointmentDate));
      const formattedTimeOnly = data.appointmentTime;
      const clientName = data.clientName;
      
      // 檢查服務方案的保證金狀態
      const depositStatus = getServiceDepositStatus(data.serviceType);
      
      if (depositStatus === "免收") {
        // 免收保證金的訊息
        message = `您好，提醒您已媒合${displayCounselor}，${formattedDateWithWeekday} ${formattedTimeOnly}的${displayServiceType}。

第一次前來建議提早5-10分鐘方便填寫基本資料，有任何問題請再來電本所。
*備註:若為青壯世代心理健康方案請一併攜帶身分證以利驗證身分

本所地址：高雄市鳳山區凱旋路317巷76號
連絡電話：0921-311675`;
      } else {
        // 需收保證金的訊息
        message = `您好，提醒您已媒合${displayCounselor}，${formattedDateWithWeekday} ${formattedTimeOnly}的${displayServiceType}。
請於收到此信件的48小時內繳交保證金600元至
台灣銀行(004)帳號025001206438 
戶名:浪心人心理諮商所何鴻裕

轉帳完成請先告知本所轉帳時間與轉帳後五碼，確定收到會再回覆您。

第一次前來建議提早5-10分鐘方便填寫基本資料，有任何問題請再來電本所。

本所地址：高雄市鳳山區凱旋路317巷76號
連絡電話：0921-311675`;
      }
      break;
    }
    case 'renewal': {
      title = '續約通知';
      const formattedDateWithWeekday = formatDateWithWeekday(new Date(data.renewalDate));
      const formattedTimeOnly = data.renewalTime;
      const clientName = data.clientName;
      
      // 根據服務次數生成不同的LINE通知文字
      if (data.serviceCount <= 1) {
        message = `「${clientName}您好，已幫您預約使用${displayServiceType}，安排的是${displayCounselor}。時間是${formattedDateWithWeekday} ${formattedTimeOnly}，第一次來請提早10分鐘填寫資料以及攜帶身分證唷~感謝您」`;
      } else {
        message = `「${clientName}您好，已幫您預約使用${displayServiceType}，安排的是${displayCounselor}。時間是${formattedDateWithWeekday} ${formattedTimeOnly}，感謝您~」`;
      }
      break;
    }
    case 'deposit': {
      title = '保證金已繳納通知';
      message = `已確認收到您的保證金，感謝您！
提醒您第一次來所請提早5-10分鐘，以便填寫資料。

本所地址：高雄市鳳山區凱旋路317巷76號
連絡電話：0921-311675`;
      break;
    }
    case 'cancel': {
      // 取消預約訊息
      title = '預約取消通知';
      const formattedDateWithWeekday = formatDateWithWeekday(new Date(data.appointmentDate));
      const formattedTimeOnly = data.appointmentTime;
      const clientName = data.clientName;
      const cancelReason = data.cancelReason || '未提供原因';
      
      message = `「${clientName}您好，已取消您${formattedDateWithWeekday} ${formattedTimeOnly}與${displayCounselor}的${displayServiceType}預約。

取消原因：${cancelReason}

如需重新預約，請再與我們聯繫。

本所地址：高雄市鳳山區凱旋路317巷76號
連絡電話：0921-311675」`;
      break;
    }
    case 'reschedule': {
      // 新增：改期預約訊息
      title = '預約改期通知';
      const formattedNewDateWithWeekday = formatDateWithWeekday(new Date(data.newDate));
      const formattedTimeOnly = data.newTime;
      const clientName = data.clientName;
      
      message = `「${clientName}您好，已幫您預約使用${displayServiceType}，安排的是${displayCounselor}。調整時間是${formattedNewDateWithWeekday} ${formattedTimeOnly}，感謝您~」`;
      break;
    }
    default: {
      title = '系統通知';
      message = '無可用訊息';
    }
  }
  
  // 保存訊息到歷史記錄
  saveMessageHistory(data.clientName, messageType, message);
  
  // 返回HTML訊息框，不包含複製按鈕
  return `
    <div style="margin-top: 20px; padding: 15px; border: 1px solid #ddd; border-radius: 5px; background-color: #f8f9fa;">
      <h3 style="color: #4285f4; margin-top: 0;">${title}</h3>
      <div style="white-space: pre-line; margin-bottom: 15px;">${message}</div>
      <div style="text-align: center;">
        <button onclick="google.script.host.close()" style="background-color: #f1f1f1; border: none; padding: 8px 15px; border-radius: 4px; cursor: pointer;">
          關閉
        </button>
      </div>
    </div>
  `;
}


/**
 * 獲取服務方案的保證金狀態
 * @param {string} serviceType - 服務方案名稱
 * @return {string} 保證金狀態 ("需收" 或 "免收")
 */
function getServiceDepositStatus(serviceType) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName("系統設定");
    
    if (!sheet) {
      Logger.log("找不到系統設定表格");
      return "需收"; // 預設為需收
    }
    
    const data = sheet.getDataRange().getValues();
    let inServiceSection = false;
    
    // 遍歷表格尋找服務方案
    for (let i = 0; i < data.length; i++) {
      // 檢查是否進入服務方案區段
      if (data[i][0] === "服務方案") {
        inServiceSection = true;
        continue;
      }
      
      // 如果已經離開服務方案區段，則退出
      if (inServiceSection && (data[i][0] === "心理師" || data[i][0] === "諮商室")) {
        break;
      }
      
      // 在服務方案區段中尋找匹配的服務方案
      if (inServiceSection && data[i][1] === serviceType) {
        // 檢查是否有保證金狀態欄位 (C列)
        if (data[i].length > 2 && data[i][2]) {
          return data[i][2]; // 返回保證金狀態
        } else {
          return "需收"; // 如果沒有指定，預設為需收
        }
      }
    }
    
    // 如果找不到匹配的服務方案，預設為需收
    Logger.log(`找不到服務方案 "${serviceType}" 的保證金狀態，預設為需收`);
    return "需收";
  } catch (error) {
    Logger.log(`獲取服務方案保證金狀態時出錯: ${error.toString()}`);
    return "需收"; // 發生錯誤時預設為需收
  }
}

/**
 * 顯示保證金檢核對話框
 */
function showDepositCheck() {
  // 獲取未繳保證金的個案資料
  const unpaidDeposits = getUnpaidDeposits();
  
  // 生成表格行
  let tableRows = '';
  unpaidDeposits.forEach(client => {
    // 計算距離諮商日期的天數
    const today = new Date();
    const counselingDate = new Date(client.date);
    const daysUntilCounseling = Math.ceil((counselingDate - today) / (1000 * 60 * 60 * 24));
    
    // 決定警示等級
    let warningClass = '';
    if (daysUntilCounseling <= 1) {
      warningClass = 'table-danger';
    } else if (daysUntilCounseling <= 3) {
      warningClass = 'table-warning';
    }
    
    // 格式化日期和時間
    const formattedDate = Utilities.formatDate(counselingDate, "Asia/Taipei", "yyyy/MM/dd");
    
    tableRows += `
      <tr class="${warningClass}">
        <td>${client.name}</td>
        <td>${formattedDate}</td>
        <td>${client.counselor}</td>
        <td>${client.time}</td>
        <td>${client.room}</td>
        <td>
          <button onclick="markDepositPaid('${client.name}', '${formattedDate}')" 
                  class="btn btn-success btn-sm">
            <i class="bi bi-check-circle"></i> 標記已繳交
          </button>
        </td>
      </tr>
    `;
  });
  
  const html = `
    <!DOCTYPE html>
    <html>
    <head>
      <base target="_top">
      <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
      <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.8.1/font/bootstrap-icons.css">
      <style>
        body { padding: 20px; }
        .table-container {
          max-height: 500px;
          overflow-y: auto;
        }
        .warning-legend {
          margin: 20px 0;
          padding: 10px;
          border-radius: 4px;
          background-color: #f8f9fa;
        }
        .warning-item {
          display: inline-block;
          margin-right: 20px;
        }
        .warning-box {
          display: inline-block;
          width: 20px;
          height: 20px;
          margin-right: 5px;
          vertical-align: middle;
        }
        .red-warning { background-color: #f8d7da; }
        .yellow-warning { background-color: #fff3cd; }
      </style>
    </head>
    <body>
      <div class="container">
        <h2 class="mb-4">保證金檢核</h2>
        
        <div class="warning-legend">
          <div class="warning-item">
            <div class="warning-box red-warning"></div>
            距離諮商日期 1 天內
          </div>
          <div class="warning-item">
            <div class="warning-box yellow-warning"></div>
            距離諮商日期 3 天內
          </div>
        </div>
        
        <div class="table-container">
          <table class="table table-hover">
            <thead>
              <tr>
                <th>個案姓名</th>
                <th>諮商日期</th>
                <th>服務心理師</th>
                <th>諮商時間</th>
                <th>諮商空間</th>
                <th>操作</th>
              </tr>
            </thead>
            <tbody>
              ${tableRows}
            </tbody>
          </table>
        </div>
        
        ${generateLoadingIndicatorHTML()}
      </div>
      
      <script>
        function markDepositPaid(clientName, date) {
          // 顯示加載指示器
          showLoading();
          
          google.script.run
            .withSuccessHandler(function(result) {
              // 隱藏加載指示器
              hideLoading();
              
              if (result.success) {
                // 移除對應的行
                const rows = document.querySelectorAll('tr');
                rows.forEach(row => {
                  if (row.cells[0].textContent === clientName && 
                      row.cells[1].textContent === date) {
                    row.remove();
                  }
                });
                
                // 如果沒有更多未繳費記錄，顯示訊息
                if (document.querySelectorAll('tbody tr').length === 0) {
                  document.querySelector('tbody').innerHTML = 
                    '<tr><td colspan="6" class="text-center">沒有未繳交保證金的記錄</td></tr>';
                }
              } else {
                alert(result.message || '操作失敗，請稍後再試');
              }
            })
            .withFailureHandler(function(error) {
              // 隱藏加載指示器
              hideLoading();
              alert('發生錯誤：' + error);
            })
            .showDepositPaymentDialog();
        }
      </script>
    </body>
    </html>
  `;
  
  const ui = HtmlService.createHtmlOutput(html)
    .setWidth(800)
    .setHeight(600);
    
  SpreadsheetApp.getUi().showModalDialog(ui, '保證金檢核');
}

/**
 * 獲取未繳保證金的個案資料
 * @return {Array} 未繳保證金的個案資料陣列
 */
function getUnpaidDeposits() {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName("登錄資料");
    const data = sheet.getDataRange().getValues();
    
    const unpaidClients = [];
    const today = new Date();
    
    // 從第二行開始遍歷（跳過標題行）
    for (let i = 1; i < data.length; i++) {
      const depositStatus = data[i][7]; // H列 - 保證金狀態
      const counselingDate = new Date(data[i][2]); // C列 - 諮商日期
      
      // 只檢查明確標記為"未繳納"的記錄，且諮商日期要在今天或之後
      if (depositStatus === '未繳納' && counselingDate >= today) {
        unpaidClients.push({
          name: data[i][1],      // B列 - 個案姓名
          date: counselingDate,   // C列 - 諮商日期
          counselor: data[i][3],  // D列 - 服務心理師
          time: data[i][5],      // F列 - 諮商時間
          room: data[i][6]       // G列 - 諮商空間
        });
      }
    }
    
    // 按日期排序
    unpaidClients.sort((a, b) => a.date - b.date);
    
    return unpaidClients;
  } catch (error) {
    Logger.log("獲取未繳保證金資料時出錯: " + error.toString());
    return [];
  }
}

/**
 * 顯示保證金檢核對話框
 */
function showDepositCheck() {
  // 獲取未繳保證金的個案資料
  const unpaidDeposits = getUnpaidDeposits();
  
  // 生成表格行
  let tableRows = '';
  if (unpaidDeposits.length === 0) {
    tableRows = '<tr><td colspan="6" class="text-center">目前沒有未繳交保證金的個案</td></tr>';
  } else {
    unpaidDeposits.forEach(client => {
      // 計算距離諮商日期的天數
      const today = new Date();
      today.setHours(0, 0, 0, 0); // 設置為當天開始時間
      const counselingDate = new Date(client.date);
      counselingDate.setHours(0, 0, 0, 0); // 設置為當天開始時間
      const daysUntilCounseling = Math.ceil((counselingDate - today) / (1000 * 60 * 60 * 24));
      
      // 決定警示等級
      let warningClass = '';
      let warningText = '';
      if (daysUntilCounseling <= 1) {
        warningClass = 'table-danger';
        warningText = '（緊急）';
      } else if (daysUntilCounseling <= 3) {
        warningClass = 'table-warning';
        warningText = '（注意）';
      }
      
      // 格式化日期和時間
      const formattedDate = Utilities.formatDate(counselingDate, "Asia/Taipei", "yyyy/MM/dd");
      
      tableRows += `
        <tr class="${warningClass}">
          <td>${client.name}</td>
          <td>${formattedDate} ${warningText}</td>
          <td>${client.counselor}</td>
          <td>${client.time}</td>
          <td>${client.room}</td>
          <td>
            <button onclick="markDepositPaid('${client.name}', '${formattedDate}')" 
                    class="btn btn-success btn-sm">
              <i class="bi bi-check-circle"></i> 標記已繳交
            </button>
          </td>
        </tr>
      `;
    });
  }
  
  const html = `
    <!DOCTYPE html>
    <html>
    <head>
      <base target="_top">
      <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
      <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.8.1/font/bootstrap-icons.css">
      <style>
        body { padding: 20px; }
        .table-container {
          max-height: 500px;
          overflow-y: auto;
        }
        .warning-legend {
          margin: 20px 0;
          padding: 10px;
          border-radius: 4px;
          background-color: #f8f9fa;
        }
        .warning-item {
          display: inline-block;
          margin-right: 20px;
        }
        .warning-box {
          display: inline-block;
          width: 20px;
          height: 20px;
          margin-right: 5px;
          vertical-align: middle;
        }
        .red-warning { background-color: #f8d7da; }
        .yellow-warning { background-color: #fff3cd; }
      </style>
    </head>
    <body>
      <div class="container">
        <h2 class="mb-4">保證金檢核</h2>
        
        <div class="warning-legend">
          <div class="warning-item">
            <div class="warning-box red-warning"></div>
            距離諮商日期 1 天內（緊急）
          </div>
          <div class="warning-item">
            <div class="warning-box yellow-warning"></div>
            距離諮商日期 3 天內（注意）
          </div>
        </div>
        
        <div class="table-container">
          <table class="table table-hover">
            <thead>
              <tr>
                <th>個案姓名</th>
                <th>諮商日期</th>
                <th>服務心理師</th>
                <th>諮商時間</th>
                <th>諮商空間</th>
                <th>操作</th>
              </tr>
            </thead>
            <tbody>
              ${tableRows}
            </tbody>
          </table>
        </div>
        
        ${generateLoadingIndicatorHTML()}
      </div>
      
      <script>
        function markDepositPaid(clientName, date) {
          // 顯示加載指示器
          showLoading();
          
          google.script.run
            .withSuccessHandler(function(result) {
              // 隱藏加載指示器
              hideLoading();
              
              if (result.success) {
                // 重新載入頁面以更新清單
                google.script.run.showDepositCheck();
              } else {
                alert(result.message || '操作失敗，請稍後再試');
              }
            })
            .withFailureHandler(function(error) {
              // 隱藏加載指示器
              hideLoading();
              alert('發生錯誤：' + error);
            })
            .showDepositPaymentDialog();
        }
      </script>
    </body>
    </html>
  `;
  
  const ui = HtmlService.createHtmlOutput(html)
    .setWidth(800)
    .setHeight(600);
    
  SpreadsheetApp.getUi().showModalDialog(ui, '保證金檢核');
}


/**
 * 從服務方案對照表獲取正式名稱
 * @param {string} serviceTypeCode - 服務方案代碼/簡寫
 * @return {string} 服務方案的正式名稱
 */
function getServiceTypeDisplayName(serviceTypeCode) {
  try {
    // 取得服務方案對照表
    const serviceTypesSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('服務方案對照表');
    
    if (!serviceTypesSheet) {
      Logger.log("找不到服務方案對照表");
      return serviceTypeCode;
    }
    
    const data = serviceTypesSheet.getDataRange().getValues();
    
    // 標準化搜尋的服務方案名稱
    const normalizedCode = serviceTypeCode.trim().toLowerCase();
    
    // 從第2行開始查找（假設第1行是標題）
    for (let i = 1; i < data.length; i++) {
      if (!data[i][0]) continue; // 跳過空值
      
      // 標準化表格中的名稱以進行更寬鬆的比較
      const normalizedName = data[i][0].trim().toLowerCase();
      
      // 完全匹配或包含關係
      if (normalizedName === normalizedCode || 
          normalizedName.includes(normalizedCode) || 
          normalizedCode.includes(normalizedName)) {
        Logger.log(`找到服務方案匹配: "${data[i][0]}" → "${data[i][1]}"`);
        return data[i][1] || serviceTypeCode;  // B欄是正式顯示名稱
      }
    }
    
    Logger.log(`找不到匹配的服務方案名稱，返回原始值: ${serviceTypeCode}`);
    return serviceTypeCode;
  } catch (error) {
    Logger.log(`獲取服務方案顯示名稱時發生錯誤：${error.toString()}`);
    return serviceTypeCode;
  }
}

/**
 * 從心理師對照表獲取正式名稱
 * @param {string} counselorCode - 心理師代碼/簡稱
 * @return {string} 心理師的正式名稱
 */
function getCounselorDisplayName(counselorCode) {
  try {
    // 取得心理師對照表
    const counselorsSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('心理師對照表');
    
    // 確認表格存在
    if (!counselorsSheet) {
      Logger.log("找不到心理師對照表");
      return counselorCode;
    }
    
    const data = counselorsSheet.getDataRange().getValues();
    
    // 記錄表格內容進行調試
    Logger.log("心理師對照表內容：");
    for (let i = 0; i < Math.min(data.length, 5); i++) {
      Logger.log(`行 ${i+1}: ${JSON.stringify(data[i])}`);
    }
    
    // 標準化搜尋的心理師名稱
    const normalizedCode = counselorCode.trim().toLowerCase();
    
    // 從第2行開始查找（假設第1行是標題）
    for (let i = 1; i < data.length; i++) {
      if (!data[i][0]) continue; // 跳過空值
      
      // 標準化表格中的名稱以進行更寬鬆的比較
      const normalizedName = data[i][0].trim().toLowerCase();
      
      // 完全匹配或包含關係
      if (normalizedName === normalizedCode || 
          normalizedName.includes(normalizedCode) || 
          normalizedCode.includes(normalizedName)) {
        Logger.log(`找到心理師匹配: "${data[i][0]}" → "${data[i][1]}"`);
        return data[i][1] || counselorCode;  // B欄是正式顯示名稱
      }
    }
    
    Logger.log(`找不到匹配的心理師名稱，返回原始值: ${counselorCode}`);
    return counselorCode;
  } catch (error) {
    Logger.log(`獲取心理師顯示名稱時發生錯誤：${error.toString()}`);
    return counselorCode;
  }
}

/**
 * 從服務方案對照表獲取正式名稱
 * @param {string} serviceTypeCode - 服務方案代碼/簡寫
 * @return {string} 服務方案的正式名稱
 */
function getServiceTypeDisplayName(serviceTypeCode) {
  // 取得服務方案對照表
  const serviceTypesSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('服務方案對照表');
  const data = serviceTypesSheet.getDataRange().getValues();
  
  // 從第2行開始查找（假設第1行是標題）
  for (let i = 1; i < data.length; i++) {
    if (data[i][0] === serviceTypeCode) {  // A欄是代碼/簡寫
      return data[i][1];  // B欄是正式名稱
    }
  }
  
  // 如果找不到對應的正式名稱，則返回原始代碼
  return serviceTypeCode;
}

/**
 * 從心理師對照表獲取正式名稱
 * @param {string} counselorCode - 心理師代碼/簡稱
 * @return {string} 心理師的正式名稱
 */
function getCounselorDisplayName(counselorCode) {
  try {
    // 取得心理師對照表
    const counselorsSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('心理師對照表');
    
    // 確認表格存在
    if (!counselorsSheet) {
      Logger.log("找不到心理師對照表");
      return counselorCode;
    }
    
    const data = counselorsSheet.getDataRange().getValues();
    
    // 記錄表格內容進行調試
    Logger.log("心理師對照表內容：");
    for (let i = 0; i < Math.min(data.length, 5); i++) {
      Logger.log(`行 ${i+1}: ${JSON.stringify(data[i])}`);
    }
    
    // 標準化搜尋的心理師名稱
    const normalizedCode = counselorCode.trim().toLowerCase();
    
    // 從第2行開始查找（假設第1行是標題）
    for (let i = 1; i < data.length; i++) {
      if (!data[i][0]) continue; // 跳過空值
      
      // 標準化表格中的名稱以進行更寬鬆的比較
      const normalizedName = data[i][0].trim().toLowerCase();
      
      // 完全匹配或包含關係
      if (normalizedName === normalizedCode || 
          normalizedName.includes(normalizedCode) || 
          normalizedCode.includes(normalizedName)) {
        Logger.log(`找到心理師匹配: "${data[i][0]}" → "${data[i][1]}"`);
        return data[i][1] || counselorCode;  // B欄是正式顯示名稱
      }
    }
    
    Logger.log(`找不到匹配的心理師名稱，返回原始值: ${counselorCode}`);
    return counselorCode;
  } catch (error) {
    Logger.log(`獲取心理師顯示名稱時發生錯誤：${error.toString()}`);
    return counselorCode;
  }
}


/**
 * 保存訊息歷史記錄
 * @param {string} clientName - 個案姓名
 * @param {string} messageType - 訊息類型
 * @param {string} message - 訊息內容
 */
function saveMessageHistory(clientName, messageType, message) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    let sheet = ss.getSheetByName("訊息歷史記錄");
    
    // 如果表格不存在，則創建
    if (!sheet) {
      sheet = ss.insertSheet("訊息歷史記錄");
      sheet.appendRow(["時間戳記", "個案姓名", "訊息類型", "訊息內容"]);
      sheet.getRange(1, 1, 1, 4).setFontWeight("bold");
    }
    
    // 添加新記錄
    sheet.appendRow([new Date(), clientName, messageType, message]);
    
  } catch (error) {
    Logger.log("保存訊息歷史記錄時出錯: " + error.toString());
  }
}

/**
 * 顯示訊息歷史記錄
 */
function showMessageHistory() {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName("訊息歷史記錄");
    
    if (!sheet || sheet.getLastRow() <= 1) {
      SpreadsheetApp.getUi().alert("沒有找到訊息歷史記錄");
      return;
    }
    
    // 獲取歷史記錄
    const data = sheet.getRange(2, 1, sheet.getLastRow() - 1, 4).getValues();
    
    // 生成HTML列表
    let tableRows = '';
    data.forEach(function(row, index) {
      const timestamp = Utilities.formatDate(new Date(row[0]), "Asia/Taipei", "yyyy/MM/dd HH:mm");
      const clientName = row[1] || '';
      const messageType = row[2] || '';
      const message = row[3] || '';
      
      tableRows += `
        <tr>
          <td>${timestamp}</td>
          <td>${clientName}</td>
          <td>${getMessageTypeName(messageType)}</td>
          <td>
            <button onclick="showMessage(${index})" style="background-color: #4285f4; color: white; border: none; padding: 5px 10px; border-radius: 4px; cursor: pointer;">
              查看內容
            </button>
          </td>
        </tr>`;
    });
    
    // 生成消息內容JSON
    const messagesJson = JSON.stringify(data.map(row => row[3]));
    
    const html = `
      <!DOCTYPE html>
      <html>
      <head>
        <base target="_top">
        <style>
          body { font-family: Arial, sans-serif; padding: 20px; }
          table { width: 100%; border-collapse: separate; }
          border-spacing: 0;
          th, td { padding: 8px; text-align: left; border-bottom: 1px solid #ddd; }
          th { background-color: #f2f2f2; }
          .message-modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.5);
            z-index: 100;
          }
          .message-content {
            background-color: white;
            margin: 10% auto;
            padding: 20px;
            border-radius: 5px;
            width: 80%;
            max-width: 600px;
          }
          .close-btn {
            float: right;
            cursor: pointer;
            font-size: 20px;
          }
          .filter-container {
            margin-bottom: 20px;
          }
          .message-text {
            white-space: pre-line;
            margin: 20px 0;
          }
        </style>
      </head>
      <body>
        <h2>訊息歷史記錄</h2>
        
        <div class="filter-container">
          <input type="text" id="clientFilter" placeholder="輸入個案姓名..." style="padding: 8px; width: 200px;">
          <button onclick="applyFilter()" style="background-color: #4285f4; color: white; border: none; padding: 8px 15px; border-radius: 4px; cursor: pointer; margin-left: 10px;">
            搜尋
          </button>
          <button onclick="resetFilter()" style="background-color: #f1f1f1; border: none; padding: 8px 15px; border-radius: 4px; cursor: pointer; margin-left: 10px;">
            重置
          </button>
        </div>
        
        <table id="messageTable">
          <thead>
            <tr>
              <th>時間</th>
              <th>個案姓名</th>
              <th>訊息類型</th>
              <th>操作</th>
            </tr>
          </thead>
          <tbody>
            ${tableRows}
          </tbody>
        </table>
        
        <div id="messageModal" class="message-modal">
          <div class="message-content">
            <span class="close-btn" onclick="closeModal()">&times;</span>
            <h3>訊息內容</h3>
            <div id="messageText" class="message-text"></div>
          </div>
        </div>
        
        <script>
          // 保存所有消息
          const messages = ${messagesJson};
          const originalTableContent = document.getElementById('messageTable').innerHTML;
          
          function showMessage(index) {
            const modal = document.getElementById('messageModal');
            const messageText = document.getElementById('messageText');
            messageText.textContent = messages[index];
            modal.style.display = 'block';
          }
          
          function closeModal() {
            document.getElementById('messageModal').style.display = 'none';
          }
          
          function applyFilter() {
            const filterText = document.getElementById('clientFilter').value.toLowerCase();
            const tableRows = document.querySelectorAll('#messageTable tbody tr');
            
            tableRows.forEach(row => {
              const clientName = row.cells[1].textContent.toLowerCase();
              if (clientName.includes(filterText)) {
                row.style.display = '';
              } else {
                row.style.display = 'none';
              }
            });
          }
          
          function resetFilter() {
            document.getElementById('clientFilter').value = '';
            document.getElementById('messageTable').innerHTML = originalTableContent;
          }
          
          // 點擊其他地方關閉彈窗
          window.onclick = function(event) {
            const modal = document.getElementById('messageModal');
            if (event.target == modal) {
              modal.style.display = 'none';
            }
          }
        </script>
      </body>
      </html>
    `;
    
    var ui = HtmlService.createHtmlOutput(html)
      .setWidth(800)
      .setHeight(600);
      
    SpreadsheetApp.getUi().showModalDialog(ui, '訊息歷史記錄');
  } catch (error) {
    Logger.log("顯示訊息歷史記錄時出錯: " + error.toString());
    SpreadsheetApp.getUi().alert("顯示訊息歷史時發生錯誤: " + error.toString());
  }
}


/**
 * 獲取訊息類型名稱
 */
function getMessageTypeName(type) {
  switch (type) {
    case 'firstAppointment': return '初次預約';
    case 'renewal': return '續約通知';
    case 'deposit': return '保證金通知';
    case 'cancel': return '取消預約';
    default: return type;
  }
}


/**
 * 獲取所有客戶名單
 * @return {Array<string>} 客戶名單
 */
function getClientList() {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const clientSet = new Set();
    
    // 1. 從「登錄資料」表格獲取客戶名稱
    const dataSheet = ss.getSheetByName("登錄資料");
    if (dataSheet) {
      const data = dataSheet.getDataRange().getValues();
      
      // 假設客戶名稱在第2列（索引1）
      for (let i = 1; i < data.length; i++) {
        if (data[i][1] && typeof data[i][1] === 'string' && data[i][1].trim() !== '') {
          clientSet.add(data[i][1].trim());
        }
      }
    }
    
    // 2. 從「個案服務記錄」表格獲取客戶名稱
    const recordSheet = ss.getSheetByName("個案服務記錄");
    if (recordSheet) {
      const records = recordSheet.getDataRange().getValues();
      
      // 假設客戶名稱在第1列（索引0）
      for (let i = 1; i < records.length; i++) {
        if (records[i][0] && typeof records[i][0] === 'string' && records[i][0].trim() !== '') {
          clientSet.add(records[i][0].trim());
        }
      }
    }
    
    // 3. 從「訊息歷史記錄」表格獲取客戶名稱
    const messageSheet = ss.getSheetByName("訊息歷史記錄");
    if (messageSheet) {
      const messages = messageSheet.getDataRange().getValues();
      
      // 假設客戶名稱在第2列（索引1）
      for (let i = 1; i < messages.length; i++) {
        if (messages[i][1] && typeof messages[i][1] === 'string' && messages[i][1].trim() !== '') {
          clientSet.add(messages[i][1].trim());
        }
      }
    }
    
    // 如果找不到任何名單，返回空數組
    if (clientSet.size === 0) {
      Logger.log("警告：找不到任何個案名單");
      return [];
    }
    
    // 轉換為數組並排序（按中文或英文字母順序）
    const clientList = Array.from(clientSet).sort((a, b) => {
      return a.localeCompare(b, 'zh-TW');
    });
    
    Logger.log(`成功獲取 ${clientList.length} 位個案名單`);
    return clientList;
  } catch (error) {
    Logger.log("獲取客戶名單時出錯: " + error.toString());
    return [];
  }
}

/**
 * 獲取個案的歷史服務記錄（支持模糊匹配）
 * @param {string} clientName - 個案姓名
 * @return {Object} 個案歷史服務記錄
 */
function getClientServiceHistory(clientName) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    
    // 創建標準化服務類型的映射表
    const serviceTypeMap = getServiceTypeMapping();
    
    // 創建統計物件
    const clientHistory = {};
    
    // 首先從「個案服務記錄」表格中獲取預設次數
    const recordSheet = ss.getSheetByName("個案服務記錄");
    if (recordSheet) {
      const records = recordSheet.getDataRange().getValues();
      // 跳過標題行
      for (let i = 1; i < records.length; i++) {
        const name = records[i][0];
        // 進行完全匹配或部分匹配
        if (name && 
            (name === clientName || 
             name.includes(clientName) || 
             clientName.includes(name) ||
             areSimilarNames(name, clientName))) {
          
          let serviceType = records[i][1];
          // 標準化服務類型
          serviceType = standardizeServiceType(serviceType, serviceTypeMap);
          const count = parseInt(records[i][2]);
          
          // 使用標準化後的服務類型作為鍵
          clientHistory[serviceType] = count;
        }
      }
    }
    
    // 然後從實際登錄資料中計算次數
    const dataSheet = ss.getSheetByName("登錄資料");
    if (dataSheet) {
      const data = dataSheet.getDataRange().getValues();
      
      // 跳過標題行
      for (let i = 1; i < data.length; i++) {
        const name = data[i][1];
        // 進行完全匹配或部分匹配
        if (name && 
            (name === clientName || 
             name.includes(clientName) || 
             clientName.includes(name) ||
             areSimilarNames(name, clientName))) {
          
          let serviceType = data[i][4];
          if (serviceType) {
            // 標準化服務類型
            serviceType = standardizeServiceType(serviceType, serviceTypeMap);
            
            // 使用標準化後的服務類型作為鍵
            clientHistory[serviceType] = (clientHistory[serviceType] || 0) + 1;
          }
        }
      }
    }
    
    return clientHistory;
  } catch (error) {
    Logger.log("獲取個案歷史記錄錯誤：" + error.toString());
    return {};
  }
}

/**
 * 檢查兩個名字是否相似
 * @param {string} name1 - 第一個名字
 * @param {string} name2 - 第二個名字
 * @return {boolean} 是否相似
 */
function areSimilarNames(name1, name2) {
  // 移除空格並轉為小寫進行比較
  const cleanName1 = name1.replace(/\s+/g, '').toLowerCase();
  const cleanName2 = name2.replace(/\s+/g, '').toLowerCase();
  
  // 如果清理後的名字相同，則視為相似
  if (cleanName1 === cleanName2) return true;
  
  // 漢字姓名特殊處理 - 檢查是否包含對方的所有字
  let containsAllChars = true;
  for (let char of cleanName1) {
    if (!cleanName2.includes(char)) {
      containsAllChars = false;
      break;
    }
  }
  if (containsAllChars) return true;
  
  containsAllChars = true;
  for (let char of cleanName2) {
    if (!cleanName1.includes(char)) {
      containsAllChars = false;
      break;
    }
  }
  
  return containsAllChars;
}

/**
 * 查看待辦事項 - 主入口函數
 */
function viewClientTodos() {
  const ui = SpreadsheetApp.getUi();
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sheet = ss.getSheetByName("個案待辦事項");
  
  // 獲取進度選項和客戶名單
  const statusOptions = getStatusOptions();
  const clientNames = getClientList();
  
  // 如果表格不存在，創建它
  if (!sheet) {
    createClientTodoSheet();
    ui.alert("已創建待辦事項表格，但目前沒有記錄");
  }
  
  // 獲取所有待辦事項
  const data = getTodoData();
  
  // 轉換數據為JSON
  const jsonData = JSON.stringify(formatTodoData(data));
  
  // 創建選項HTML
  let statusOptionsHtml = statusOptions.map(status => 
    `<option value="${status}">${status}</option>`).join('');
  let clientOptionsHtml = clientNames.map(name => 
    `<option value="${name}">${name}</option>`).join('');
  
  // 創建HTML
  const htmlContent = generateTodoHtml(statusOptionsHtml, clientOptionsHtml, jsonData);
  
  // 顯示對話框
  const html = HtmlService.createHtmlOutput(htmlContent)
    .setWidth(1200)
    .setHeight(700)
    .setTitle('個案待辦事項管理');
    
  ui.showModalDialog(html, '個案待辦事項管理');
}

/**
 * 獲取待辦事項資料
 * @return {Array} 待辦事項資料
 */
function getTodoData() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sheet = ss.getSheetByName("個案待辦事項");
  
  if (!sheet || sheet.getLastRow() <= 1) {
    return [];
  }
  
  return sheet.getRange(2, 1, Math.max(1, sheet.getLastRow() - 1), 8).getValues();
}

/**
 * 格式化待辦事項資料
 * @param {Array} data - 原始資料
 * @return {Array} 格式化後的資料
 */
function formatTodoData(data) {
  return data.map(row => ({
    timestamp: row[0] ? Utilities.formatDate(new Date(row[0]), "Asia/Taipei", "yyyy/MM/dd HH:mm") : '',
    clientName: row[1] || '',
    status: row[2] || '',
    notes: row[3] || '',
    deadline: row[4] ? Utilities.formatDate(new Date(row[4]), "Asia/Taipei", "yyyy/MM/dd") : '',
    priority: row[5] || '',
    assignedTo: row[6] || '',
    completedTime: row[7] ? Utilities.formatDate(new Date(row[7]), "Asia/Taipei", "yyyy/MM/dd HH:mm") : ''
  }));
}

/**
 * 生成待辦事項HTML內容
 * @param {string} statusOptionsHtml - 狀態選項HTML
 * @param {string} clientOptionsHtml - 客戶選項HTML
 * @param {string} jsonData - JSON格式的待辦事項資料
 * @return {string} HTML內容
 */
function generateTodoHtml(statusOptionsHtml, clientOptionsHtml, jsonData) {
  return `
    <!DOCTYPE html>
    <html>
    <head>
      <base target="_top">
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
      <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.8.1/font/bootstrap-icons.css">
      <style>
        ${generateTodoCss()}
      </style>
    </head>
    <body>
      <div class="container">
        <h2 class="mb-4">個案待辦事項管理</h2>
        
        <!-- 分頁標籤 -->
        <ul class="nav nav-tabs mb-4" id="myTab" role="tablist">
          <li class="nav-item" role="presentation">
            <button class="nav-link active" id="active-tab" data-bs-toggle="tab" data-bs-target="#active" type="button" role="tab" aria-controls="active" aria-selected="true">
              <i class="bi bi-list-task"></i> 進行中的待辦
            </button>
          </li>
          <li class="nav-item" role="presentation">
            <button class="nav-link" id="completed-tab" data-bs-toggle="tab" data-bs-target="#completed" type="button" role="tab" aria-controls="completed" aria-selected="false">
              <i class="bi bi-check2-all"></i> 已完成的待辦
            </button>
          </li>
          <li class="nav-item" role="presentation">
            <button class="nav-link" id="add-tab" data-bs-toggle="tab" data-bs-target="#add" type="button" role="tab" aria-controls="add" aria-selected="false">
              <i class="bi bi-plus-circle"></i> 新增待辦
            </button>
          </li>
        </ul>
        
        <div class="tab-content" id="myTabContent">
          <!-- 進行中的待辦 -->
          ${generateActiveTabHtml(statusOptionsHtml, clientOptionsHtml)}
          
          <!-- 已完成的待辦 -->
          ${generateCompletedTabHtml(clientOptionsHtml)}
          
          <!-- 新增待辦 -->
          ${generateAddTabHtml(statusOptionsHtml, clientOptionsHtml)}
        </div>
        
        <!-- 編輯備註的彈窗 -->
        ${generateEditNotesModalHtml()}
      </div>
      
      <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
      <script>
        ${generateTodoJavaScript(jsonData)}
      </script>
    </body>
    </html>
  `;
}

/**
 * 創建待辦事項UI
 * @return {HtmlOutput} HTML輸出
 */
function createTodoUI() {
  // 獲取進度選項和客戶名單
  const statusOptions = getStatusOptions();
  const clientNames = getClientList();
  
  // 創建選項HTML
  let statusOptionsHtml = statusOptions.map(status => 
    `<option value="${status}">${status}</option>`).join('');
  let clientOptionsHtml = clientNames.map(name => 
    `<option value="${name}">${name}</option>`).join('');
  
  // 獲取所有待辦事項
  const data = getTodoData();
  
  // 轉換數據為JSON
  const jsonData = JSON.stringify(formatTodoData(data));
  
  // 創建HTML
  const htmlContent = generateTodoHtml(statusOptionsHtml, clientOptionsHtml, jsonData);
  
  return HtmlService.createHtmlOutput(htmlContent);
}

/**
 * 獲取待辦事項資料
 * @return {Array} 待辦事項資料
 */
function getTodoData() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sheet = ss.getSheetByName("個案待辦事項");
  
  if (!sheet || sheet.getLastRow() <= 1) {
    return [];
  }
  
  return sheet.getRange(2, 1, Math.max(1, sheet.getLastRow() - 1), 8).getValues();
}

/**
 * 格式化待辦事項資料
 * @param {Array} data - 原始資料
 * @return {Array} 格式化後的資料
 */
function formatTodoData(data) {
  return data.map(row => ({
    timestamp: row[0] ? Utilities.formatDate(new Date(row[0]), "Asia/Taipei", "yyyy/MM/dd HH:mm") : '',
    clientName: row[1] || '',
    status: row[2] || '',
    notes: row[3] || '',
    deadline: row[4] ? Utilities.formatDate(new Date(row[4]), "Asia/Taipei", "yyyy/MM/dd") : '',
    priority: row[5] || '',
    assignedTo: row[6] || '',
    completedTime: row[7] ? Utilities.formatDate(new Date(row[7]), "Asia/Taipei", "yyyy/MM/dd HH:mm") : ''
  }));
}

/**
 * 生成待辦事項HTML內容
 * @param {string} statusOptionsHtml - 狀態選項HTML
 * @param {string} clientOptionsHtml - 客戶選項HTML
 * @param {string} jsonData - JSON格式的待辦事項資料
 * @return {string} HTML內容
 */
function generateTodoHtml(statusOptionsHtml, clientOptionsHtml, jsonData) {
  return `
    <!DOCTYPE html>
    <html>
    <head>
      <base target="_top">
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
      <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.8.1/font/bootstrap-icons.css">
      <style>
        ${generateTodoCss()}
      </style>
    </head>
    <body>
      <div class="container">
        <h2 class="mb-4">個案待辦事項管理</h2>
        
        <!-- 分頁標籤 -->
        <ul class="nav nav-tabs mb-4" id="myTab" role="tablist">
          <li class="nav-item" role="presentation">
            <button class="nav-link active" id="active-tab" data-bs-toggle="tab" data-bs-target="#active" type="button" role="tab" aria-controls="active" aria-selected="true">
              <i class="bi bi-list-task"></i> 進行中的待辦
            </button>
          </li>
          <li class="nav-item" role="presentation">
            <button class="nav-link" id="completed-tab" data-bs-toggle="tab" data-bs-target="#completed" type="button" role="tab" aria-controls="completed" aria-selected="false">
              <i class="bi bi-check2-all"></i> 已完成的待辦
            </button>
          </li>
          <li class="nav-item" role="presentation">
            <button class="nav-link" id="add-tab" data-bs-toggle="tab" data-bs-target="#add" type="button" role="tab" aria-controls="add" aria-selected="false">
              <i class="bi bi-plus-circle"></i> 新增待辦
            </button>
          </li>
        </ul>
        
        <div class="tab-content" id="myTabContent">
          <!-- 進行中的待辦 -->
          ${generateActiveTabHtml(statusOptionsHtml, clientOptionsHtml)}
          
          <!-- 已完成的待辦 -->
          ${generateCompletedTabHtml(clientOptionsHtml)}
          
          <!-- 新增待辦 -->
          ${generateAddTabHtml(statusOptionsHtml, clientOptionsHtml)}
        </div>
        
        <!-- 編輯備註的彈窗 -->
        ${generateEditNotesModalHtml()}
      </div>
      
      <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
      <script>
        ${generateTodoJavaScript(jsonData)}
      </script>
    </body>
    </html>
  `;
}

/**
 * 生成待辦事項CSS樣式
 */
function generateTodoCss() {
  return `
    body {
      font-family: Arial, sans-serif;
      margin: 0;
      padding: 20px;
      background-color: #f8f9fa;
    }
    .container {
      max-width: 1200px;
      margin: 0 auto;
    }
    .card {
      border-radius: 8px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      margin-bottom: 20px;
    }
    .card-header {
      background-color: #f8f9fa;
      border-bottom: 1px solid rgba(0,0,0,0.125);
      padding: 0;
    }
    .table-container {
      overflow: hidden;
      position: relative;
      border-radius: 4px;
      height: calc(100vh - 250px);
      min-height: 500px;
    }
    .table-scroll {
      overflow-y: auto;
      overflow-x: hidden;
      height: 100%;
    }
    .table {
      width: 100%;
      margin-bottom: 0;
      background-color: #fff;
    }
    .table thead th {
      position: sticky;
      top: 0;
      background-color: #f8f9fa;
      z-index: 1;
      border-bottom: 2px solid #dee2e6;
    }
    .table td {
      vertical-align: middle;
    }
    .filter-collapse-btn {
      display: flex;
      align-items: center;
      justify-content: space-between;
      width: 100%;
      text-align: left;
      padding: 10px 15px;
      background: none;
      border: none;
      color: #333;
      cursor: pointer;
    }
    .filter-collapse-btn:hover {
      background-color: rgba(0,0,0,0.02);
    }
    .filter-collapse-btn i {
      transition: transform 0.3s ease;
    }
    .filter-collapse-btn.collapsed i {
      transform: rotate(-180deg);
    }
    .filter-content {
      padding: 15px;
      border-top: 1px solid rgba(0,0,0,0.1);
    }
    .filter-title {
      margin: 0;
      font-size: 1rem;
      font-weight: 500;
    }
    .table-scroll::-webkit-scrollbar {
      width: 8px;
      height: 8px;
    }
    .table-scroll::-webkit-scrollbar-track {
      background: #f1f1f1;
      border-radius: 4px;
    }
    .table-scroll::-webkit-scrollbar-thumb {
      background: #888;
      border-radius: 4px;
    }
    .table-scroll::-webkit-scrollbar-thumb:hover {
      background: #555;
    }
    .priority-high { background-color: #ffebee; }
    .priority-medium { background-color: #fff8e1; }
    .priority-low { background-color: #e8f5e9; }
    .status-completed {
      color: #757575;
      text-decoration: line-through;
    }
    .status-canceled {
      background-color: #f5f5f5;
      color: #9e9e9e;
    }
    .status-helper {
      background-color: #e3f2fd !important;
      border-top: 2px solid #bbdefb;
      color: #1976d2;
    }
    .editable {
      cursor: pointer;
      padding: 5px;
      border-radius: 4px;
      transition: background-color 0.2s;
    }
    .editable:hover {
      background-color: #f0f0f0;
    }
    .editable div, .notes-content {
      white-space: pre-line;
      max-height: 100px;
      overflow-y: auto;
    }
    .status-select {
      width: 100%;
      padding: 8px;
      border: 2px solid #cfe2ff;
      border-radius: 4px;
      background-color: #e8f0fe;
      font-size: 14px;
      font-weight: 500;
      color: #333;
    }
    .status-select:hover {
      border-color: #4285f4;
    }
    .status-select:focus {
      border-color: #4285f4;
      outline: none;
      box-shadow: 0 0 0 2px rgba(66,133,244,0.25);
    }
  `;
}

/**
 * 生成進行中待辦標籤頁HTML
 */
function generateActiveTabHtml(statusOptionsHtml, clientOptionsHtml) {
  return `
    <div class="tab-pane fade show active" id="active" role="tabpanel" aria-labelledby="active-tab">
      <div class="card mb-3">
        <div class="card-header">
          <button class="filter-collapse-btn collapsed" type="button" 
                  data-bs-toggle="collapse" data-bs-target="#activeFilterCollapse" 
                  aria-expanded="false" aria-controls="activeFilterCollapse">
            <span class="filter-title">
              <i class="bi bi-funnel me-2"></i>篩選條件
            </span>
            <i class="bi bi-chevron-up"></i>
          </button>
          <div class="collapse" id="activeFilterCollapse">
            <div class="filter-content">
              <div class="row g-3">
                <div class="col-md-3">
                  <div class="form-floating">
                    <select class="form-select" id="clientFilter">
                      <option value="">全部</option>
                      ${clientOptionsHtml}
                    </select>
                    <label for="clientFilter">個案</label>
                  </div>
                </div>
                <div class="col-md-3">
                  <div class="form-floating">
                    <select class="form-select" id="statusFilter">
                      <option value="">全部</option>
                      ${statusOptionsHtml}
                    </select>
                    <label for="statusFilter">進度</label>
                  </div>
                </div>
                <div class="col-md-3">
                  <div class="form-floating">
                    <select class="form-select" id="priorityFilter">
                      <option value="">全部</option>
                      <option value="高">高</option>
                      <option value="中">中</option>
                      <option value="低">低</option>
                    </select>
                    <label for="priorityFilter">優先級</label>
                  </div>
                </div>
                <div class="col-md-3">
                  <div class="d-grid">
                    <button class="btn btn-primary" onclick="applyFilters('active')">
                      <i class="bi bi-funnel"></i> 套用篩選
                    </button>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      
      <div class="card">
        <div class="card-body p-0">
          <div class="table-container">
            <div class="table-scroll">
              <table class="table table-hover mb-0" id="active-todos-table">
                <thead>
                  <tr>
                    <th style="width: 8%">建立時間</th>
                    <th style="width: 10%">個案姓名</th>
                    <th style="width: 12%">目前進度</th>
                    <th style="width: 38%">備註</th>
                    <th style="width: 7%">截止日期</th>
                    <th style="width: 7%">優先級</th>
                    <th style="width: 8%">負責人</th>
                    <th style="width: 10%">操作</th>
                  </tr>
                </thead>
                <tbody>
                  <!-- 動態生成的待辦項目 -->
                </tbody>
              </table>
            </div>
          </div>
          
          <div id="active-empty-state" class="empty-state" style="display: none;">
            <i class="bi bi-inbox"></i>
            <h5>目前沒有進行中的待辦事項</h5>
            <p>點擊「新增待辦」標籤來添加新的待辦事項</p>
          </div>
        </div>
      </div>
    </div>
  `;
}

/**
 * 生成已完成待辦標籤頁HTML
 */
function generateCompletedTabHtml(clientOptionsHtml) {
  return `
    <div class="tab-pane fade" id="completed" role="tabpanel" aria-labelledby="completed-tab">
      <div class="card mb-3">
        <div class="card-header">
          <button class="filter-collapse-btn collapsed" type="button" 
                  data-bs-toggle="collapse" data-bs-target="#completedFilterCollapse" 
                  aria-expanded="false" aria-controls="completedFilterCollapse">
            <span class="filter-title">
              <i class="bi bi-funnel me-2"></i>篩選條件
            </span>
            <i class="bi bi-chevron-up"></i>
          </button>
          <div class="collapse" id="completedFilterCollapse">
            <div class="filter-content">
              <div class="row g-3">
                <div class="col-md-4">
                  <div class="form-floating">
                    <select class="form-select" id="completedClientFilter">
                      <option value="">全部</option>
                      ${clientOptionsHtml}
                    </select>
                    <label for="completedClientFilter">個案</label>
                  </div>
                </div>
                <div class="col-md-4">
                  <div class="form-floating">
                    <input type="date" class="form-control" id="completedDateFilter">
                    <label for="completedDateFilter">完成日期</label>
                  </div>
                </div>
                <div class="col-md-4">
                  <div class="d-grid">
                    <button class="btn btn-primary" onclick="applyFilters('completed')">
                      <i class="bi bi-funnel"></i> 套用篩選
                    </button>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      
      <div class="card">
        <div class="card-body p-0">
          <div class="table-container">
            <div class="table-scroll">
              <table class="table table-hover mb-0" id="completed-todos-table">
                <thead>
                  <tr>
                    <th style="width: 12%">建立時間</th>
                    <th style="width: 15%">個案姓名</th>
                    <th style="width: 43%">備註</th>
                    <th style="width: 15%">完成時間</th>
                    <th style="width: 15%">負責人</th>
                  </tr>
                </thead>
                <tbody>
                  <!-- 動態生成的已完成待辦項目 -->
                </tbody>
              </table>
            </div>
          </div>
          
          <div id="completed-empty-state" class="empty-state" style="display: none;">
            <i class="bi bi-check2-circle"></i>
            <h5>目前沒有已完成的待辦事項</h5>
            <p>當您將待辦事項標記為完成後，它們將會顯示在這裡</p>
          </div>
        </div>
      </div>
    </div>
  `;
}

// 初始化函數
function initializeFilters() {
  // 監聽篩選區域的展開/收合事件
  document.querySelectorAll('.filter-collapse-btn').forEach(btn => {
    btn.addEventListener('click', function() {
      this.classList.toggle('collapsed');
    });
  });

  // 如果有使用中的篩選條件，自動展開篩選區域
  function checkAndExpandFilters(type) {
    const hasActiveFilters = false; // 這裡需要根據您的邏輯來判斷是否有使用中的篩選條件
    if (hasActiveFilters) {
      const collapseId = type === 'active' ? 'activeFilterCollapse' : 'completedFilterCollapse';
      const collapseElement = document.getElementById(collapseId);
      if (collapseElement) {
        const bsCollapse = new bootstrap.Collapse(collapseElement, {
          show: true
        });
      }
    }
  }

  // 檢查兩個標籤頁的篩選狀態
  checkAndExpandFilters('active');
  checkAndExpandFilters('completed');
}


/**
 * 生成新增待辦標籤頁HTML
 * @param {string} statusOptionsHtml - 狀態選項HTML
 * @param {string} clientOptionsHtml - 客戶選項HTML
 * @return {string} HTML內容
 */
function generateAddTabHtml(statusOptionsHtml, clientOptionsHtml) {
  return `
    <div class="tab-pane fade" id="add" role="tabpanel" aria-labelledby="add-tab">
      <div class="card">
        <div class="card-header">
          <h5>新增待辦事項</h5>
        </div>
        <div class="card-body">
          <form id="add-todo-form">
            <div class="row g-3">
              <div class="col-md-6">
                <div class="form-floating">
                  <input type="text" class="form-control" id="new-clientName" list="clientList" required>
                  <datalist id="clientList">
                    ${clientOptionsHtml}
                  </datalist>
                  <label for="new-clientName">個案姓名 *</label>
                </div>
              </div>
              <div class="col-md-6">
                <div class="form-floating">
                  <select class="form-select" id="new-status" required>
                    <option value="">請選擇進度...</option>
                    ${statusOptionsHtml}
                  </select>
                  <label for="new-status">目前進度 *</label>
                </div>
              </div>
              <div class="col-12">
                <div class="form-floating">
                  <textarea class="form-control" id="new-notes" style="height: 100px"></textarea>
                  <label for="new-notes">備註</label>
                </div>
              </div>
              <div class="col-md-4">
                <div class="form-floating">
                  <input type="date" class="form-control" id="new-deadline">
                  <label for="new-deadline">截止日期</label>
                </div>
              </div>
              <div class="col-md-4">
                <div class="form-floating">
                  <select class="form-select" id="new-priority">
                    <option value="低">低</option>
                    <option value="中" selected>中</option>
                    <option value="高">高</option>
                  </select>
                  <label for="new-priority">優先級別</label>
                </div>
              </div>
              <div class="col-md-4">
                <div class="form-floating">
                  <input type="text" class="form-control" id="new-assignedTo">
                  <label for="new-assignedTo">負責人</label>
                </div>
              </div>
              <div class="col-12 text-end">
                <button type="button" class="btn btn-primary" onclick="addNewTodo()">
                  <i class="bi bi-plus-circle"></i> 新增待辦
                </button>
              </div>
            </div>
          </form>
        </div>
      </div>
    </div>
  `;
}

/**
 * 生成編輯備註模態框HTML
 * @return {string} HTML內容
 */
function generateEditNotesModalHtml() {
  return `
    <div class="modal fade" id="editNotesModal" tabindex="-1" aria-labelledby="editNotesModalLabel" aria-hidden="true">
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="editNotesModalLabel">編輯備註</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <div class="mb-3">
              <label for="editNotesText" class="form-label">備註內容</label>
              <textarea class="form-control" id="editNotesText" rows="5" style="height: 150px;"></textarea>
            </div>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">取消</button>
            <button type="button" class="btn btn-primary" onclick="saveNotes()">儲存</button>
          </div>
        </div>
      </div>
    </div>
  `;
}



/**
 * 生成待辦事項JavaScript程式碼
 */
function generateTodoJavaScript(jsonData) {
  return `
    // 解析JSON數據
    const todos = ${jsonData};
    const originalTodos = [...todos];
    let currentEditingTodo = null;
    
    // 在頁面加載時顯示所有待辦事項
    document.addEventListener('DOMContentLoaded', function() {
      renderTodos();
    });
    
    // 渲染所有待辦事項
    function renderTodos() {
      renderActiveTodos(originalTodos);
      renderCompletedTodos(originalTodos);
    }
    
    // 渲染進行中的待辦事項
    function renderActiveTodos(todos) {
      const activeTable = document.getElementById('active-todos-table');
      const activeBody = activeTable.querySelector('tbody');
      activeBody.innerHTML = '';
      
      // 篩選出進行中的待辦事項
      const activeTodos = todos.filter(todo => 
        todo.status !== '已完成' && todo.status !== '已取消');
      
      // 顯示空狀態或表格
      const emptyState = document.getElementById('active-empty-state');
      
      if (activeTodos.length === 0) {
        emptyState.style.display = 'block';
        activeTable.style.display = 'none';
        return;
      } else {
        emptyState.style.display = 'none';
        activeTable.style.display = 'table';
      }
      
      // 先根據狀態和優先級排序
      const statusOrder = {
        '小幫手待確定': 1,  // 放到最後
        '進行中': 0,
        '等待回覆': 0,
        '延遲': 0
      };
      
      const priorityOrder = { '高': 0, '中': 1, '低': 2 };
      
      activeTodos.sort((a, b) => {
        // 首先按狀態排序
        const statusDiff = (statusOrder[a.status] || 0) - (statusOrder[b.status] || 0);
        if (statusDiff !== 0) return statusDiff;
        
        // 如果狀態相同，則按優先級排序
        return priorityOrder[a.priority] - priorityOrder[b.priority];
      });
      
      // 渲染每一行
      activeTodos.forEach(todo => {
        const row = document.createElement('tr');
        
        // 設置行的樣式
        if (todo.status === '小幫手待確定') {
          row.classList.add('status-helper');
        } else {
          if (todo.priority === '高') {
            row.classList.add('priority-high');
          } else if (todo.priority === '中') {
            row.classList.add('priority-medium');
          } else if (todo.priority === '低') {
            row.classList.add('priority-low');
          }
        }
        
        // 檢查截止日期
        let deadlineClass = '';
        let deadlineText = todo.deadline || '';
        
        if (todo.deadline) {
          const today = new Date();
          const deadline = new Date(todo.deadline);
          const diffTime = Math.abs(deadline - today);
          const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
          
          if (deadline < today) {
            deadlineClass = 'deadline-overdue';
            deadlineText += ' (已過期)';
          } else if (diffDays <= 3) {
            deadlineClass = 'deadline-approaching';
            deadlineText += ' (即將到期)';
          }
        }
        
        // 獲取狀態選項
        const statusOptions = getStatusOptions();
        
        row.innerHTML = \`
          <td>\${todo.timestamp}</td>
          <td>\${todo.clientName}</td>
          <td>
            <select class="status-select form-select" onchange="updateStatus('\${todo.timestamp}', '\${todo.clientName}', this.value)">
              \${statusOptions.map(status => 
                \`<option value="\${status}" \${todo.status === status ? 'selected' : ''}>\${status}</option>\`
              ).join('')}
            </select>
          </td>
          <td class="editable" onclick="editNotes('\${todo.timestamp}', '\${todo.clientName}')">
            <div class="notes-content">\${todo.notes || '點擊編輯'}</div>
          </td>
          <td class="\${deadlineClass}">\${deadlineText}</td>
          <td>
            <span class="badge \${todo.priority === '高' ? 'bg-danger' : todo.priority === '中' ? 'bg-warning' : 'bg-info'} badge-priority">
              \${todo.priority}
            </span>
          </td>
          <td>\${todo.assignedTo}</td>
          <td>
            <button onclick="markAsCompleted('\${todo.timestamp}', '\${todo.clientName}')" class="btn btn-sm btn-success">
              <i class="bi bi-check-circle"></i> 完成
            </button>
            <button onclick="deleteTodo('\${todo.timestamp}', '\${todo.clientName}')" class="btn btn-sm btn-danger ms-1">
              <i class="bi bi-trash"></i>
            </button>
          </td>
        \`;
        
        activeBody.appendChild(row);
      });
      
      // 如果有「小幫手待確定」的項目，滾動到底部
      if (activeTodos.some(todo => todo.status === '小幫手待確定')) {
        const tableContainer = activeTable.closest('.table-container');
        if (tableContainer) {
          tableContainer.scrollTop = tableContainer.scrollHeight;
        }
      }
    }
    
    // 渲染已完成的待辦事項
    function renderCompletedTodos(todos) {
      const completedTable = document.getElementById('completed-todos-table');
      const completedBody = completedTable.querySelector('tbody');
      completedBody.innerHTML = '';
      
      // 篩選出已完成的待辦事項
      const completedTodos = todos.filter(todo => 
        todo.status === '已完成' || todo.status === '已取消');
      
      // 顯示空狀態或表格
      const emptyState = document.getElementById('completed-empty-state');
      
      if (completedTodos.length === 0) {
        emptyState.style.display = 'block';
        completedTable.style.display = 'none';
        return;
      } else {
        emptyState.style.display = 'none';
        completedTable.style.display = 'table';
      }
      
      // 按完成時間排序（最新的在前）
      completedTodos.sort((a, b) => {
        if (!a.completedTime) return 1;
        if (!b.completedTime) return -1;
        return new Date(b.completedTime) - new Date(a.completedTime);
      });
      
      // 渲染每一行
      completedTodos.forEach(todo => {
        const row = document.createElement('tr');
        
        // 根據狀態設置樣式
        if (todo.status === '已完成') {
          row.classList.add('status-completed');
        } else if (todo.status === '已取消') {
          row.classList.add('status-canceled');
        }
        
        row.innerHTML = \`
          <td>\${todo.timestamp}</td>
          <td>\${todo.clientName}</td>
          <td><div class="notes-content">\${todo.notes || ''}</div></td>
          <td>\${todo.completedTime}</td>
          <td>\${todo.assignedTo}</td>
        \`;
        
        completedBody.appendChild(row);
      });
    }
    
    // 篩選待辦事項
    function applyFilters(tabType) {
      if (tabType === 'active') {
        const clientFilter = document.getElementById('clientFilter').value;
        const statusFilter = document.getElementById('statusFilter').value;
        const priorityFilter = document.getElementById('priorityFilter').value;
        
        const filteredTodos = originalTodos.filter(todo => {
          // 排除已完成和已取消的項目
          if (todo.status === '已完成' || todo.status === '已取消') return false;
          
          // 應用篩選條件
          const matchesClient = !clientFilter || todo.clientName === clientFilter;
          const matchesStatus = !statusFilter || todo.status === statusFilter;
          const matchesPriority = !priorityFilter || todo.priority === priorityFilter;
          
          return matchesClient && matchesStatus && matchesPriority;
        });
        
        renderActiveTodos(filteredTodos);
      } else if (tabType === 'completed') {
        const clientFilter = document.getElementById('completedClientFilter').value;
        const dateFilter = document.getElementById('completedDateFilter').value;
        
        const filteredTodos = originalTodos.filter(todo => {
          // 只包含已完成和已取消的項目
          if (todo.status !== '已完成' && todo.status !== '已取消') return false;
          
          // 應用篩選條件
          const matchesClient = !clientFilter || todo.clientName === clientFilter;
          
          // 日期篩選
          let matchesDate = true;
          if (dateFilter && todo.completedTime) {
            const completedDate = todo.completedTime.split(' ')[0]; // 只取日期部分
            matchesDate = completedDate === dateFilter;
          }
          
          return matchesClient && matchesDate;
        });
        
        renderCompletedTodos(filteredTodos);
      }
    }
    
    // 標記為已完成
    function markAsCompleted(timestamp, clientName) {
      google.script.run
        .withSuccessHandler(function(result) {
          if (result.success) {
            // 更新本地數據
            const todoIndex = originalTodos.findIndex(todo => 
              todo.timestamp === timestamp && todo.clientName === clientName);
              
            if (todoIndex !== -1) {
              originalTodos[todoIndex].status = '已完成';
              originalTodos[todoIndex].completedTime = new Date().toLocaleString('zh-TW');
            }
            
            // 重新渲染列表
            renderTodos();
            
            // 顯示成功提示
            showToast('待辦事項已標記為完成', 'success');
          } else {
            showToast('操作失敗: ' + result.message, 'danger');
          }
        })
        .markTodoAsCompleted(clientName, timestamp);
    }
    
    // 刪除待辦事項
    function deleteTodo(timestamp, clientName) {
      if (confirm('確定要刪除這個待辦事項嗎？此操作無法撤銷。')) {
        google.script.run
          .withSuccessHandler(function(result) {
            if (result.success) {
              // 從本地數據中刪除
              const todoIndex = originalTodos.findIndex(todo => 
                todo.timestamp === timestamp && todo.clientName === clientName);
                
              if (todoIndex !== -1) {
                originalTodos.splice(todoIndex, 1);
              }
              
              // 重新渲染列表
              renderTodos();
              
              // 顯示成功提示
              showToast('待辦事項已刪除', 'success');
            } else {
              showToast('刪除失敗: ' + result.message, 'danger');
            }
          })
          .deleteTodo(clientName, timestamp);
      }
    }
    
    // 更新待辦事項狀態
    function updateStatus(timestamp, clientName, newStatus) {
      google.script.run
        .withSuccessHandler(function(result) {
          if (result.success) {
            // 更新本地數據
            const todoIndex = originalTodos.findIndex(todo => 
              todo.timestamp === timestamp && todo.clientName === clientName);
              
            if (todoIndex !== -1) {
              originalTodos[todoIndex].status = newStatus;
              
              // 如果狀態改為已完成，設置完成時間
              if (newStatus === '已完成') {
                originalTodos[todoIndex].completedTime = new Date().toLocaleString('zh-TW');
              } else {
                originalTodos[todoIndex].completedTime = '';
              }
            }
            
            // 重新渲染列表
            renderTodos();
            
            // 如果狀態改為「小幫手待確定」，滾動到底部
            if (newStatus === '小幫手待確定') {
              const activeTable = document.getElementById('active-todos-table');
              const tableContainer = activeTable.closest('.table-container');
              if (tableContainer) {
                tableContainer.scrollTop = tableContainer.scrollHeight;
              }
            }
            
            // 顯示成功提示
            showToast('狀態已更新', 'success');
          } else {
            showToast('更新狀態失敗: ' + result.message, 'danger');
          }
        })
        .updateTodoStatus(clientName, timestamp, newStatus);
    }
    
    // 編輯備註
    function editNotes(timestamp, clientName) {
      // 查找對應的待辦事項
      const todo = originalTodos.find(item => 
        item.timestamp === timestamp && item.clientName === clientName);
        
      if (!todo) return;
      
      // 設置當前編輯的待辦事項
      currentEditingTodo = { timestamp, clientName };
      
      // 顯示編輯彈窗
      document.getElementById('editNotesText').value = todo.notes || '';
      const modal = new bootstrap.Modal(document.getElementById('editNotesModal'));
      modal.show();
    }
    
    // 保存備註
    function saveNotes() {
      if (!currentEditingTodo) return;
      
      const newNotes = document.getElementById('editNotesText').value;
      
      google.script.run
        .withSuccessHandler(function(result) {
          if (result.success) {
            // 更新本地數據
            const todoIndex = originalTodos.findIndex(todo => 
              todo.timestamp === currentEditingTodo.timestamp && 
              todo.clientName === currentEditingTodo.clientName);
              
            if (todoIndex !== -1) {
              originalTodos[todoIndex].notes = newNotes;
            }
            
            // 關閉彈窗並重新渲染
            bootstrap.Modal.getInstance(document.getElementById('editNotesModal')).hide();
            renderTodos();
            
            // 顯示成功提示
            showToast('備註已更新', 'success');
          } else {
            showToast('保存備註失敗: ' + result.message, 'danger');
          }
        })
        .updateTodoNotes(currentEditingTodo.clientName, currentEditingTodo.timestamp, newNotes);
    }
    
    // 新增待辦事項
    function addNewTodo() {
      const clientName = document.getElementById('new-clientName').value.trim();
      const status = document.getElementById('new-status').value;
      const notes = document.getElementById('new-notes').value;
      const deadline = document.getElementById('new-deadline').value;
      const priority = document.getElementById('new-priority').value;
      const assignedTo = document.getElementById('new-assignedTo').value;
      
      // 驗證必填欄位
      if (!clientName || !status) {
        showToast('請填寫個案姓名和目前進度', 'warning');
        return;
      }
      
      // 收集表單數據
      const formData = {
        clientName: clientName,
        status: status,
        notes: notes,
        deadline: deadline,
        priority: priority,
        assignedTo: assignedTo
      };
      
      // 提交表單
      google.script.run
        .withSuccessHandler(function(result) {
          if (result.success) {
            // 清空表單
            document.getElementById('new-clientName').value = '';
            document.getElementById('new-status').selectedIndex = 0;
            document.getElementById('new-notes').value = '';
            document.getElementById('new-deadline').value = '';
            document.getElementById('new-priority').selectedIndex = 1; // 重置為"中"
            document.getElementById('new-assignedTo').value = '';
            
            // 添加新待辦到本地數據
            if (result.newTodo) {
              originalTodos.push(result.newTodo);
              
              // 切換到進行中的待辦分頁並重新渲染
              document.getElementById('active-tab').click();
              renderTodos();
              
              // 顯示成功提示
              showToast('待辦事項已成功新增', 'success');
            } else {
              // 如果沒有返回新待辦，重新加載頁面
              location.reload();
            }
          } else {
            showToast('添加失敗: ' + result.message, 'danger');
          }
        })
        .addClientTodo(formData);
    }
    
    // 獲取狀態選項
    function getStatusOptions() {
      return [
        "進行中",
        "等待回覆",
        "延遲",
        "小幫手待確定",
        "已完成",
        "已取消"
      ];
    }
    
    // 顯示提示訊息
    function showToast(message, type = 'info') {
      // 創建 toast 元素
      const toastContainer = document.createElement('div');
      toastContainer.style.position = 'fixed';
      toastContainer.style.top = '20px';
      toastContainer.style.right = '20px';
      toastContainer.style.zIndex = '9999';
      
      const toast = document.createElement('div');
      toast.className = \`toast align-items-center text-white bg-\${type}\`;
      toast.setAttribute('role', 'alert');
      toast.setAttribute('aria-live', 'assertive');
      toast.setAttribute('aria-atomic', 'true');
      
      toast.innerHTML = \`
        <div class="d-flex">
          <div class="toast-body">
            \${message}
          </div>
          <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
      \`;
      
      toastContainer.appendChild(toast);
      document.body.appendChild(toastContainer);
      
      // 初始化並顯示 toast
      const bsToast = new bootstrap.Toast(toast, {
        autohide: true,
        delay: 3000
      });
      bsToast.show();
      
      // 當 toast 隱藏時移除元素
      toast.addEventListener('hidden.bs.toast', function() {
        document.body.removeChild(toastContainer);
      });
    }
  `;
}

/**
 * 刪除待辦事項
 * @param {string} clientName - 個案姓名
 * @param {string} timestamp - 時間戳記
 * @return {Object} 處理結果
 */
function deleteTodo(clientName, timestamp) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName("個案待辦事項");
    
    if (!sheet) {
      return { success: false, message: "找不到待辦事項表" };
    }
    
    // 查找匹配的行
    const data = sheet.getRange(2, 1, sheet.getLastRow() - 1, 8).getValues();
    for (let i = 0; i < data.length; i++) {
      const rowTimestamp = Utilities.formatDate(new Date(data[i][0]), "Asia/Taipei", "yyyy/MM/dd HH:mm");
      
      if (data[i][1] === clientName && rowTimestamp === timestamp) {
        // 記錄要刪除的待辦詳情
        const todoDetails = `狀態: ${data[i][2]}, 備註: ${data[i][3] || '無'}`;
        
        // 刪除該行
        sheet.deleteRow(i + 2);
        
        // 添加日誌記錄
        logSystemActivity(
          "待辦事項",
          clientName,
          `刪除待辦事項: ${todoDetails}`,
          "成功",
          data[i][6] || "", // 負責人
          `時間戳記: ${timestamp}`
        );
        
        return { success: true };
      }
    }
    
    // 記錄失敗日誌
    logSystemActivity(
      "待辦事項",
      clientName,
      `刪除待辦失敗: 找不到匹配的待辦事項`,
      "失敗",
      "",
      `時間戳記: ${timestamp}`
    );
    
    return { success: false, message: "找不到匹配的待辦事項" };
  } catch (error) {
    // 記錄失敗日誌
    logSystemActivity(
      "待辦事項",
      clientName,
      `刪除待辦錯誤: ${error.toString()}`,
      "失敗"
    );
    
    Logger.log("刪除待辦事項時出錯: " + error.toString());
    return { success: false, message: error.toString() };
  }
}

/**
 * 創建個案待辦事項表格
 */
function createClientTodoSheet() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  let sheet = ss.getSheetByName("個案待辦事項");
  
  if (!sheet) {
    sheet = ss.insertSheet("個案待辦事項");
    sheet.appendRow([
      "時間戳記", 
      "個案姓名", 
      "目前進度", 
      "備註", 
      "截止日期", 
      "優先級別",
      "負責人",
      "完成時間"
    ]);
    
    // 設置表頭格式
    const headerRange = sheet.getRange(1, 1, 1, 8);
    headerRange.setBackground("#4285f4");
    headerRange.setFontColor("white");
    headerRange.setFontWeight("bold");
    
    // 設置列寬
    sheet.setColumnWidth(1, 180); // 時間戳記
    sheet.setColumnWidth(2, 120); // 個案姓名
    sheet.setColumnWidth(3, 100); // 目前進度
    sheet.setColumnWidth(4, 250); // 備註
    sheet.setColumnWidth(5, 100); // 截止日期
    sheet.setColumnWidth(6, 80);  // 優先級別
    sheet.setColumnWidth(7, 100); // 負責人
    sheet.setColumnWidth(8, 180); // 完成時間
    
    // 設置條件格式
    setConditionalFormatting(sheet);
  }
  
  return sheet;
}

/**
 * 更新待辦事項狀態
 * @param {string} clientName - 個案姓名
 * @param {string} timestamp - 時間戳記
 * @param {string} newStatus - 新狀態
 * @return {Object} 處理結果
 */
function updateTodoStatus(clientName, timestamp, newStatus) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName("個案待辦事項");
    
    if (!sheet) {
      return { success: false, message: "找不到待辦事項表" };
    }
    
    // 查找匹配的行
    const data = sheet.getRange(2, 1, sheet.getLastRow() - 1, 8).getValues();
    for (let i = 0; i < data.length; i++) {
      const rowTimestamp = Utilities.formatDate(new Date(data[i][0]), "Asia/Taipei", "yyyy/MM/dd HH:mm");
      
      if (data[i][1] === clientName && rowTimestamp === timestamp) {
        // 更新狀態
        sheet.getRange(i + 2, 3).setValue(newStatus); // 狀態列
        
        // 如果狀態為已完成，設置完成時間
        if (newStatus === "已完成") {
          sheet.getRange(i + 2, 8).setValue(new Date()); // 完成時間列
        } else {
          // 如果從已完成變為其他狀態，清空完成時間
          sheet.getRange(i + 2, 8).setValue(""); 
        }
        
        // 添加日誌記錄
        logSystemActivity(
          "待辦事項",
          clientName,
          `更新待辦狀態: ${newStatus}`,
          "成功",
          data[i][6] || "", // 負責人
          `時間戳記: ${timestamp}`
        );
        
        return { success: true };
      }
    }
    
    // 記錄失敗日誌
    logSystemActivity(
      "待辦事項",
      clientName,
      `更新待辦狀態失敗: 找不到匹配的待辦事項`,
      "失敗",
      "",
      `時間戳記: ${timestamp}, 嘗試狀態: ${newStatus}`
    );
    
    return { success: false, message: "找不到匹配的待辦事項" };
  } catch (error) {
    // 記錄失敗日誌
    logSystemActivity(
      "待辦事項",
      clientName,
      `更新待辦狀態錯誤: ${error.toString()}`,
      "失敗"
    );
    
    Logger.log("更新待辦事項狀態時出錯: " + error.toString());
    return { success: false, message: error.toString() };
  }
}


/**
 * 更新待辦事項備註
 * @param {string} clientName - 個案姓名
 * @param {string} timestamp - 時間戳記
 * @param {string} newNotes - 新備註
 * @return {Object} 處理結果
 */
function updateTodoNotes(clientName, timestamp, newNotes) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName("個案待辦事項");
    
    if (!sheet) {
      return { success: false, message: "找不到待辦事項表" };
    }
    
    // 查找匹配的行
    const data = sheet.getRange(2, 1, sheet.getLastRow() - 1, 8).getValues();
    for (let i = 0; i < data.length; i++) {
      const rowTimestamp = Utilities.formatDate(new Date(data[i][0]), "Asia/Taipei", "yyyy/MM/dd HH:mm");
      
      if (data[i][1] === clientName && rowTimestamp === timestamp) {
        // 更新備註
        sheet.getRange(i + 2, 4).setValue(newNotes); // 備註列
        
        // 添加日誌記錄
        logSystemActivity(
          "待辦事項",
          clientName,
          `更新待辦備註`,
          "成功",
          data[i][6] || "", // 負責人
          `時間戳記: ${timestamp}`
        );
        
        return { success: true };
      }
    }
    
    // 記錄失敗日誌
    logSystemActivity(
      "待辦事項",
      clientName,
      `更新待辦備註失敗: 找不到匹配的待辦事項`,
      "失敗",
      "",
      `時間戳記: ${timestamp}`
    );
    
    return { success: false, message: "找不到匹配的待辦事項" };
  } catch (error) {
    // 記錄失敗日誌
    logSystemActivity(
      "待辦事項",
      clientName,
      `更新待辦備註錯誤: ${error.toString()}`,
      "失敗"
    );
    
    Logger.log("更新待辦事項備註時出錯: " + error.toString());
    return { success: false, message: error.toString() };
  }
}

/**
 * 添加個案待辦事項
 * @param {Object} formData - 表單數據
 * @return {Object} 處理結果
 */
function addClientTodo(formData) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    let sheet = ss.getSheetByName("個案待辦事項");
    
    // 如果表不存在，創建它
    if (!sheet) {
      sheet = createClientTodoSheet();
    }
    
    // 準備數據
    const now = new Date();
    const deadline = formData.deadline ? new Date(formData.deadline) : "";
    
    // 添加數據行
    sheet.appendRow([
      now,                   // 時間戳記
      formData.clientName,   // 個案姓名
      formData.status,       // 目前進度
      formData.notes,        // 備註
      deadline,              // 截止日期
      formData.priority,     // 優先級別
      formData.assignedTo,   // 負責人
      formData.status === "已完成" ? now : ""  // 完成時間（如果狀態是已完成，則設置為當前時間）
    ]);
    
    // 設置條件格式
    setConditionalFormatting(sheet);
    
    // 創建返回的新待辦事項對象
    const newTodo = {
      timestamp: Utilities.formatDate(now, "Asia/Taipei", "yyyy/MM/dd HH:mm"),
      clientName: formData.clientName,
      status: formData.status,
      notes: formData.notes,
      deadline: formData.deadline,
      priority: formData.priority,
      assignedTo: formData.assignedTo,
      completedTime: formData.status === "已完成" ? 
        Utilities.formatDate(now, "Asia/Taipei", "yyyy/MM/dd HH:mm") : ""
    };
    
    // 添加成功日誌記錄
    logSystemActivity(
      "待辦事項",
      formData.clientName,
      `新增待辦: ${formData.status}`,
      "成功",
      formData.assignedTo,
      `優先級: ${formData.priority}, 截止日期: ${formData.deadline || '無'}`
    );
    
    return { success: true, newTodo: newTodo };
  } catch (error) {
    // 記錄失敗日誌
    logSystemActivity(
      "待辦事項",
      formData.clientName || "",
      `新增待辦失敗: ${error.toString()}`,
      "失敗",
      formData.assignedTo || ""
    );
    
    Logger.log("添加待辦事項時出錯: " + error.toString());
    return { success: false, message: error.toString() };
  }
}

/**
 * 獲取待辦事項狀態選項
 * @return {Array<string>} 狀態選項列表
 */
function getStatusOptions() {
  return [
    "進行中",
    "等待回覆",
    "延遲",
    "已完成",
    "已取消",
    "等待回覆",
    "小幫手待確定"
  ];
}

/**
 * 將待辦事項標記為已完成
 * @param {string} clientName - 個案姓名
 * @param {string} timestamp - 時間戳記
 * @return {Object} 處理結果
 */
function markTodoAsCompleted(clientName, timestamp) {
  return updateTodoStatus(clientName, timestamp, "已完成");
}

/**
 * 設置表格的條件格式
 */
function setConditionalFormatting(sheet) {
  // 清除現有的條件格式
  const rules = sheet.getConditionalFormatRules();
  sheet.clearConditionalFormatRules();
  
  // 獲取資料範圍
  const lastRow = Math.max(sheet.getLastRow(), 2);
  const dataRange = sheet.getRange(2, 1, lastRow - 1, sheet.getLastColumn());
  
  // 設置優先級的條件格式
  const priorityColumn = 6; // F列
  const statusColumn = 3;   // C列
  
  // 高優先級 - 紅色背景
  let highPriorityRule = SpreadsheetApp.newConditionalFormatRule()
    .whenTextEqualTo("高")
    .setBackground("#ffcccc")
    .setRanges([sheet.getRange(2, priorityColumn, lastRow - 1, 1)])
    .build();
  
  // 中優先級 - 黃色背景
  let mediumPriorityRule = SpreadsheetApp.newConditionalFormatRule()
    .whenTextEqualTo("中")
    .setBackground("#fff2cc")
    .setRanges([sheet.getRange(2, priorityColumn, lastRow - 1, 1)])
    .build();
  
  // 低優先級 - 綠色背景
  let lowPriorityRule = SpreadsheetApp.newConditionalFormatRule()
    .whenTextEqualTo("低")
    .setBackground("#d9ead3")
    .setRanges([sheet.getRange(2, priorityColumn, lastRow - 1, 1)])
    .build();
  
  // 已完成 - 文字刪除線
  let completedRule = SpreadsheetApp.newConditionalFormatRule()
    .whenTextEqualTo("已完成")
    .setStrikethrough(true)
    .setFontColor("#999999")
    .setRanges([sheet.getRange(2, 1, lastRow - 1, sheet.getLastColumn())])
    .build();
  
  // 已取消 - 灰色背景
  let canceledRule = SpreadsheetApp.newConditionalFormatRule()
    .whenTextEqualTo("已取消")
    .setBackground("#eeeeee")
    .setFontColor("#999999")
    .setRanges([sheet.getRange(2, statusColumn, lastRow - 1, 1)])
    .build();
  
  // 小幫手待確定 - 淺藍色背景
  let helperRule = SpreadsheetApp.newConditionalFormatRule()
    .whenTextEqualTo("小幫手待確定")
    .setBackground("#e3f2fd")
    .setFontColor("#1976d2")
    .setRanges([sheet.getRange(2, statusColumn, lastRow - 1, 1)])
    .build();
  
  // 添加所有規則
  sheet.setConditionalFormatRules([
    highPriorityRule,
    mediumPriorityRule,
    lowPriorityRule,
    completedRule,
    canceledRule,
    helperRule
  ]);
}



/**
 * 自動定時備份系統
 * 功能：
 * 1. 可設定每日/每週/每月自動備份
 * 2. 備份到指定 Google Drive 資料夾
 * 3. 保留歷史備份版本
 * 4. 可設定備份保留天數
 */

// 系統設定常數
const BACKUP_SETTINGS = {
  // 預設備份設定
  DEFAULT_BACKUP_FOLDER_NAME: "試算表備份",
  DEFAULT_RETENTION_DAYS: 30, // 預設保留30天
  DEFAULT_BACKUP_SCHEDULE: "daily", // daily, weekly, monthly
  TIMEZONE: "Asia/Taipei" // 設定時區
};

/**
 * 安裝備份系統觸發器
 */
function installBackupTriggers() {
  // 先刪除所有現有的備份觸發器
  deleteAllBackupTriggers();
  
  // 獲取用戶設定的備份排程
  const userProperties = PropertiesService.getUserProperties();
  const backupSchedule = userProperties.getProperty('backup_schedule') || BACKUP_SETTINGS.DEFAULT_BACKUP_SCHEDULE;
  
  // 根據排程設定觸發器
  let trigger;
  switch(backupSchedule.toLowerCase()) {
    case "daily":
      // 每天凌晨2點執行備份
      trigger = ScriptApp.newTrigger('executeScheduledBackup')
        .timeBased()
        .everyDays(1)
        .atHour(2)
        .inTimezone(BACKUP_SETTINGS.TIMEZONE)
        .create();
      break;
      
    case "weekly":
      // 每週日凌晨2點執行備份
      trigger = ScriptApp.newTrigger('executeScheduledBackup')
        .timeBased()
        .everyWeeks(1)
        .onWeekDay(ScriptApp.WeekDay.SUNDAY)
        .atHour(2)
        .inTimezone(BACKUP_SETTINGS.TIMEZONE)
        .create();
      break;
      
    case "monthly":
      // 每月1日凌晨2點執行備份
      trigger = ScriptApp.newTrigger('executeScheduledBackup')
        .timeBased()
        .everyMonths(1)
        .onFirstDayOfMonth()
        .atHour(2)
        .inTimezone(BACKUP_SETTINGS.TIMEZONE)
        .create();
      break;
      
    default:
      throw new Error("無效的備份排程設定");
  }
  
  Logger.log("已安裝備份觸發器: " + trigger.getUniqueId());
  return trigger;
}

/**
 * 刪除所有備份觸發器
 */
function deleteAllBackupTriggers() {
  const triggers = ScriptApp.getProjectTriggers();
  let deletedCount = 0;
  
  triggers.forEach(trigger => {
    if (trigger.getHandlerFunction() === 'executeScheduledBackup') {
      ScriptApp.deleteTrigger(trigger);
      deletedCount++;
    }
  });
  
  Logger.log(`已刪除 ${deletedCount} 個備份觸發器`);
  return deletedCount;
}

/**
 * 執行排定的備份 (由觸發器呼叫)
 */
function executeScheduledBackup() {
  try {
    // 獲取當前試算表
    const spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
    const spreadsheetName = spreadsheet.getName();
    
    // 執行備份
    const backupFile = backupSpreadsheet(spreadsheet);
    
    // 清理舊備份
    cleanupOldBackups(spreadsheetName);
    
    // 記錄備份日誌
    logBackupActivity(spreadsheetName, "自動備份成功");
    
    return backupFile;
  } catch (error) {
    Logger.log("自動備份失敗: " + error.toString());
    logBackupActivity(spreadsheet.getName(), "自動備份失敗: " + error.toString());
    throw error;
  }
}

/**
 * 手動執行備份
 */
function manualBackup() {
  try {
    // 獲取當前試算表
    const spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
    const spreadsheetName = spreadsheet.getName();
    
    // 執行備份
    const backupFile = backupSpreadsheet(spreadsheet);
    
    // 記錄備份日誌
    logBackupActivity(spreadsheetName, "手動備份成功");
    
    // 顯示成功訊息
    SpreadsheetApp.getUi().alert("備份成功", 
      `試算表已成功備份至: ${backupFile.getUrl()}`, 
      SpreadsheetApp.getUi().ButtonSet.OK);
    
    return backupFile;
  } catch (error) {
    Logger.log("手動備份失敗: " + error.toString());
    SpreadsheetApp.getUi().alert("備份失敗", 
      "備份過程中發生錯誤: " + error.toString(), 
      SpreadsheetApp.getUi().ButtonSet.OK);
    throw error;
  }
}

/**
 * 備份試算表
 * @param {Spreadsheet} spreadsheet 要備份的試算表
 * @return {File} 備份檔案
 */
function backupSpreadsheet(spreadsheet) {
  // 獲取或建立備份資料夾
  const backupFolder = getOrCreateBackupFolder();
  
  // 建立備份檔名 (包含日期時間)
  const dateTimeString = Utilities.formatDate(new Date(), BACKUP_SETTINGS.TIMEZONE, "yyyyMMdd-HHmmss");
  const spreadsheetName = spreadsheet.getName();
  const backupName = `${spreadsheetName} 備份 ${dateTimeString}`;
  
  // 建立備份 (複製整個試算表)
  const backupFile = DriveApp.getFileById(spreadsheet.getId()).makeCopy(backupName, backupFolder);
  
  Logger.log(`已建立備份: ${backupFile.getUrl()}`);
  return backupFile;
}

/**
 * 獲取或建立備份資料夾
 * @return {Folder} 備份資料夾
 */
function getOrCreateBackupFolder() {
  const folderName = BACKUP_SETTINGS.DEFAULT_BACKUP_FOLDER_NAME;
  let folder;
  
  // 檢查是否已有備份資料夾
  const folders = DriveApp.getFoldersByName(folderName);
  if (folders.hasNext()) {
    folder = folders.next();
  } else {
    // 建立新備份資料夾
    folder = DriveApp.createFolder(folderName);
    Logger.log(`已建立備份資料夾: ${folder.getUrl()}`);
  }
  
  return folder;
}

/**
 * 清理舊備份
 * @param {string} spreadsheetName 試算表名稱
 */
function cleanupOldBackups(spreadsheetName) {
  // 獲取備份資料夾
  const backupFolder = getOrCreateBackupFolder();
  
  // 獲取用戶設定的保留天數
  const userProperties = PropertiesService.getUserProperties();
  const retentionDays = parseInt(userProperties.getProperty('retention_days')) || BACKUP_SETTINGS.DEFAULT_RETENTION_DAYS;
  
  // 計算截止日期
  const cutoffDate = new Date();
  cutoffDate.setDate(cutoffDate.getDate() - retentionDays);
  
  // 獲取備份資料夾中的所有檔案
  const files = backupFolder.getFiles();
  let deletedCount = 0;
  
  while (files.hasNext()) {
    const file = files.next();
    const fileName = file.getName();
    
    // 檢查是否為當前試算表的備份且超過保留期限
    if (fileName.includes(spreadsheetName + " 備份")) {
      const fileDate = file.getLastUpdated();
      
      if (fileDate < cutoffDate) {
        // 刪除舊備份
        file.setTrashed(true);
        deletedCount++;
        Logger.log(`已刪除舊備份: ${fileName}`);
      }
    }
  }
  
  Logger.log(`已清理 ${deletedCount} 個舊備份`);
  return deletedCount;
}

/**
 * 記錄備份活動
 * @param {string} spreadsheetName 試算表名稱
 * @param {string} message 記錄訊息
 */
function logBackupActivity(spreadsheetName, message) {
  // 獲取或建立日誌試算表
  const logSpreadsheet = getOrCreateLogSpreadsheet();
  const logSheet = logSpreadsheet.getSheetByName("備份日誌") || logSpreadsheet.insertSheet("備份日誌");
  
  // 設定日誌表頭 (如果不存在)
  if (logSheet.getLastRow() === 0) {
    logSheet.appendRow(["時間", "試算表名稱", "活動類型", "訊息", "狀態"]);
  }
  
  // 添加日誌記錄
  const timestamp = Utilities.formatDate(new Date(), BACKUP_SETTINGS.TIMEZONE, "yyyy/MM/dd HH:mm:ss");
  const activityType = message.includes("自動") ? "自動備份" : "手動備份";
  const status = message.includes("成功") ? "成功" : "失敗";
  
  logSheet.appendRow([timestamp, spreadsheetName, activityType, message, status]);
  
  Logger.log(`備份日誌已記錄: ${message}`);
}

/**
 * 獲取或建立日誌試算表
 * @return {Spreadsheet} 日誌試算表
 */
function getOrCreateLogSpreadsheet() {
  const logSpreadsheetName = "試算表備份系統日誌";
  let logSpreadsheet;
  
  try {
    // 檢查是否已存在日誌試算表
    const files = DriveApp.getFilesByName(logSpreadsheetName);
    if (files.hasNext()) {
      logSpreadsheet = SpreadsheetApp.open(files.next());
    } else {
      // 建立新日誌試算表
      logSpreadsheet = SpreadsheetApp.create(logSpreadsheetName);
      const logSheet = logSpreadsheet.getActiveSheet();
      logSheet.setName("備份日誌");
      logSheet.appendRow(["時間", "試算表名稱", "活動類型", "訊息", "狀態"]);
      
      // 移動到備份資料夾
      const backupFolder = getOrCreateBackupFolder();
      const logFile = DriveApp.getFileById(logSpreadsheet.getId());
      backupFolder.addFile(logFile);
      DriveApp.getRootFolder().removeFile(logFile);
      
      Logger.log(`已建立日誌試算表: ${logSpreadsheet.getUrl()}`);
    }
    
    return logSpreadsheet;
  } catch (error) {
    Logger.log("獲取日誌試算表時出錯: " + error.toString());
    throw error;
  }
}

/**
 * 顯示備份設定對話框
 */
function showBackupSettingsDialog() {
  // 獲取當前設定
  const userProperties = PropertiesService.getUserProperties();
  const currentSchedule = userProperties.getProperty('backup_schedule') || BACKUP_SETTINGS.DEFAULT_BACKUP_SCHEDULE;
  const currentRetentionDays = userProperties.getProperty('retention_days') || BACKUP_SETTINGS.DEFAULT_RETENTION_DAYS;
  
  const html = HtmlService.createHtmlOutput(`
    <div style="padding: 20px; font-family: Arial, sans-serif;">
      <h2 style="color: #4285f4;">備份系統設定</h2>
      
      <div style="margin: 15px 0;">
        <label style="font-weight: bold; display: block; margin-bottom: 5px;">備份排程：</label>
        <select id="backupSchedule" style="width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px;">
          <option value="daily" ${currentSchedule === 'daily' ? 'selected' : ''}>每日備份</option>
          <option value="weekly" ${currentSchedule === 'weekly' ? 'selected' : ''}>每週備份</option>
          <option value="monthly" ${currentSchedule === 'monthly' ? 'selected' : ''}>每月備份</option>
        </select>
      </div>
      
      <div style="margin: 15px 0;">
        <label style="font-weight: bold; display: block; margin-bottom: 5px;">備份保留天數：</label>
        <input type="number" id="retentionDays" value="${currentRetentionDays}" 
               style="width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px;" 
               min="1" max="365">
      </div>
      
      <div style="margin: 20px 0; text-align: center;">
        <button onclick="saveSettings()" style="background-color: #4285f4; color: white; border: none; 
                padding: 10px 20px; border-radius: 4px; cursor: pointer; margin-right: 10px;">
          儲存設定
        </button>
        <button onclick="google.script.host.close()" style="background-color: #f1f1f1; border: none; 
                padding: 10px 20px; border-radius: 4px; cursor: pointer;">
          取消
        </button>
      </div>
      
      <div id="message" style="margin-top: 15px; padding: 10px; display: none; border-radius: 4px;"></div>
    </div>
    
    <script>
      function saveSettings() {
        const backupSchedule = document.getElementById('backupSchedule').value;
        const retentionDays = document.getElementById('retentionDays').value;
        
        if (!retentionDays || retentionDays < 1 || retentionDays > 365) {
          showMessage('請輸入有效的保留天數 (1-365)', 'error');
          return;
        }
        
        google.script.run
          .withSuccessHandler(function() {
            showMessage('設定已成功儲存！', 'success');
            setTimeout(function() {
              google.script.host.close();
            }, 2000);
          })
          .withFailureHandler(function(error) {
            showMessage('儲存設定時出錯: ' + error, 'error');
          })
          .saveBackupSettings(backupSchedule, retentionDays);
      }
      
      function showMessage(message, type) {
        const messageDiv = document.getElementById('message');
        messageDiv.textContent = message;
        messageDiv.style.display = 'block';
        messageDiv.style.backgroundColor = type === 'error' ? '#ffebee' : '#e8f5e9';
        messageDiv.style.color = type === 'error' ? '#c62828' : '#2e7d32';
      }
    </script>
  `)
  .setWidth(400)
  .setHeight(350);
  
  SpreadsheetApp.getUi().showModalDialog(html, '備份系統設定');
}

/**
 * 儲存備份設定
 * @param {string} backupSchedule 備份排程 (daily, weekly, monthly)
 * @param {number} retentionDays 備份保留天數
 */
function saveBackupSettings(backupSchedule, retentionDays) {
  // 驗證輸入
  if (!['daily', 'weekly', 'monthly'].includes(backupSchedule)) {
    throw new Error("無效的備份排程設定");
  }
  
  if (isNaN(retentionDays) || retentionDays < 1 || retentionDays > 365) {
    throw new Error("無效的保留天數設定 (必須介於1-365)");
  }
  
  // 儲存設定
  const userProperties = PropertiesService.getUserProperties();
  userProperties.setProperty('backup_schedule', backupSchedule);
  userProperties.setProperty('retention_days', retentionDays.toString());
  
  // 重新安裝觸發器
  installBackupTriggers();
  
  Logger.log(`已更新備份設定: 排程=${backupSchedule}, 保留天數=${retentionDays}`);
}

/**
 * 顯示備份狀態對話框
 */
function showBackupStatusDialog() {
  // 獲取當前設定
  const userProperties = PropertiesService.getUserProperties();
  const currentSchedule = userProperties.getProperty('backup_schedule') || BACKUP_SETTINGS.DEFAULT_BACKUP_SCHEDULE;
  const currentRetentionDays = userProperties.getProperty('retention_days') || BACKUP_SETTINGS.DEFAULT_RETENTION_DAYS;
  
  // 檢查是否有活動的備份觸發器
  const hasActiveTrigger = checkActiveBackupTrigger();
  
  // 獲取備份資料夾中的備份數量
  const backupFolder = getOrCreateBackupFolder();
  const backupFiles = backupFolder.getFiles();
  let backupCount = 0;
  
  while (backupFiles.hasNext()) {
    backupFiles.next();
    backupCount++;
  }
  
  // 獲取當前試算表名稱
  const spreadsheetName = SpreadsheetApp.getActiveSpreadsheet().getName();
  
  const html = HtmlService.createHtmlOutput(`
    <div style="padding: 20px; font-family: Arial, sans-serif;">
      <h2 style="color: #4285f4;">備份系統狀態</h2>
      
      <div style="margin: 15px 0;">
        <h3 style="color: #5f6368; font-size: 16px; margin-bottom: 10px;">當前設定</h3>
        <div style="background-color: #f8f9fa; padding: 15px; border-radius: 4px;">
          <p style="margin: 5px 0;"><strong>備份排程：</strong> ${getScheduleDisplayName(currentSchedule)}</p>
          <p style="margin: 5px 0;"><strong>備份保留天數：</strong> ${currentRetentionDays} 天</p>
          <p style="margin: 5px 0;"><strong>備份狀態：</strong> ${hasActiveTrigger ? '已啟用' : '未啟用'}</p>
        </div>
      </div>
      
      <div style="margin: 15px 0;">
        <h3 style="color: #5f6368; font-size: 16px; margin-bottom: 10px;">備份統計</h3>
        <div style="background-color: #f8f9fa; padding: 15px; border-radius: 4px;">
          <p style="margin: 5px 0;"><strong>備份資料夾中的檔案數：</strong> ${backupCount}</p>
          <p style="margin: 5px 0;"><strong>當前試算表名稱：</strong> ${spreadsheetName}</p>
        </div>
      </div>
      
      <div style="margin: 20px 0; text-align: center;">
        <button onclick="google.script.host.close()" style="background-color: #4285f4; color: white; border: none; 
                padding: 10px 20px; border-radius: 4px; cursor: pointer;">
          關閉
        </button>
      </div>
    </div>
  `)
  .setWidth(400)
  .setHeight(400);
  
  SpreadsheetApp.getUi().showModalDialog(html, '備份系統狀態');
}

/**
 * 檢查是否有活動的備份觸發器
 * @return {boolean} 是否有活動的備份觸發器
 */
function checkActiveBackupTrigger() {
  const triggers = ScriptApp.getProjectTriggers();
  
  for (const trigger of triggers) {
    if (trigger.getHandlerFunction() === 'executeScheduledBackup') {
      return true;
    }
  }
  
  return false;
}

/**
 * 獲取排程顯示名稱
 * @param {string} schedule 排程代碼
 * @return {string} 顯示名稱
 */
function getScheduleDisplayName(schedule) {
  switch(schedule) {
    case 'daily': return '每日';
    case 'weekly': return '每週';
    case 'monthly': return '每月';
    default: return schedule;
  }
}

/**
 * 建立自定義菜單
 */
function createBackupMenu() {
  const ui = SpreadsheetApp.getUi();
  
  const menu = ui.createMenu('🔧 備份系統')
    .addItem('立即備份', 'manualBackup')
    .addItem('備份設定', 'showBackupSettingsDialog')
    .addItem('備份狀態', 'showBackupStatusDialog')
    .addSeparator()
    .addItem('安裝備份觸發器', 'installBackupTriggers')
    .addItem('移除備份觸發器', 'deleteAllBackupTriggers');
    
  menu.addToUi();
}

/**
 * 安裝函數 - 初次設定時執行
 */
function install() {
  // 建立自定義菜單
  createBackupMenu();
  
  // 安裝備份觸發器
  installBackupTriggers();
  
  // 建立備份資料夾
  getOrCreateBackupFolder();
  
  // 建立日誌試算表
  getOrCreateLogSpreadsheet();
  
  Logger.log("備份系統安裝完成");
  SpreadsheetApp.getUi().alert("備份系統", "備份系統已成功安裝！", SpreadsheetApp.getUi().ButtonSet.OK);
}

/**
 * 系統日誌管理
 * 記錄所有系統操作，提供統一查詢界面
 */

/**
 * 創建系統日誌表格
 */
function createSystemLogSheet() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  let sheet = ss.getSheetByName("系統日誌");
  
  if (!sheet) {
    sheet = ss.insertSheet("系統日誌");
    
    // 設定表頭
    sheet.appendRow([
      "時間戳記",
      "操作類型", 
      "個案姓名",
      "操作詳情",
      "操作結果",
      "心理師/負責人",
      "備註"
    ]);
    
    // 格式化表頭
    const headerRange = sheet.getRange(1, 1, 1, 7);
    headerRange.setBackground("#4285f4");
    headerRange.setFontColor("white");
    headerRange.setFontWeight("bold");
    
    // 設定列寬
    sheet.setColumnWidth(1, 150); // 時間戳記
    sheet.setColumnWidth(2, 100); // 操作類型
    sheet.setColumnWidth(3, 120); // 個案姓名
    sheet.setColumnWidth(4, 250); // 操作詳情
    sheet.setColumnWidth(5, 80);  // 操作結果
    sheet.setColumnWidth(6, 100); // 心理師/負責人
    sheet.setColumnWidth(7, 200); // 備註
    
    // 凍結表頭
    sheet.setFrozenRows(1);
    
    Logger.log("系統日誌表格已創建");
  }
  
  return sheet;
}

/**
 * 記錄系統活動
 * @param {string} operationType - 操作類型
 * @param {string} clientName - 個案姓名
 * @param {string} details - 操作詳情
 * @param {string} result - 操作結果 (成功/失敗)
 * @param {string} counselor - 心理師/負責人
 * @param {string} notes - 備註
 */
function logSystemActivity(operationType, clientName, details, result = '成功', counselor = '', notes = '') {
  try {
    const sheet = createSystemLogSheet();
    const timestamp = new Date();
    
    // 添加日誌記錄
    sheet.appendRow([
      timestamp,
      operationType,
      clientName || '',
      details || '',
      result,
      counselor || '',
      notes || ''
    ]);
    
    // 按時間排序（最新的在上面）
    if (sheet.getLastRow() > 2) {
      const dataRange = sheet.getRange(2, 1, sheet.getLastRow() - 1, 7);
      dataRange.sort({column: 1, ascending: false});
    }
    
  } catch (error) {
    Logger.log("記錄系統日誌時出錯: " + error.toString());
  }
}

/**
 * 獲取系統日誌數據 (支援多選操作類型篩選)
 * @param {string} startDate - 開始日期 (YYYY-MM-DD)
 * @param {string} endDate - 結束日期 (YYYY-MM-DD) 
 * @param {Array} selectedOperationTypes - 選中的操作類型陣列
 * @param {string} clientName - 個案姓名篩選
 * @param {string} resultFilter - 操作結果篩選 (成功/失敗/空字串表示全部)
 * @return {Array} 日誌數據
 */
function getSystemLogsWithMultipleTypes(startDate = '', endDate = '', selectedOperationTypes = [], clientName = '', resultFilter = '') {
  try {
    const sheet = createSystemLogSheet();
    
    if (sheet.getLastRow() <= 1) {
      return [];
    }
    
    const data = sheet.getRange(2, 1, sheet.getLastRow() - 1, 7).getValues();
    
    // 篩選數據
    const filteredData = data.filter(row => {
      const timestamp = new Date(row[0]);
      const opType = row[1];
      const client = row[2];
      const result = row[4];
      
      // 日期篩選
      if (startDate) {
        const start = new Date(startDate);
        if (timestamp < start) return false;
      }
      
      if (endDate) {
        const end = new Date(endDate);
        end.setHours(23, 59, 59, 999);
        if (timestamp > end) return false;
      }
      
      // 操作類型篩選（多選）
      if (selectedOperationTypes.length > 0 && !selectedOperationTypes.includes(opType)) {
        return false;
      }
      
      // 個案姓名篩選
      if (clientName && !client.includes(clientName)) {
        return false;
      }
      
      // 操作結果篩選
      if (resultFilter && result !== resultFilter) {
        return false;
      }
      
      return true;
    });
    
    // 格式化日期時間
    return filteredData.map(row => ({
      timestamp: Utilities.formatDate(new Date(row[0]), "Asia/Taipei", "yyyy/MM/dd HH:mm:ss"),
      operationType: row[1],
      clientName: row[2],
      details: row[3],
      result: row[4],
      counselor: row[5],
      notes: row[6]
    }));
    
  } catch (error) {
    Logger.log("獲取系統日誌時出錯: " + error.toString());
    return [];
  }
}



/**
 * 獲取操作統計 (支援多選操作類型)
 * @param {string} startDate - 開始日期
 * @param {string} endDate - 結束日期
 * @param {Array} selectedOperationTypes - 選中的操作類型陣列
 * @return {Object} 統計數據
 */
function getOperationStatisticsWithMultipleTypes(startDate, endDate, selectedOperationTypes = []) {
  try {
    const logs = getSystemLogsWithMultipleTypes(startDate, endDate, selectedOperationTypes, '', '');
    const stats = {};
    
    logs.forEach(log => {
      if (!stats[log.operationType]) {
        stats[log.operationType] = { total: 0, success: 0, failed: 0 };
      }
      
      stats[log.operationType].total++;
      if (log.result === '成功') {
        stats[log.operationType].success++;
      } else {
        stats[log.operationType].failed++;
      }
    });
    
    return stats;
  } catch (error) {
    Logger.log("獲取操作統計時出錯: " + error.toString());
    return {};
  }
}

/**
 * 儲存篩選設定
 */
function saveFilterSettings(settings) {
  try {
    const userProperties = PropertiesService.getUserProperties();
    userProperties.setProperty('logFilterSettings', JSON.stringify(settings));
    return { success: true };
  } catch (error) {
    Logger.log("儲存篩選設定時出錯: " + error.toString());
    return { success: false, error: error.toString() };
  }
}

/**
 * 讀取篩選設定
 */
function getFilterSettings() {
  try {
    const userProperties = PropertiesService.getUserProperties();
    const settings = userProperties.getProperty('logFilterSettings');
    return settings ? JSON.parse(settings) : null;
  } catch (error) {
    Logger.log("讀取篩選設定時出錯: " + error.toString());
    return null;
  }
}

/**
 * 顯示系統日誌查詢對話框
 */
function showSystemLogDialog() {
  // 獲取操作類型選項
  const operationTypes = [
    "第一次預約",
    "個案續約", 
    "繳交保證金",
    "取消預約",
    "調整預約時間",
    "調整諮商空間",
    "團體預約",
    "取消團體",
    "待辦事項",
    "系統設定"
  ];
  
  // 生成操作類型的 checkbox HTML
  var operationCheckboxes = '';
  operationTypes.forEach(function(type) {
    operationCheckboxes += '<div class="form-check">' +
      '<input class="form-check-input" type="checkbox" value="' + type + '" id="op_' + type.replace(/\s+/g, '_') + '" checked>' +
      '<label class="form-check-label" for="op_' + type.replace(/\s+/g, '_') + '">' + type + '</label>' +
      '</div>';
  });
    
  // 獲取客戶名單
  const clients = getClientList();
  var clientOptions = '';
  clients.forEach(function(client) {
    clientOptions += '<option value="' + client + '">' + client + '</option>';
  });
  
  var html = '<!DOCTYPE html>' +
    '<html>' +
    '<head>' +
    '<base target="_top">' +
    '<meta charset="UTF-8">' +
    '<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">' +
    '<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.8.1/font/bootstrap-icons.css">' +
    '<style>' +
    'body { font-family: Arial, sans-serif; padding: 20px; background-color: #f8f9fa; }' +
    '.log-container { max-width: 1400px; margin: 0 auto; }' +
    '.filter-card { background: white; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); margin-bottom: 20px; }' +
    '.log-table-container { background: white; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); overflow: hidden; }' +
    '.table-scroll { max-height: 500px; overflow-y: auto; }' +
    '.table thead th { position: sticky; top: 0; background-color: #4285f4; color: white; z-index: 1; }' +
    '.operation-success { color: #28a745; font-weight: bold; }' +
    '.operation-failed { color: #dc3545; font-weight: bold; }' +
    '.stats-card { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; border-radius: 8px; padding: 20px; margin-bottom: 20px; }' +
    '.stats-item { text-align: center; padding: 10px; }' +
    '.stats-number { font-size: 2rem; font-weight: bold; display: block; }' +
    '.stats-label { font-size: 0.9rem; opacity: 0.9; }' +
    '.result-filter-group { border: 1px solid #dee2e6; border-radius: 4px; padding: 10px; background-color: #f8f9fa; }' +
    '.result-filter-group .form-check { margin-bottom: 5px; }' +
    '.result-filter-group .form-check:last-child { margin-bottom: 0; }' +
    '.operation-filter-group { border: 1px solid #dee2e6; border-radius: 4px; padding: 10px; background-color: #f8f9fa; max-height: 200px; overflow-y: auto; }' +
    '.operation-filter-group .form-check { margin-bottom: 3px; }' +
    '.operation-filter-group .form-check:last-child { margin-bottom: 0; }' +
    '.filter-controls { margin-bottom: 10px; }' +
    '.filter-controls button { font-size: 0.8rem; padding: 2px 8px; margin-right: 5px; }' +
    '.filter-header { background: linear-gradient(135deg, #4285f4 0%, #34a853 100%); color: white; padding: 15px 20px; border-radius: 8px 8px 0 0; cursor: pointer; user-select: none; transition: all 0.3s ease; }' +
    '.filter-header:hover { background: linear-gradient(135deg, #3367d6 0%, #2d8f47 100%); }' +
    '.filter-header h5 { margin: 0; display: flex; align-items: center; justify-content: space-between; }' +
    '.collapse-icon { transition: transform 0.3s ease; }' +
    '.collapsed .collapse-icon { transform: rotate(-90deg); }' +
    '.filter-content { padding: 20px; border-radius: 0 0 8px 8px; }' +
    '.quick-actions { background: #f8f9fa; padding: 10px 20px; border-top: 1px solid #dee2e6; border-radius: 0 0 8px 8px; }' +
    '.quick-actions .btn { margin-right: 10px; margin-bottom: 5px; }' +
    '</style>' +
    '</head>' +
    '<body>' +
    '<div class="log-container">' +
    '<h2 class="mb-4"><i class="bi bi-journal-text"></i> 系統日誌管理</h2>' +
    
    '<div class="stats-card" id="statsCard" style="display: none;">' +
    '<div class="row" id="statsContent"></div>' +
    '</div>' +
    
    '<div class="filter-card">' +
    '<div class="filter-header" onclick="toggleFilterCollapse()" id="filterHeader">' +
    '<h5><span><i class="bi bi-funnel me-2"></i>篩選條件</span>' +
    '<i class="bi bi-chevron-down collapse-icon" id="collapseIcon"></i></h5>' +
    '</div>' +
    
    '<div class="collapse show" id="filterCollapse">' +
    '<div class="filter-content">' +
    '<div class="row g-3">' +
    '<div class="col-md-2">' +
    '<label class="form-label">開始日期</label>' +
    '<input type="date" class="form-control" id="startDate">' +
    '</div>' +
    '<div class="col-md-2">' +
    '<label class="form-label">結束日期</label>' +
    '<input type="date" class="form-control" id="endDate">' +
    '</div>' +
    '<div class="col-md-3">' +
    '<label class="form-label">操作類型</label>' +
    '<div class="filter-controls">' +
    '<button type="button" class="btn btn-outline-primary btn-sm" onclick="selectAllOperations()">全選</button>' +
    '<button type="button" class="btn btn-outline-secondary btn-sm" onclick="deselectAllOperations()">全不選</button>' +
    '<button type="button" class="btn btn-outline-info btn-sm" onclick="invertOperationSelection()">反選</button>' +
    '</div>' +
    '<div class="operation-filter-group" id="operationTypeGroup">' +
    operationCheckboxes +
    '</div>' +
    '</div>' +
    '<div class="col-md-2">' +
    '<label class="form-label">個案姓名</label>' +
    '<select class="form-select" id="clientName">' +
    '<option value="">全部</option>' +
    clientOptions +
    '</select>' +
    '</div>' +
    '<div class="col-md-2">' +
    '<label class="form-label">操作結果</label>' +
    '<div class="result-filter-group">' +
    '<div class="form-check">' +
    '<input class="form-check-input" type="radio" name="resultFilter" id="resultAll" value="">' +
    '<label class="form-check-label" for="resultAll">全部</label>' +
    '</div>' +
    '<div class="form-check">' +
    '<input class="form-check-input" type="radio" name="resultFilter" id="resultSuccess" value="成功" checked>' +
    '<label class="form-check-label" for="resultSuccess">成功</label>' +
    '</div>' +
    '<div class="form-check">' +
    '<input class="form-check-input" type="radio" name="resultFilter" id="resultFailed" value="失敗">' +
    '<label class="form-check-label" for="resultFailed">失敗</label>' +
    '</div>' +
    '</div>' +
    '</div>' +
    '</div>' +
    '</div>' +
    
    '<div class="quick-actions">' +
    '<button class="btn btn-primary" onclick="loadLogs()">' +
    '<i class="bi bi-search"></i> 查詢日誌</button>' +
    '<button class="btn btn-info" onclick="showStatistics()">' +
    '<i class="bi bi-bar-chart"></i> 顯示統計</button>' +
    '<button class="btn btn-success" onclick="exportLogs()">' +
    '<i class="bi bi-download"></i> 匯出日誌</button>' +
    '<button class="btn btn-secondary" onclick="resetFilters()">' +
    '<i class="bi bi-arrow-counterclockwise"></i> 重置篩選</button>' +
    '<button class="btn btn-warning" onclick="toggleFilterCollapse()">' +
    '<i class="bi bi-eye-slash"></i> 收起篩選</button>' +
    '</div>' +
    '</div>' +
    '</div>' +
    
    '<div class="log-table-container">' +
    '<div class="table-scroll">' +
    '<table class="table table-hover mb-0" id="logTable">' +
    '<thead>' +
    '<tr>' +
    '<th style="width: 15%">時間</th>' +
    '<th style="width: 12%">操作類型</th>' +
    '<th style="width: 12%">個案姓名</th>' +
    '<th style="width: 30%">操作詳情</th>' +
    '<th style="width: 8%">結果</th>' +
    '<th style="width: 12%">負責人</th>' +
    '<th style="width: 11%">備註</th>' +
    '</tr>' +
    '</thead>' +
    '<tbody id="logTableBody">' +
    '<tr><td colspan="7" class="text-center">' +
    '<div class="p-4">' +
    '<i class="bi bi-journal-x" style="font-size: 3rem; color: #6c757d;"></i>' +
    '<p class="mt-2 text-muted">請選擇查詢條件並點擊「查詢日誌」</p>' +
    '</div>' +
    '</td></tr>' +
    '</tbody>' +
    '</table>' +
    '</div>' +
    '</div>' +
    
    '<div id="loadingIndicator" style="display: none;">' +
    '<div class="d-flex justify-content-center p-4">' +
    '<div class="spinner-border text-primary" role="status">' +
    '<span class="visually-hidden">載入中...</span>' +
    '</div>' +
    '</div>' +
    '</div>' +
    '</div>';

  html += '<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>' +
    '<script>' +
    'function saveCurrentFilters() {' +
    '  const settings = {' +
    '    startDate: document.getElementById("startDate").value,' +
    '    endDate: document.getElementById("endDate").value,' +
    '    clientName: document.getElementById("clientName").value,' +
    '    resultFilter: document.querySelector("input[name=\'resultFilter\']:checked").value,' +
    '    operationTypes: getSelectedOperationTypes(),' +
    '    isFilterCollapsed: !document.getElementById("filterCollapse").classList.contains("show")' +
    '  };' +
    '  google.script.run' +
    '    .withSuccessHandler(function(result) {' +
    '      if (!result.success) {' +
    '        console.error("儲存篩選設定失敗:", result.error);' +
    '      }' +
    '    })' +
    '    .saveFilterSettings(settings);' +
    '}' +
    
    'function loadSavedFilters() {' +
    '  google.script.run' +
    '    .withSuccessHandler(function(settings) {' +
    '      if (settings) {' +
    '        if (settings.startDate) document.getElementById("startDate").value = settings.startDate;' +
    '        if (settings.endDate) document.getElementById("endDate").value = settings.endDate;' +
    '        if (settings.clientName) document.getElementById("clientName").value = settings.clientName;' +
    '        if (settings.resultFilter) {' +
    '          const radio = document.querySelector("input[name=\'resultFilter\'][value=\'" + settings.resultFilter + "\']");' +
    '          if (radio) radio.checked = true;' +
    '        }' +
    '        if (settings.operationTypes) {' +
    '          const checkboxes = document.querySelectorAll("#operationTypeGroup input[type=\'checkbox\']");' +
    '          checkboxes.forEach(function(checkbox) {' +
    '            checkbox.checked = settings.operationTypes.includes(checkbox.value);' +
    '          });' +
    '        }' +
    '        if (settings.isFilterCollapsed) {' +
    '          toggleFilterCollapse();' +
    '        }' +
    '        loadLogs();' +
    '      }' +
    '    })' +
    '    .getFilterSettings();' +
    '}' +

    'function loadLogs() {' +
    '  const startDate = document.getElementById("startDate").value;' +
    '  const endDate = document.getElementById("endDate").value;' +
    '  const selectedOperationTypes = getSelectedOperationTypes();' +
    '  const clientName = document.getElementById("clientName").value;' +
    '  const resultFilter = document.querySelector("input[name=\'resultFilter\']:checked").value;' +
    '  showLoading(true);' +
    '  google.script.run' +
    '    .withSuccessHandler(function(logs) {' +
    '      displayLogs(logs);' +
    '      showLoading(false);' +
    '      saveCurrentFilters();' +
    '    })' +
    '    .withFailureHandler(function(error) {' +
    '      console.error("載入日誌失敗:", error);' +
    '      showLoading(false);' +
    '      alert("載入日誌時發生錯誤: " + error);' +
    '    })' +
    '    .getSystemLogsWithMultipleTypes(startDate, endDate, selectedOperationTypes, clientName, resultFilter);' +
    '}' +

    'function displayLogs(logs) {' +
    '  const tbody = document.getElementById("logTableBody");' +
    '  tbody.innerHTML = "";' +
    '  if (logs.length === 0) {' +
    '    tbody.innerHTML = "<tr><td colspan=\'7\' class=\'text-center p-4 text-muted\'>查無符合條件的日誌記錄</td></tr>";' +
    '    return;' +
    '  }' +
    '  logs.forEach(function(log) {' +
    '    const row = document.createElement("tr");' +
    '    const resultClass = log.result === "成功" ? "operation-success" : "operation-failed";' +
    '    row.innerHTML = "<td>" + log.timestamp + "</td>" +' +
    '      "<td><span class=\'badge bg-primary\'>" + log.operationType + "</span></td>" +' +
    '      "<td>" + log.clientName + "</td>" +' +
    '      "<td>" + log.details + "</td>" +' +
    '      "<td><span class=\'" + resultClass + "\'>" + log.result + "</span></td>" +' +
    '      "<td>" + log.counselor + "</td>" +' +
    '      "<td>" + log.notes + "</td>";' +
    '    tbody.appendChild(row);' +
    '  });' +
    '}' +

    'function showStatistics() {' +
    '  const startDate = document.getElementById("startDate").value;' +
    '  const endDate = document.getElementById("endDate").value;' +
    '  const selectedOperationTypes = getSelectedOperationTypes();' +
    '  google.script.run' +
    '    .withSuccessHandler(function(stats) {' +
    '      displayStatistics(stats);' +
    '    })' +
    '    .withFailureHandler(function(error) {' +
    '      console.error("載入統計失敗:", error);' +
    '      alert("載入統計時發生錯誤: " + error);' +
    '    })' +
    '    .getOperationStatisticsWithMultipleTypes(startDate, endDate, selectedOperationTypes);' +
    '}' +

    'function displayStatistics(stats) {' +
    '  const statsCard = document.getElementById("statsCard");' +
    '  const statsContent = document.getElementById("statsContent");' +
    '  if (Object.keys(stats).length === 0) {' +
    '    statsCard.style.display = "none";' +
    '    return;' +
    '  }' +
    '  let totalOperations = 0;' +
    '  let totalSuccess = 0;' +
    '  let totalFailed = 0;' +
    '  let statsHtml = "";' +
    '  Object.keys(stats).forEach(function(type) {' +
    '    const stat = stats[type];' +
    '    totalOperations += stat.total;' +
    '    totalSuccess += stat.success;' +
    '    totalFailed += stat.failed;' +
    '    const successRate = ((stat.success / stat.total) * 100).toFixed(1);' +
    '    statsHtml += "<div class=\'col-md-4 col-lg-3\'>" +' +
    '      "<div class=\'stats-item\'>" +' +
    '      "<span class=\'stats-number\'>" + stat.total + "</span>" +' +
    '      "<div class=\'stats-label\'>" + type + "</div>" +' +
    '      "<small>成功率: " + successRate + "%</small>" +' +
    '      "</div>" +' +
    '      "</div>";' +
    '  });' +
    '  const overallSuccessRate = totalOperations > 0 ? ((totalSuccess / totalOperations) * 100).toFixed(1) : 0;' +
    '  statsHtml = "<div class=\'col-md-4 col-lg-3\'>" +' +
    '    "<div class=\'stats-item\'>" +' +
    '    "<span class=\'stats-number\'>" + totalOperations + "</span>" +' +
    '    "<div class=\'stats-label\'>總操作數</div>" +' +
    '    "<small>成功率: " + overallSuccessRate + "%</small>" +' +
    '    "</div>" +' +
    '    "</div>" + statsHtml;' +
    '  statsContent.innerHTML = statsHtml;' +
    '  statsCard.style.display = "block";' +
    '}' +

    'function resetFilters() {' +
    '  document.getElementById("startDate").value = "";' +
    '  document.getElementById("endDate").value = "";' +
    '  document.getElementById("clientName").selectedIndex = 0;' +
    '  selectAllOperations();' +
    '  document.getElementById("resultSuccess").checked = true;' +
    '  document.getElementById("statsCard").style.display = "none";' +
    '  const tbody = document.getElementById("logTableBody");' +
    '  tbody.innerHTML = "<tr><td colspan=\'7\' class=\'text-center p-4 text-muted\'>請選擇查詢條件並點擊「查詢日誌」</td></tr>";' +
    '  saveCurrentFilters();' +
    '}' +

    'function selectAllOperations() {' +
    '  const checkboxes = document.querySelectorAll("#operationTypeGroup input[type=\'checkbox\']");' +
    '  checkboxes.forEach(function(checkbox) { checkbox.checked = true; });' +
    '  saveCurrentFilters();' +
    '}' +

    'function deselectAllOperations() {' +
    '  const checkboxes = document.querySelectorAll("#operationTypeGroup input[type=\'checkbox\']");' +
    '  checkboxes.forEach(function(checkbox) { checkbox.checked = false; });' +
    '  saveCurrentFilters();' +
    '}' +

    'function invertOperationSelection() {' +
    '  const checkboxes = document.querySelectorAll("#operationTypeGroup input[type=\'checkbox\']");' +
    '  checkboxes.forEach(function(checkbox) { checkbox.checked = !checkbox.checked; });' +
    '  saveCurrentFilters();' +
    '}' +

    'function getSelectedOperationTypes() {' +
    '  const checkboxes = document.querySelectorAll("#operationTypeGroup input[type=\'checkbox\']:checked");' +
    '  return Array.from(checkboxes).map(function(checkbox) { return checkbox.value; });' +
    '}' +

    'function toggleFilterCollapse() {' +
    '  const filterCollapse = document.getElementById("filterCollapse");' +
    '  const filterHeader = document.getElementById("filterHeader");' +
    '  const collapseIcon = document.getElementById("collapseIcon");' +
    '  const warningBtn = document.querySelector(".btn-warning");' +
    '  if (filterCollapse.classList.contains("show")) {' +
    '    filterCollapse.classList.remove("show");' +
    '    filterHeader.classList.add("collapsed");' +
    '    collapseIcon.classList.remove("bi-chevron-down");' +
    '    collapseIcon.classList.add("bi-chevron-right");' +
    '    if (warningBtn) {' +
    '      warningBtn.innerHTML = "<i class=\'bi bi-eye\'></i> 展開篩選";' +
    '    }' +
    '  } else {' +
    '    filterCollapse.classList.add("show");' +
    '    filterHeader.classList.remove("collapsed");' +
    '    collapseIcon.classList.remove("bi-chevron-right");' +
    '    collapseIcon.classList.add("bi-chevron-down");' +
    '    if (warningBtn) {' +
    '      warningBtn.innerHTML = "<i class=\'bi bi-eye-slash\'></i> 收起篩選";' +
    '    }' +
    '  }' +
    '  saveCurrentFilters();' +
    '}' +

    'function showLoading(show) {' +
    '  document.getElementById("loadingIndicator").style.display = show ? "block" : "none";' +
    '  document.getElementById("logTable").style.display = show ? "none" : "table";' +
    '}' +

    'document.addEventListener("DOMContentLoaded", function() {' +
    '  loadSavedFilters();' +
    '});' +
    '</script>' +
    '</body>' +
    '</html>';

  const ui = HtmlService.createHtmlOutput(html)
    .setWidth(1400)
    .setHeight(800);
    
  SpreadsheetApp.getUi().showModalDialog(ui, '系統日誌管理');
}


/**
 * 匯出系統日誌 (支援多選操作類型)
 * @param {string} startDate - 開始日期
 * @param {string} endDate - 結束日期  
 * @param {Array} selectedOperationTypes - 選中的操作類型陣列
 * @param {string} clientName - 個案姓名
 * @param {string} resultFilter - 操作結果篩選
 * @return {string} 匯出檔案的URL
 */
function exportSystemLogsWithMultipleTypes(startDate, endDate, selectedOperationTypes, clientName, resultFilter) {
  try {
    // 獲取日誌數據
    const logs = getSystemLogsWithMultipleTypes(startDate, endDate, selectedOperationTypes, clientName, resultFilter);
    
    if (logs.length === 0) {
      SpreadsheetApp.getUi().alert("沒有可匯出的日誌記錄");
      return null;
    }
    
    // 創建新的試算表
    const exportSpreadsheet = SpreadsheetApp.create("系統日誌匯出_" + Utilities.formatDate(new Date(), "Asia/Taipei", "yyyyMMdd_HHmmss"));
    const exportSheet = exportSpreadsheet.getActiveSheet();
    exportSheet.setName("系統日誌");
    
    // 設定表頭
    const headers = ["時間", "操作類型", "個案姓名", "操作詳情", "操作結果", "負責人", "備註"];
    exportSheet.appendRow(headers);
    
    // 格式化表頭
    const headerRange = exportSheet.getRange(1, 1, 1, headers.length);
    headerRange.setBackground("#4285f4");
    headerRange.setFontColor("white");
    headerRange.setFontWeight("bold");
    
    // 添加數據
    logs.forEach(log => {
      exportSheet.appendRow([
        log.timestamp,
        log.operationType,
        log.clientName,
        log.details,
        log.result,
        log.counselor,
        log.notes
      ]);
    });
    
    // 自動調整列寬
    exportSheet.autoResizeColumns(1, headers.length);
    
    // 添加篩選條件說明
    exportSheet.appendRow([]);
    exportSheet.appendRow(["篩選條件:", "", "", "", "", "", ""]);
    exportSheet.appendRow(["開始日期:", startDate || "無限制", "", "", "", "", ""]);
    exportSheet.appendRow(["結束日期:", endDate || "無限制", "", "", "", "", ""]);
    exportSheet.appendRow(["操作類型:", selectedOperationTypes.length > 0 ? selectedOperationTypes.join(', ') : "全部", "", "", "", "", ""]);
    exportSheet.appendRow(["個案姓名:", clientName || "全部", "", "", "", "", ""]);
    exportSheet.appendRow(["操作結果:", resultFilter || "全部", "", "", "", "", ""]);
    
    return exportSpreadsheet.getUrl();
  } catch (error) {
    Logger.log("匯出系統日誌時出錯: " + error.toString());
    throw error;
  }
}

/**
 * 顯示今日活動摘要
 */
function showTodayActivitySummary() {
  const today = Utilities.formatDate(new Date(), "Asia/Taipei", "yyyy-MM-dd");
  const logs = getSystemLogs(today, today);
  
  if (logs.length === 0) {
    SpreadsheetApp.getUi().alert("今日活動摘要", "今日尚無系統活動記錄", SpreadsheetApp.getUi().ButtonSet.OK);
    return;
  }
  
  // 統計今日活動
  const summary = {};
  logs.forEach(log => {
    const type = log.operationType;
    if (!summary[type]) {
      summary[type] = { count: 0, clients: [] };
    }
    summary[type].count++;
    if (log.clientName && !summary[type].clients.includes(log.clientName)) {
      summary[type].clients.push(log.clientName);
    }
  });
  
  // 生成摘要內容
  let summaryHtml = `
    <div style="padding: 20px; font-family: Arial, sans-serif;">
      <h2 style="color: #4285f4;">📅 今日活動摘要 (${today})</h2>
      <div style="margin: 20px 0;">
  `;
  
  Object.keys(summary).forEach(type => {
    const data = summary[type];
    summaryHtml += `
      <div style="margin: 15px 0; padding: 15px; border-left: 4px solid #4285f4; background-color: #f8f9fa;">
        <h3 style="margin: 0 0 10px 0; color: #333;">${type}</h3>
        <p style="margin: 5px 0;"><strong>操作次數：</strong>${data.count} 次</p>
        ${data.clients.length > 0 ? `<p style="margin: 5px 0;"><strong>涉及個案：</strong>${data.clients.join(', ')}</p>` : ''}
      </div>
    `;
  });
  
  summaryHtml += `
      </div>
      <div style="text-align: center; margin-top: 20px;">
        <button onclick="google.script.host.close()" style="background-color: #4285f4; color: white; border: none; padding: 10px 20px; border-radius: 4px; cursor: pointer;">
          關閉
        </button>
      </div>
    </div>
  `;
  
  const ui = HtmlService.createHtmlOutput(summaryHtml)
    .setWidth(500)
    .setHeight(400);
    
  SpreadsheetApp.getUi().showModalDialog(ui, '今日活動摘要');
}

/**
 * 顯示操作統計報表對話框
 */
function showOperationStatisticsDialog() {
  const html = `
    <div style="padding: 20px; font-family: Arial, sans-serif;">
      <h2 style="color: #4285f4;">📊 操作統計報表</h2>
      
      <div style="margin: 15px 0;">
        <label style="font-weight: bold;">統計期間：</label><br>
        <input type="date" id="statsStartDate" style="width: 45%; padding: 8px; margin: 5px 2% 5px 0; border: 1px solid #ddd; border-radius: 4px;">
        <input type="date" id="statsEndDate" style="width: 45%; padding: 8px; margin: 5px 0; border: 1px solid #ddd; border-radius: 4px;">
      </div>
      
      <div style="margin: 20px 0; text-align: center;">
        <button onclick="generateStatistics()" style="background-color: #4285f4; color: white; border: none; padding: 10px 20px; border-radius: 4px; cursor: pointer; margin-right: 10px;">
          生成統計報表
        </button>
        <button onclick="google.script.host.close()" style="background-color: #f1f1f1; border: none; padding: 10px 20px; border-radius: 4px; cursor: pointer;">
          關閉
        </button>
      </div>
      
      <div id="statisticsResult" style="margin-top: 20px;"></div>
    </div>
    
    <script>
      // 頁面載入時設定預設日期（本月）
      document.addEventListener('DOMContentLoaded', function() {
        const today = new Date();
        const firstDay = new Date(today.getFullYear(), today.getMonth(), 1);
        
        document.getElementById('statsStartDate').value = formatDate(firstDay);
        document.getElementById('statsEndDate').value = formatDate(today);
      });
      
      function formatDate(date) {
        const year = date.getFullYear();
        const month = String(date.getMonth() + 1).padStart(2, '0');
        const day = String(date.getDate()).padStart(2, '0');
        return year + '-' + month + '-' + day;
      }
      
      function generateStatistics() {
        const startDate = document.getElementById('statsStartDate').value;
        const endDate = document.getElementById('statsEndDate').value;
        
        if (!startDate || !endDate) {
          alert('請選擇統計期間');
          return;
        }
        
        google.script.run
          .withSuccessHandler(function(stats) {
            displayStatisticsResult(stats, startDate, endDate);
          })
          .withFailureHandler(function(error) {
            alert('生成統計報表時發生錯誤: ' + error);
          })
          .getOperationStatistics(startDate, endDate);
      }
      
      function displayStatisticsResult(stats, startDate, endDate) {
        const resultDiv = document.getElementById('statisticsResult');
        
        if (Object.keys(stats).length === 0) {
          resultDiv.innerHTML = '<p style="text-align: center; color: #666;">該期間內無操作記錄</p>';
          return;
        }
        
        let html = \`<h3 style="color: #4285f4;">統計期間：\${startDate} 至 \${endDate}</h3>\`;
        html += '<table style="width: 100%; border-collapse: collapse; margin-top: 15px;">';
        html += '<thead><tr style="background-color: #f8f9fa;"><th style="border: 1px solid #ddd; padding: 10px;">操作類型</th><th style="border: 1px solid #ddd; padding: 10px;">總次數</th><th style="border: 1px solid #ddd; padding: 10px;">成功次數</th><th style="border: 1px solid #ddd; padding: 10px;">失敗次數</th><th style="border: 1px solid #ddd; padding: 10px;">成功率</th></tr></thead>';
        html += '<tbody>';
        
        let totalOps = 0, totalSuccess = 0, totalFailed = 0;
        
        Object.keys(stats).forEach(type => {
          const stat = stats[type];
          const successRate = ((stat.success / stat.total) * 100).toFixed(1);
          
          totalOps += stat.total;
          totalSuccess += stat.success;
          totalFailed += stat.failed;
          
          html += \`<tr>
            <td style="border: 1px solid #ddd; padding: 8px;">\${type}</td>
            <td style="border: 1px solid #ddd; padding: 8px; text-align: center;">\${stat.total}</td>
            <td style="border: 1px solid #ddd; padding: 8px; text-align: center; color: #28a745;">\${stat.success}</td>
            <td style="border: 1px solid #ddd; padding: 8px; text-align: center; color: #dc3545;">\${stat.failed}</td>
            <td style="border: 1px solid #ddd; padding: 8px; text-align: center;">\${successRate}%</td>
          </tr>\`;
        });
        
        // 添加總計行
        const overallSuccessRate = ((totalSuccess / totalOps) * 100).toFixed(1);
        html += \`<tr style="background-color: #e9ecef; font-weight: bold;">
          <td style="border: 1px solid #ddd; padding: 8px;">總計</td>
          <td style="border: 1px solid #ddd; padding: 8px; text-align: center;">\${totalOps}</td>
          <td style="border: 1px solid #ddd; padding: 8px; text-align: center; color: #28a745;">\${totalSuccess}</td>
          <td style="border: 1px solid #ddd; padding: 8px; text-align: center; color: #dc3545;">\${totalFailed}</td>
          <td style="border: 1px solid #ddd; padding: 8px; text-align: center;">\${overallSuccessRate}%</td>
        </tr>\`;
        
        html += '</tbody></table>';
        
        resultDiv.innerHTML = html;
      }
    </script>
  `;
  
  const ui = HtmlService.createHtmlOutput(html)
    .setWidth(600)
    .setHeight(500);
    
  SpreadsheetApp.getUi().showModalDialog(ui, '操作統計報表');
}

/**
 * 初始化日誌系統
 */
function initializeLogSystem() {
  try {
    // 創建系統日誌表格
    createSystemLogSheet();
    
    // 記錄系統初始化日誌
    logSystemActivity(
      "系統設定",
      "",
      "日誌系統初始化完成",
      "成功",
      "",
      "系統日誌表格已創建"
    );
    
    SpreadsheetApp.getUi().alert("初始化完成", "日誌系統已成功初始化！", SpreadsheetApp.getUi().ButtonSet.OK);
    Logger.log("日誌系統初始化完成");
    
  } catch (error) {
    Logger.log("初始化日誌系統時出錯: " + error.toString());
    SpreadsheetApp.getUi().alert("初始化失敗", "日誌系統初始化失敗: " + error.toString(), SpreadsheetApp.getUi().ButtonSet.OK);
  }
}

/**
 * 清理舊日誌記錄
 * @param {number} daysToKeep - 保留天數，預設90天
 */
function cleanupOldLogs(daysToKeep = 90) {
  try {
    const sheet = createSystemLogSheet();
    
    if (sheet.getLastRow() <= 1) {
      return 0;
    }
    
    const cutoffDate = new Date();
    cutoffDate.setDate(cutoffDate.getDate() - daysToKeep);
    
    const data = sheet.getRange(2, 1, sheet.getLastRow() - 1, 7).getValues();
    let deletedCount = 0;
    
    // 從後往前刪除舊記錄
    for (let i = data.length - 1; i >= 0; i--) {
      const logDate = new Date(data[i][0]);
      if (logDate < cutoffDate) {
        sheet.deleteRow(i + 2);
        deletedCount++;
      }
    }
    
    // 記錄清理操作
    if (deletedCount > 0) {
      logSystemActivity(
        "系統設定",
        "",
        `清理舊日誌記錄，刪除${deletedCount}筆記錄`,
        "成功",
        "",
        `保留最近${daysToKeep}天的記錄`
      );
    }
    
    Logger.log(`已清理 ${deletedCount} 筆舊日誌記錄`);
    return deletedCount;
    
  } catch (error) {
    Logger.log("清理舊日誌記錄時出錯: " + error.toString());
    throw error;
  }
}

/**
 * 自動新增小幫手待辦事項
 * @param {string} operationType - 操作類型
 * @param {string} clientName - 個案姓名
 * @param {Object} appointmentDetails - 預約詳情
 */
function createHelperTodoItem(operationType, clientName, appointmentDetails) {
  try {
    // 1. 檢查是否已存在相同待辦（防重複）
    if (isDuplicateTodo(clientName, operationType, appointmentDetails)) {
      console.log(`已存在相同待辦，跳過新增：${clientName} - ${operationType}`);
      return;
    }

    // 2. 組織備註內容
    const notes = formatTodoNotes(operationType, appointmentDetails);

    // 3. 建立待辦項目
    const todoItem = {
      clientName: clientName,
      status: "小幫手待確定",
      notes: notes,
      deadline: "", // 留空
      priority: "低", // 統一低優先級
      assignedTo: "小幫手",
      createdDate: new Date().toISOString().split('T')[0],
      operationType: operationType, // 用於重複檢查
      appointmentDateTime: `${appointmentDetails.date} ${appointmentDetails.time}` // 用於重複檢查
    };

    // 4. 新增到 viewClientTodos 系統
    addTodoToSystem(todoItem);
    
    console.log(`✅ 已新增小幫手待辦：${clientName} - ${operationType}`);
    
  } catch (error) {
    console.error('新增小幫手待辦失敗:', error);
  }
}

/**
 * 檢查是否為重複待辦
 */
function isDuplicateTodo(clientName, operationType, appointmentDetails) {
  try {
    const appointmentDateTime = `${appointmentDetails.date} ${appointmentDetails.time}`;
    
    // 從現有待辦系統中查詢
    const existingTodos = getClientTodos();
    
    return existingTodos.some(todo => 
      todo.clientName === clientName &&
      todo.status === "小幫手待確定" &&
      todo.notes.includes(operationType) &&
      todo.notes.includes(appointmentDetails.date)
    );
  } catch (error) {
    Logger.log(`檢查重複待辦時出錯：${error.toString()}`);
    return false; // 如果檢查失敗，允許新增
  }
}

function formatTodoNotes(operationType, appointmentDetails) {
  let notes = `操作類型：${operationType}\n\n`;
  
  // 確保正確取得個案名稱
  const clientName = appointmentDetails.clientName || appointmentDetails.name || '未知個案';
  
  // 獲取個案歷史記錄
  const clientHistory = getClientServiceHistory(clientName);
  const serviceType = appointmentDetails.serviceType || '未知服務';
  const currentServiceCount = clientHistory[serviceType] || 1;
  
  // 格式化標題
  notes += `（${serviceType} ${currentServiceCount}）${clientName}（${appointmentDetails.therapist}）- ${appointmentDetails.room}\n`;
  
  // 格式化日期時間
  if (appointmentDetails.date) {
    const appointmentDate = new Date(appointmentDetails.date);
    const formattedDate = formatDateWithWeekday(appointmentDate);
    notes += `${formattedDate}⋅${appointmentDetails.time}\n`;
  }
  
  // 詳細資訊
  notes += `服務方案: ${serviceType}\n`;
  notes += `諮商師: ${appointmentDetails.therapist}\n`;
  notes += `諮商室: ${appointmentDetails.room}\n\n`;
  
  // 個案歷史記錄
  notes += `個案歷史服務記錄：\n`;
  if (Object.keys(clientHistory).length > 0) {
    for (const [type, count] of Object.entries(clientHistory)) {
      notes += `${type}: ${count}次\n`;
    }
  } else {
    notes += `暫無歷史記錄\n`;
  }
  
  return notes;
}



/**
 * 新增待辦到系統
 */
function addTodoToSystem(todoItem) {
  try {
    // 使用您現有的 addClientTodo 函數
    const formData = {
      clientName: todoItem.clientName,
      status: todoItem.status,
      notes: todoItem.notes,
      deadline: todoItem.deadline,
      priority: todoItem.priority,
      assignedTo: todoItem.assignedTo
    };
    
    const result = addClientTodo(formData);
    
    if (result.success) {
      Logger.log(`成功新增小幫手待辦：${todoItem.clientName}`);
    } else {
      Logger.log(`新增小幫手待辦失敗：${result.message}`);
    }
    
    return result;
  } catch (error) {
    Logger.log(`新增小幫手待辦時出錯：${error.toString()}`);
    return { success: false, message: error.toString() };
  }
}

/**
 * 獲取現有待辦清單
 */
function getClientTodos() {
  try {
    const data = getTodoData();
    return formatTodoData(data);
  } catch (error) {
    Logger.log(`獲取待辦清單時出錯：${error.toString()}`);
    return [];
  }
}

/**
 * 操作類型對應表
 */
const OPERATION_TYPES = {
  FIRST_APPOINTMENT: "預約檢核",
  RENEWAL: "續約檢核", 
  GROUP_RESERVATION: "團體檢核",
  DEPOSIT_PAYMENT: "金流檢核",
  CANCELLATION: "取消檢核"
};

/**
 * 顯示預約講座對話框 (全新介面版)
 */
function showWorkshopReservationDialog() {
  const counselors = getCounselorList();
  const counselorOptions = counselors.map(counselor => `<option value="${counselor}">${counselor}</option>`).join('');
  
  var html = `
    <div style="padding: 20px; font-family: Arial, sans-serif;">
      <h2 style="color: #8E44AD;">預約講座</h2>
      <p style="font-size: 14px; color: #666;">請填寫以下講座資訊，所有欄位皆為選填。</p>
      
      <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 15px;">
        <div>
          <label style="font-weight: bold;">單位：</label>
          <input type="text" id="unitName" style="width: 100%; padding: 8px; margin-top: 5px; border: 1px solid #ddd; border-radius: 4px;">
        </div>
        <div>
          <label style="font-weight: bold;">講者：</label>
          <select id="speaker" style="width: 100%; padding: 8px; margin-top: 5px; border: 1px solid #ddd; border-radius: 4px;">
            <option value="">請選擇講者</option>
            ${counselorOptions}
          </select>
        </div>
        <div>
          <label style="font-weight: bold;">聯繫窗口：</label>
          <input type="text" id="contactPerson" style="width: 100%; padding: 8px; margin-top: 5px; border: 1px solid #ddd; border-radius: 4px;">
        </div>
        <div>
          <label style="font-weight: bold;">聯繫電話：</label>
          <input type="text" id="contactPhone" style="width: 100%; padding: 8px; margin-top: 5px; border: 1px solid #ddd; border-radius: 4px;">
        </div>
        <div>
          <label style="font-weight: bold;">鐘點費：</label>
          <input type="text" id="hourlyFee" style="width: 100%; padding: 8px; margin-top: 5px; border: 1px solid #ddd; border-radius: 4px;">
        </div>
        <div>
          <label style="font-weight: bold;">其他補助費用：</label>
          <input type="text" id="otherFees" style="width: 100%; padding: 8px; margin-top: 5px; border: 1px solid #ddd; border-radius: 4px;">
        </div>
      </div>

      <div style="margin-top: 15px;">
        <label style="font-weight: bold;">備註：</label>
        <textarea id="notes" style="width: 100%; height: 60px; padding: 8px; margin-top: 5px; border: 1px solid #ddd; border-radius: 4px;"></textarea>
      </div>
      
      <div id="sessionsContainer">
        <h3 style="color: #8E44AD; margin-top: 20px;">講座場次</h3>
        <div id="sessionsList">
          </div>
        <div style="margin: 15px 0; text-align: center;">
          <button onclick="addNewSession()" style="background-color: #34a853; color: white; border: none; padding: 8px 15px; border-radius: 4px; cursor: pointer;">+ 新增場次</button>
        </div>
      </div>
      
      <div style="margin: 20px 0; text-align: center;">
        <button onclick="submitWorkshopReservation()" style="background-color: #8E44AD; color: white; border: none; padding: 10px 20px; border-radius: 4px; cursor: pointer; margin-right: 10px;">確認預約</button>
        <button onclick="google.script.host.close()" style="background-color: #f1f1f1; border: none; padding: 10px 20px; border-radius: 4px; cursor: pointer;">取消</button>
      </div>
      <div id="message" style="margin-top: 15px; padding: 10px; display: none; border-radius: 4px;"></div>
      
      ${generateLoadingIndicatorHTML()}
    </div>
    <script>
      document.addEventListener("DOMContentLoaded", function() { addNewSession(); });

      function addNewSession() {
        const list = document.getElementById('sessionsList');
        const sessionItem = document.createElement('div');
        sessionItem.className = 'session-item';
        sessionItem.style = 'border: 1px solid #ddd; padding: 15px; border-radius: 4px; margin-bottom: 10px; position: relative;';
        sessionItem.innerHTML = \`
          <button onclick="this.parentElement.remove()" style="position: absolute; top: 5px; right: 5px; background-color: #db4437; color: white; border: none; width: 25px; height: 25px; border-radius: 50%; cursor: pointer; font-size: 14px; line-height: 1;">×</button>
          <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 15px;">
            <div><label>日期：</label><input type="date" class="session-date" style="width: 100%; padding: 8px;"></div>
            <div><label>地點：</label><input type="text" class="session-location" style="width: 100%; padding: 8px;"></div>
            <div><label>開始時間：</label><select class="session-start-hour">${generateHourOptions()}</select>:<select class="session-start-minute"><option value="00">00</option><option value="30">30</option></select></div>
            <div><label>結束時間：</label><select class="session-end-hour">${generateHourOptions()}</select>:<select class="session-end-minute"><option value="00">00</option><option value="30">30</option></select></div>
          </div>
        \`;
        list.appendChild(sessionItem);
      }

      function submitWorkshopReservation() {
        const workshopData = {
          unitName: document.getElementById('unitName').value,
          speaker: document.getElementById('speaker').value,
          contactPerson: document.getElementById('contactPerson').value,
          contactPhone: document.getElementById('contactPhone').value,
          hourlyFee: document.getElementById('hourlyFee').value,
          otherFees: document.getElementById('otherFees').value,
          notes: document.getElementById('notes').value,
          sessions: []
        };

        const sessionItems = document.querySelectorAll('.session-item');
        if (sessionItems.length === 0) {
          showMessage('請至少新增一個講座場次', 'error');
          return;
        }

        for (let i = 0; i < sessionItems.length; i++) {
          const item = sessionItems[i];
          const date = item.querySelector('.session-date').value;
          const location = item.querySelector('.session-location').value;
          const startTime = item.querySelector('.session-start-hour').value + ':' + item.querySelector('.session-start-minute').value;
          const endTime = item.querySelector('.session-end-hour').value + ':' + item.querySelector('.session-end-minute').value;
          
          if (!date || !startTime || !endTime || !location) {
            showMessage('請完整填寫每一個場次的日期、時間和地點', 'error');
            return;
          }
          workshopData.sessions.push({ date, location, startTime, endTime });
        }
        
        showLoading();
        google.script.run
          .withSuccessHandler(result => {
            hideLoading();
            if (result.success) {
              showMessage('講座預約已成功建立！', 'success');
              setTimeout(() => google.script.host.close(), 2000);
            } else {
              showMessage(result.message || '預約建立失敗', 'error');
            }
          })
          .withFailureHandler(error => {
            hideLoading();
            showMessage('發生錯誤：' + error.message, 'error');
          })
          .processWorkshopReservation(workshopData);
      }

      function showMessage(message, type) { /* ... 此函式內容不變 ... */ }
    </script>
  `;

  var ui = HtmlService.createHtmlOutput(html)
    .setWidth(600)
    .setHeight(650);
  SpreadsheetApp.getUi().showModalDialog(ui, '預約講座');
}

/**
 * 處理講座預約請求 (全新邏輯)
 * @param {Object} workshopData - 包含所有講座資訊的物件
 * @return {Object} 處理結果
 */
function processWorkshopReservation(workshopData) {
  try {
    const sheet = ensureWorkshopSheet(); // 確保目標工作表存在
    const now = new Date();
    
    // 遍歷所有場次來建立紀錄和日曆事件
    workshopData.sessions.forEach((session, index) => {
      const sessionDate = new Date(session.date);
      
      // 創建日曆事件
      const event = createWorkshopCalendarEvent(workshopData, session, index + 1);
      const eventId = event ? event.getId() : "創建失敗";

      // 在「講座登錄資料」工作表中新增一筆紀錄
      sheet.appendRow([
        now,
        workshopData.unitName,
        workshopData.contactPerson,
        workshopData.contactPhone,
        sessionDate,
        `${session.startTime}-${session.endTime}`,
        workshopData.speaker,
        workshopData.hourlyFee,
        workshopData.otherFees,
        workshopData.notes,
        eventId
      ]);
    });
    
    // 記錄成功日誌
    logSystemActivity("講座預約", workshopData.unitName, `預約 ${workshopData.sessions.length} 場講座成功`, "成功", workshopData.speaker);

    return { success: true };
  } catch (error) {
    Logger.log("處理講座預約時出現錯誤：" + error.toString());
    logSystemActivity("講座預約", workshopData.unitName, `講座預約失敗: ${error.toString()}`, "失敗", workshopData.speaker);
    return { success: false, message: '處理預約時出現錯誤: ' + error.toString() };
  }
}

/**
 * 創建講座日曆事件 (全新資訊版)
 * @param {Object} workshopData - 包含講座主要資訊的物件
 * @param {Object} session - 包含單一場次的日期、時間和地點
 * @param {number} sessionNumber - 場次編號
 * @return {CalendarEvent|null} 創建的日曆事件
 */
function createWorkshopCalendarEvent(workshopData, session) {
  try {
    const config = getSystemConfig();
    const calendar = CalendarApp.getCalendarById(config.calendarId);
    
    const [startHours, startMinutes] = session.startTime.split(':').map(Number);
    const [endHours, endMinutes] = session.endTime.split(':').map(Number);
    
    const startTime = new Date(session.date);
    startTime.setHours(startHours, startMinutes, 0);
    
    const endTime = new Date(session.date);
    endTime.setHours(endHours, endMinutes, 0);
    
    const title = `【講座】${workshopData.unitName} (${workshopData.speaker})`;
    
    // 建立包含所有詳細資訊的日曆事件描述
    let description = `單位: ${workshopData.unitName || '未提供'}\n`;
    description += `講者: ${workshopData.speaker || '未提供'}\n`;
    description += `地點: ${session.location}\n\n`;
    description += `--- 聯繫資訊 ---\n`;
    description += `聯繫窗口: ${workshopData.contactPerson || '未提供'}\n`;
    description += `聯繫電話: ${workshopData.contactPhone || '未提供'}\n\n`;
    description += `--- 費用資訊 ---\n`;
    description += `鐘點費: ${workshopData.hourlyFee || '未提供'}\n`;
    description += `其他補助費用: ${workshopData.otherFees || '無'}\n\n`;
    description += `--- 備註 ---\n${workshopData.notes || '無'}`;
    
    const event = calendar.createEvent(title, startTime, endTime, {
      description: description,
      location: session.location,
    });
    
    if (event) {
      event.setColor(CalendarApp.EventColor.MAUVE); // 設定為紫色
      Logger.log("講座日曆事件創建成功，並已設定顏色。");
    }
    
    return event;
  } catch (error) {
    Logger.log("創建講座日曆事件錯誤：" + error.toString());
    return null;
  }
}

/**
 * 【全新通用函式】從系統設定工作表中，根據區塊標題獲取其下方的選項列表
 * @param {string} sectionName - 要讀取的區塊標題 (例如 "服務方案", "心理師")
 * @return {Array<string>} 該區塊的選項列表
 */
function getListFromSettings(sectionName) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const settingsSheet = ss.getSheetByName("系統設定");
    
    if (!settingsSheet) {
      // 如果找不到設定表，提供一個 UI 提示
      SpreadsheetApp.getUi().alert("錯誤：找不到名為 '系統設定' 的工作表。");
      return [];
    }
    
    const data = settingsSheet.getDataRange().getValues();
    const listItems = [];
    let inTargetSection = false;

    // 從第二行開始遍歷 (跳過標題)
    for (let i = 1; i < data.length; i++) {
      const currentCellA = data[i][0].trim(); // 當前行A欄位 (區塊標題)
      const currentCellB = data[i][1].trim(); // 當前行B欄位 (選項值)

      if (currentCellA !== "") {
        // A欄有值，代表這是一個區塊的開始
        if (inTargetSection) {
          // 如果我們原本已經在目標區塊內，現在又遇到新的區塊標頭，
          // 表示目標區塊已經結束，可以停止讀取。
          break; 
        }
        if (currentCellA === sectionName) {
          // 找到了我們想要的區塊，開始讀取。
          inTargetSection = true;
        }
      } else if (inTargetSection && currentCellB !== "") {
        // A欄是空的，且我們正處於目標區塊內，這表示這是一個選項。
        listItems.push(currentCellB);
      }
    }
    
    if (listItems.length === 0) {
        Logger.log(`在 '系統設定' 中找不到區塊 "${sectionName}" 或該區塊下沒有任何項目。`);
    }

    return listItems;
  } catch (error) {
    Logger.log(`從系統設定獲取 '${sectionName}' 列表時出錯: ${error.toString()}`);
    SpreadsheetApp.getUi().alert(`讀取設定時發生錯誤: ${error.message}`);
    return []; // 發生錯誤時返回空陣列
  }
}

/**
 * 確保「講座登錄資料」工作表存在，若不存在則創建它
 * @return {Sheet} 講座登錄資料工作表物件
 */
function ensureWorkshopSheet() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sheetName = "講座登錄資料";
  let sheet = ss.getSheetByName(sheetName);
  
  if (!sheet) {
    sheet = ss.insertSheet(sheetName);
    const headers = [
      "時間戳記", "單位", "聯繫窗口", "電話", "講座日期", 
      "講座時間", "講者", "鐘點費", "其他補助費用", "備註", "日曆事件ID"
    ];
    sheet.appendRow(headers);
    sheet.getRange(1, 1, 1, headers.length).setFontWeight("bold");
    sheet.setFrozenRows(1);
  }
  return sheet;
}
